//
//Generated by gvc at 26/03/2009 9.03.13
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCRCARICHE
	/// </summary>
	public partial class GVCRCARICHECollection
	{
		/// <summary>
		/// Returns the Database Name of the field IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJColumnName = "IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field FLAG_LEGALE.
		///The field is mandatory.
		/// </summary>
		public const string FLAG_LEGALEColumnName = "FLAG_LEGALE";
		/// <summary>
		/// Returns the Database Name of the field FLAG_LIQUIDATORE.
		///The field is mandatory.
		/// </summary>
		public const string FLAG_LIQUIDATOREColumnName = "FLAG_LIQUIDATORE";
		/// <summary>
		/// Returns the Database Name of the field ANTIMAFIA.
		///The field is mandatory.
		/// </summary>
		public const string ANTIMAFIAColumnName = "ANTIMAFIA";
		/// <summary>
		/// Returns the Database Name of the field ANTIMAFIA_ARRIVATA.
		///The field is mandatory.
		/// </summary>
		public const string ANTIMAFIA_ARRIVATAColumnName = "ANTIMAFIA_ARRIVATA";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_COMUNICAZIONE.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_COMUNICAZIONEColumnName = "IDOBJ_COMUNICAZIONE";
		/// <summary>
		/// Returns the Database Name of the field SOCIO_GCS.
		/// </summary>
		public const string SOCIO_GCSColumnName = "SOCIO_GCS";
		/// <summary>
		/// Returns the Database Name of the field ANTIMAFIA_PRODOTTA.
		///The field is mandatory.
		/// </summary>
		public const string ANTIMAFIA_PRODOTTAColumnName = "ANTIMAFIA_PRODOTTA";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_TIPO_CARICA.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_TIPO_CARICAColumnName = "IDOBJ_TIPO_CARICA";
		/// <summary>
		/// Returns the Database Name of the field DATA_INIZIO.
		/// </summary>
		public const string DATA_INIZIOColumnName = "DATA_INIZIO";
		/// <summary>
		/// Returns the Database Name of the field DATA_FINE.
		/// </summary>
		public const string DATA_FINEColumnName = "DATA_FINE";
		/// <summary>
		/// Returns the Database Name of the field OPERATOREULTMOD.
		/// </summary>
		public const string OPERATOREULTMODColumnName = "OPERATOREULTMOD";
		/// <summary>
		/// Returns the Database Name of the field DATAORAULTMOD.
		/// </summary>
		public const string DATAORAULTMODColumnName = "DATAORAULTMOD";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_SOGGETTO.
		/// </summary>
		public const string IDOBJ_SOGGETTOColumnName = "IDOBJ_SOGGETTO";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCRCARICHECollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCRCARICHE
		/// </summary>
		/// <returns>Array of objects GVCRCARICHE</returns>
		public virtual GVCRCARICHE[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCRCARICHE
		/// </summary>
		/// <returns>DataTable of objects GVCRCARICHE</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCRCARICHE
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCRCARICHE selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCRCARICHE</returns>
		public GVCRCARICHE GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCRCARICHE[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCRCARICHE selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCRCARICHE</returns>
		public GVCRCARICHE[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCRCARICHE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCRCARICHE</returns>
		public virtual GVCRCARICHE[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCRCARICHE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCRCARICHE</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCRCARICHE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCRCARICHE</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCRCARICHE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("IDOBJ, ");
			sql.Append("FLAG_LEGALE, ");
			sql.Append("FLAG_LIQUIDATORE, ");
			sql.Append("ANTIMAFIA, ");
			sql.Append("ANTIMAFIA_ARRIVATA, ");
			sql.Append("IDOBJ_COMUNICAZIONE, ");
			sql.Append("SOCIO_GCS, ");
			sql.Append("ANTIMAFIA_PRODOTTA, ");
			sql.Append("IDOBJ_TIPO_CARICA, ");
			sql.Append("DATA_INIZIO, ");
			sql.Append("DATA_FINE, ");
			sql.Append("OPERATOREULTMOD, ");
			sql.Append("DATAORAULTMOD, ");
			sql.Append("IDOBJ_SOGGETTO ");
			sql.Append("FROM GVCRCARICHE ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Returns an object GVCRCARICHE selected by a primary key
		/// </summary>
		/// <param name="IDOBJ">The primary key of the object</param>
		/// <returns>Object of type GVCRCARICHE</returns>
		public virtual GVCRCARICHE GetByPrimaryKey(System.Int32 IDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateGetCommand(whereSql, null))
			{
				AddParameter(cmd, "IDOBJ", IDOBJ);
				GVCRCARICHE[] tempArray = MapRecords(cmd);
				return tempArray.Length == 0 ? null : tempArray[0];
			}
		}


		/// <summary>
		/// Returns an object GVCRCARICHE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_CARICA">The foreign key of the object</param>
		/// <returns>Object of type GVCRCARICHE</returns>
		public virtual GVCRCARICHE[] GetByIDOBJ_TIPO_CARICA(System.Int32 iDOBJ_TIPO_CARICA)
		{
			return MapRecords(CreateGetByIDOBJ_TIPO_CARICACommand(iDOBJ_TIPO_CARICA));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCRCARICHE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_CARICA">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_TIPO_CARICAAsDataTable(System.Int32 iDOBJ_TIPO_CARICA)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_TIPO_CARICACommand(iDOBJ_TIPO_CARICA));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_CARICA">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_TIPO_CARICACommand(System.Int32 iDOBJ_TIPO_CARICA)
		{
			string whereSql = "IDOBJ_TIPO_CARICA = " + _db.CreateSqlParameterName("IDOBJ_TIPO_CARICA");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_TIPO_CARICA", iDOBJ_TIPO_CARICA);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCRCARICHE
		/// </summary>
		/// <param name="iDOBJ_TIPO_CARICA">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_TIPO_CARICA(System.Int32 iDOBJ_TIPO_CARICA)
		{
			return CreateDeleteByIDOBJ_TIPO_CARICACommand(iDOBJ_TIPO_CARICA).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCRCARICHE
		/// </summary>
		/// <param name="iDOBJ_TIPO_CARICA">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_TIPO_CARICACommand(System.Int32 iDOBJ_TIPO_CARICA)
		{
			string whereSql = "IDOBJ_TIPO_CARICA = " + _db.CreateSqlParameterName("IDOBJ_TIPO_CARICA");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_TIPO_CARICA", iDOBJ_TIPO_CARICA);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCRCARICHE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_COMUNICAZIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCRCARICHE</returns>
		public virtual GVCRCARICHE[] GetByIDOBJ_COMUNICAZIONE(System.Int32 iDOBJ_COMUNICAZIONE)
		{
			return MapRecords(CreateGetByIDOBJ_COMUNICAZIONECommand(iDOBJ_COMUNICAZIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCRCARICHE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_COMUNICAZIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_COMUNICAZIONEAsDataTable(System.Int32 iDOBJ_COMUNICAZIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_COMUNICAZIONECommand(iDOBJ_COMUNICAZIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_COMUNICAZIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_COMUNICAZIONECommand(System.Int32 iDOBJ_COMUNICAZIONE)
		{
			string whereSql = "IDOBJ_COMUNICAZIONE = " + _db.CreateSqlParameterName("IDOBJ_COMUNICAZIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_COMUNICAZIONE", iDOBJ_COMUNICAZIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCRCARICHE
		/// </summary>
		/// <param name="iDOBJ_COMUNICAZIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_COMUNICAZIONE(System.Int32 iDOBJ_COMUNICAZIONE)
		{
			return CreateDeleteByIDOBJ_COMUNICAZIONECommand(iDOBJ_COMUNICAZIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCRCARICHE
		/// </summary>
		/// <param name="iDOBJ_COMUNICAZIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_COMUNICAZIONECommand(System.Int32 iDOBJ_COMUNICAZIONE)
		{
			string whereSql = "IDOBJ_COMUNICAZIONE = " + _db.CreateSqlParameterName("IDOBJ_COMUNICAZIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_COMUNICAZIONE", iDOBJ_COMUNICAZIONE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCRCARICHE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key of the object</param>
		/// <returns>Object of type GVCRCARICHE</returns>
		public virtual GVCRCARICHE[] GetByIDOBJ_SOGGETTO(System.Int32 iDOBJ_SOGGETTO)
		{
			return MapRecords(CreateGetByIDOBJ_SOGGETTOCommand(iDOBJ_SOGGETTO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCRCARICHE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_SOGGETTOAsDataTable(System.Int32 iDOBJ_SOGGETTO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_SOGGETTOCommand(iDOBJ_SOGGETTO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_SOGGETTOCommand(System.Int32 iDOBJ_SOGGETTO)
		{
			string whereSql = "IDOBJ_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_SOGGETTO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_SOGGETTO", iDOBJ_SOGGETTO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCRCARICHE
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_SOGGETTO(System.Int32 iDOBJ_SOGGETTO)
		{
			return CreateDeleteByIDOBJ_SOGGETTOCommand(iDOBJ_SOGGETTO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCRCARICHE
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_SOGGETTOCommand(System.Int32 iDOBJ_SOGGETTO)
		{
			string whereSql = "IDOBJ_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_SOGGETTO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_SOGGETTO", iDOBJ_SOGGETTO);
			return cmd;
		}

		/// <summary>
		/// Inserts in the Database an object GVCRCARICHE
		/// </summary>
		/// <param name="valore">The object to insert</param>
		public virtual void Insert(GVCRCARICHE valore)
		{
			System.Int32 id = -1;
			System.String sqlStr;

			sqlStr = "SELECT GVCRCARICHE_SEQ.NEXTVAL FROM DUAL";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				id = Convert.ToInt32(cmd.ExecuteScalar());
			}

			sqlStr = "INSERT INTO GVCRCARICHE (" +
			"IDOBJ, " +
			"FLAG_LEGALE, " +
			"FLAG_LIQUIDATORE, " +
			"ANTIMAFIA, " +
			"ANTIMAFIA_ARRIVATA, " +
			"IDOBJ_COMUNICAZIONE, " +
			"SOCIO_GCS, " +
			"ANTIMAFIA_PRODOTTA, " +
			"IDOBJ_TIPO_CARICA, " +
			"DATA_INIZIO, " +
			"DATA_FINE, " +
			"OPERATOREULTMOD, " +
			"DATAORAULTMOD, " +
			"IDOBJ_SOGGETTO) " +
			"VALUES (" + id.ToString() + ", " +
			_db.CreateSqlParameterName("FLAG_LEGALE") + ", " +
			_db.CreateSqlParameterName("FLAG_LIQUIDATORE") + ", " +
			_db.CreateSqlParameterName("ANTIMAFIA") + ", " +
			_db.CreateSqlParameterName("ANTIMAFIA_ARRIVATA") + ", " +
			_db.CreateSqlParameterName("IDOBJ_COMUNICAZIONE") + ", " +
			_db.CreateSqlParameterName("SOCIO_GCS") + ", " +
			_db.CreateSqlParameterName("ANTIMAFIA_PRODOTTA") + ", " +
			_db.CreateSqlParameterName("IDOBJ_TIPO_CARICA") + ", " +
			_db.CreateSqlParameterName("DATA_INIZIO") + ", " +
			_db.CreateSqlParameterName("DATA_FINE") + ", " +
			_db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
			_db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
			_db.CreateSqlParameterName("IDOBJ_SOGGETTO") + ")";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "FLAG_LEGALE", valore.FLAG_LEGALE);
				AddParameter(cmd, "FLAG_LIQUIDATORE", valore.FLAG_LIQUIDATORE);
				AddParameter(cmd, "ANTIMAFIA", valore.ANTIMAFIA);
				AddParameter(cmd, "ANTIMAFIA_ARRIVATA", valore.ANTIMAFIA_ARRIVATA);
				AddParameter(cmd, "IDOBJ_COMUNICAZIONE", valore.IDOBJ_COMUNICAZIONE);
				AddParameter(cmd, "SOCIO_GCS", valore.IsSOCIO_GCSNull ? DBNull.Value : (object)valore.SOCIO_GCS);
				AddParameter(cmd, "ANTIMAFIA_PRODOTTA", valore.ANTIMAFIA_PRODOTTA);
				AddParameter(cmd, "IDOBJ_TIPO_CARICA", valore.IDOBJ_TIPO_CARICA);
				AddParameter(cmd, "DATA_INIZIO", valore.IsDATA_INIZIONull ? DBNull.Value : (object)valore.DATA_INIZIO);
				AddParameter(cmd, "DATA_FINE", valore.IsDATA_FINENull ? DBNull.Value : (object)valore.DATA_FINE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_SOGGETTO", valore.IsIDOBJ_SOGGETTONull ? DBNull.Value : (object)valore.IDOBJ_SOGGETTO);
				cmd.ExecuteScalar();
				valore.IDOBJ = id;
			}
		}

		/// <summary>
		/// Updates in the Database an object GVCRCARICHE
		/// </summary>
		/// <param name="valore">The object to update</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool Update(GVCRCARICHE valore)
		{
			System.String sqlStr = "UPDATE GVCRCARICHE SET " +
				"FLAG_LEGALE = " + _db.CreateSqlParameterName("FLAG_LEGALE") + ", " +
				"FLAG_LIQUIDATORE = " + _db.CreateSqlParameterName("FLAG_LIQUIDATORE") + ", " +
				"ANTIMAFIA = " + _db.CreateSqlParameterName("ANTIMAFIA") + ", " +
				"ANTIMAFIA_ARRIVATA = " + _db.CreateSqlParameterName("ANTIMAFIA_ARRIVATA") + ", " +
				"IDOBJ_COMUNICAZIONE = " + _db.CreateSqlParameterName("IDOBJ_COMUNICAZIONE") + ", " +
				"SOCIO_GCS = " + _db.CreateSqlParameterName("SOCIO_GCS") + ", " +
				"ANTIMAFIA_PRODOTTA = " + _db.CreateSqlParameterName("ANTIMAFIA_PRODOTTA") + ", " +
				"IDOBJ_TIPO_CARICA = " + _db.CreateSqlParameterName("IDOBJ_TIPO_CARICA") + ", " +
				"DATA_INIZIO = " + _db.CreateSqlParameterName("DATA_INIZIO") + ", " +
				"DATA_FINE = " + _db.CreateSqlParameterName("DATA_FINE") + ", " +
				"OPERATOREULTMOD = " + _db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
				"DATAORAULTMOD = " + _db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
				"IDOBJ_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_SOGGETTO") +
				" WHERE " +
				"IDOBJ = " + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ", valore.IDOBJ);
				AddParameter(cmd, "FLAG_LEGALE", valore.FLAG_LEGALE);
				AddParameter(cmd, "FLAG_LIQUIDATORE", valore.FLAG_LIQUIDATORE);
				AddParameter(cmd, "ANTIMAFIA", valore.ANTIMAFIA);
				AddParameter(cmd, "ANTIMAFIA_ARRIVATA", valore.ANTIMAFIA_ARRIVATA);
				AddParameter(cmd, "IDOBJ_COMUNICAZIONE", valore.IDOBJ_COMUNICAZIONE);
				AddParameter(cmd, "SOCIO_GCS", valore.IsSOCIO_GCSNull ? DBNull.Value : (object)valore.SOCIO_GCS);
				AddParameter(cmd, "ANTIMAFIA_PRODOTTA", valore.ANTIMAFIA_PRODOTTA);
				AddParameter(cmd, "IDOBJ_TIPO_CARICA", valore.IDOBJ_TIPO_CARICA);
				AddParameter(cmd, "DATA_INIZIO", valore.IsDATA_INIZIONull ? DBNull.Value : (object)valore.DATA_INIZIO);
				AddParameter(cmd, "DATA_FINE", valore.IsDATA_FINENull ? DBNull.Value : (object)valore.DATA_FINE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_SOGGETTO", valore.IsIDOBJ_SOGGETTONull ? DBNull.Value : (object)valore.IDOBJ_SOGGETTO);
				return cmd.ExecuteNonQuery() != 0;
			}
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCRCARICHE
		/// </summary>
		/// <param name="table">The DataTable of objects GVCRCARICHE</param>
		public void Update(DataTable table)
		{
			Update(table, true);
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCRCARICHE
		/// </summary>
		/// <param name="table">The DataTable of objects GVCRCARICHE</param>
		/// <param name="acceptChanges">true to accept the changes, otherwise false</param>
		public virtual void Update(DataTable table, bool acceptChanges)
		{
			DataRowCollection rows = table.Rows;
			for(int i = rows.Count - 1; i >= 0; i--)
			{
				DataRow row = rows[i];
				switch(row.RowState)
				{
					case DataRowState.Added:
						Insert(MapRow(row));
						if(acceptChanges)
							row.AcceptChanges();
						break;

					case DataRowState.Deleted:
						row.RejectChanges();
						try
						{
							DeleteByPrimaryKey((System.Int32)row["IDOBJ"]);
						}
						finally
						{
							row.Delete();
						}
						if(acceptChanges)
							row.AcceptChanges();
						break;

				case DataRowState.Modified:
					Update(MapRow(row));
					if(acceptChanges)
						row.AcceptChanges();
					break;
				}
			}
		}

		/// <summary>
		/// Deletes from the Database an object GVCRCARICHE
		/// </summary>
		/// <param name="valore">The object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public bool Delete(GVCRCARICHE valore)
		{
			return DeleteByPrimaryKey(valore.IDOBJ);
		}

		/// <summary>
		/// Deletes from the Database an object GVCRCARICHE
		/// </summary>
		/// <param name="iDOBJ">The primary key of the object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool DeleteByPrimaryKey(System.Int32 iDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateDeleteCommand(whereSql))
			{
				AddParameter(cmd, "IDOBJ" , iDOBJ);
				return cmd.ExecuteNonQuery() > 0;
			}
		}

		/// <summary>
		/// Deletes from the Database the objects GVCRCARICHE selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>The number of the deleted objects</returns>
		public int Delete(System.String whereSql)
		{
			return CreateDeleteCommand(whereSql).ExecuteNonQuery();
		}

		/// <summary>
		/// Returns an IDbCommand to delete the objects GVCRCARICHE selected by 
		/// a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteCommand(string whereSql)
		{
			StringBuilder sql = new StringBuilder("DELETE FROM GVCRCARICHE");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format(" WHERE {0}", whereSql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Deletes all the objects GVCRCARICHE
		/// </summary>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteAll()
		{
			return Delete("");
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCRCARICHE
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCRCARICHE</returns>
		protected GVCRCARICHE[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCRCARICHE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCRCARICHE</returns>
		protected GVCRCARICHE[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCRCARICHE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCRCARICHE</returns>
		protected virtual GVCRCARICHE[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int iDOBJColumnIndex = reader.GetOrdinal("IDOBJ");
			int fLAG_LEGALEColumnIndex = reader.GetOrdinal("FLAG_LEGALE");
			int fLAG_LIQUIDATOREColumnIndex = reader.GetOrdinal("FLAG_LIQUIDATORE");
			int aNTIMAFIAColumnIndex = reader.GetOrdinal("ANTIMAFIA");
			int aNTIMAFIA_ARRIVATAColumnIndex = reader.GetOrdinal("ANTIMAFIA_ARRIVATA");
			int iDOBJ_COMUNICAZIONEColumnIndex = reader.GetOrdinal("IDOBJ_COMUNICAZIONE");
			int sOCIO_GCSColumnIndex = reader.GetOrdinal("SOCIO_GCS");
			int aNTIMAFIA_PRODOTTAColumnIndex = reader.GetOrdinal("ANTIMAFIA_PRODOTTA");
			int iDOBJ_TIPO_CARICAColumnIndex = reader.GetOrdinal("IDOBJ_TIPO_CARICA");
			int dATA_INIZIOColumnIndex = reader.GetOrdinal("DATA_INIZIO");
			int dATA_FINEColumnIndex = reader.GetOrdinal("DATA_FINE");
			int oPERATOREULTMODColumnIndex = reader.GetOrdinal("OPERATOREULTMOD");
			int dATAORAULTMODColumnIndex = reader.GetOrdinal("DATAORAULTMOD");
			int iDOBJ_SOGGETTOColumnIndex = reader.GetOrdinal("IDOBJ_SOGGETTO");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCRCARICHE record = new GVCRCARICHE();
					recordList.Add(record);
					record.IDOBJ = Convert.ToInt32(reader.GetValue(iDOBJColumnIndex));
					record.FLAG_LEGALE = Convert.ToInt32(reader.GetValue(fLAG_LEGALEColumnIndex));
					record.FLAG_LIQUIDATORE = Convert.ToInt32(reader.GetValue(fLAG_LIQUIDATOREColumnIndex));
					record.ANTIMAFIA = Convert.ToInt32(reader.GetValue(aNTIMAFIAColumnIndex));
					record.ANTIMAFIA_ARRIVATA = Convert.ToInt32(reader.GetValue(aNTIMAFIA_ARRIVATAColumnIndex));
					record.IDOBJ_COMUNICAZIONE = Convert.ToInt32(reader.GetValue(iDOBJ_COMUNICAZIONEColumnIndex));
					if(!reader.IsDBNull(sOCIO_GCSColumnIndex))
						record.SOCIO_GCS = Convert.ToString(reader.GetValue(sOCIO_GCSColumnIndex));
					record.ANTIMAFIA_PRODOTTA = Convert.ToInt32(reader.GetValue(aNTIMAFIA_PRODOTTAColumnIndex));
					record.IDOBJ_TIPO_CARICA = Convert.ToInt32(reader.GetValue(iDOBJ_TIPO_CARICAColumnIndex));
					if(!reader.IsDBNull(dATA_INIZIOColumnIndex))
						record.DATA_INIZIO = Convert.ToDateTime(reader.GetValue(dATA_INIZIOColumnIndex));
					if(!reader.IsDBNull(dATA_FINEColumnIndex))
						record.DATA_FINE = Convert.ToDateTime(reader.GetValue(dATA_FINEColumnIndex));
					if(!reader.IsDBNull(oPERATOREULTMODColumnIndex))
						record.OPERATOREULTMOD = Convert.ToString(reader.GetValue(oPERATOREULTMODColumnIndex));
					if(!reader.IsDBNull(dATAORAULTMODColumnIndex))
						record.DATAORAULTMOD = Convert.ToDateTime(reader.GetValue(dATAORAULTMODColumnIndex));
					if(!reader.IsDBNull(iDOBJ_SOGGETTOColumnIndex))
						record.IDOBJ_SOGGETTO = Convert.ToInt32(reader.GetValue(iDOBJ_SOGGETTOColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCRCARICHE[])(recordList.ToArray(typeof(GVCRCARICHE)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCRCARICHE</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCRCARICHE</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCRCARICHE</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCRCARICHE
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCRCARICHE</returns>
		protected virtual GVCRCARICHE MapRow(DataRow row)
		{
			GVCRCARICHE mappedObject = new GVCRCARICHE();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "IDOBJ"
			dataColumn = dataTable.Columns["IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ = (System.Int32)row[dataColumn];
			//Campo "FLAG_LEGALE"
			dataColumn = dataTable.Columns["FLAG_LEGALE"];
			if(!row.IsNull(dataColumn))
				mappedObject.FLAG_LEGALE = (System.Int32)row[dataColumn];
			//Campo "FLAG_LIQUIDATORE"
			dataColumn = dataTable.Columns["FLAG_LIQUIDATORE"];
			if(!row.IsNull(dataColumn))
				mappedObject.FLAG_LIQUIDATORE = (System.Int32)row[dataColumn];
			//Campo "ANTIMAFIA"
			dataColumn = dataTable.Columns["ANTIMAFIA"];
			if(!row.IsNull(dataColumn))
				mappedObject.ANTIMAFIA = (System.Int32)row[dataColumn];
			//Campo "ANTIMAFIA_ARRIVATA"
			dataColumn = dataTable.Columns["ANTIMAFIA_ARRIVATA"];
			if(!row.IsNull(dataColumn))
				mappedObject.ANTIMAFIA_ARRIVATA = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_COMUNICAZIONE"
			dataColumn = dataTable.Columns["IDOBJ_COMUNICAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_COMUNICAZIONE = (System.Int32)row[dataColumn];
			//Campo "SOCIO_GCS"
			dataColumn = dataTable.Columns["SOCIO_GCS"];
			if(!row.IsNull(dataColumn))
				mappedObject.SOCIO_GCS = (System.String)row[dataColumn];
			//Campo "ANTIMAFIA_PRODOTTA"
			dataColumn = dataTable.Columns["ANTIMAFIA_PRODOTTA"];
			if(!row.IsNull(dataColumn))
				mappedObject.ANTIMAFIA_PRODOTTA = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_TIPO_CARICA"
			dataColumn = dataTable.Columns["IDOBJ_TIPO_CARICA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_TIPO_CARICA = (System.Int32)row[dataColumn];
			//Campo "DATA_INIZIO"
			dataColumn = dataTable.Columns["DATA_INIZIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_INIZIO = (System.DateTime)row[dataColumn];
			//Campo "DATA_FINE"
			dataColumn = dataTable.Columns["DATA_FINE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_FINE = (System.DateTime)row[dataColumn];
			//Campo "OPERATOREULTMOD"
			dataColumn = dataTable.Columns["OPERATOREULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.OPERATOREULTMOD = (System.String)row[dataColumn];
			//Campo "DATAORAULTMOD"
			dataColumn = dataTable.Columns["DATAORAULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORAULTMOD = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_SOGGETTO"
			dataColumn = dataTable.Columns["IDOBJ_SOGGETTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_SOGGETTO = (System.Int32)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCRCARICHE
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCRCARICHE";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = true;
			dataColumn.Unique = true;
			dataColumn.AutoIncrement = true;
			dataColumn = dataTable.Columns.Add("FLAG_LEGALE", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("FLAG_LIQUIDATORE", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ANTIMAFIA", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ANTIMAFIA_ARRIVATA", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_COMUNICAZIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("SOCIO_GCS", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ANTIMAFIA_PRODOTTA", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_TIPO_CARICA", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_INIZIO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_FINE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("OPERATOREULTMOD", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORAULTMOD", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_SOGGETTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "FLAG_LEGALE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "FLAG_LIQUIDATORE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "ANTIMAFIA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "ANTIMAFIA_ARRIVATA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_COMUNICAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "SOCIO_GCS":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "ANTIMAFIA_PRODOTTA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_TIPO_CARICA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_INIZIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_FINE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "OPERATOREULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORAULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_SOGGETTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
