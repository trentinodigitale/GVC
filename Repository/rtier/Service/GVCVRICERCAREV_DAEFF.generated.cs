//
//Generated by DELTADATOR\GS0445 at 28/07/2009 9.36.31
//

using System;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Description of GVCVRICERCAREV_DAEFF
	/// </summary>
	public partial class GVCVRICERCAREV_DAEFF
	{
		private System.String _s_DENOMINAZIONE;
		private System.Boolean _s_DENOMINAZIONENull = true;
		private System.Int32 _s_IDOBJ;
		private System.Boolean _s_IDOBJNull = true;
		private System.Int32 _r_IDOBJ;
		private System.Boolean _r_IDOBJNull = true;
		private System.String _r_NUMERO_REA;
		private System.Boolean _r_NUMERO_REANull = true;
		private System.Int32 _r_IDOBJ_STATO;
		private System.Boolean _r_IDOBJ_STATONull = true;
		private System.Int32 _sTATO_FLAG_REVISIONE;
		private System.Boolean _sTATO_FLAG_REVISIONENull = true;
		private System.Int32 _r_IDOBJ_CADENZA_REVISIONE;
		private System.Boolean _r_IDOBJ_CADENZA_REVISIONENull = true;
		private System.DateTime _r_DATA_COSTITUZIONE;
		private System.Boolean _r_DATA_COSTITUZIONENull = true;
        private System.Int32 _rEV_ANNO_REVISIONE;
        private System.Boolean _rEV_ANNO_REVISIONENull = true;
        private System.Int32 _rEV_IDOBJ;
        private System.Boolean _rEV_IDOBJNull = true;
        private System.Int32 _rEV_IDOBJ_TIPO_REVISIONE;
        private System.Boolean _rEV_IDOBJ_TIPO_REVISIONENull = true;
        private System.Int32 _rEV_IDOBJ_ORGANO_REVISORE;
        private System.Boolean _rEV_IDOBJ_ORGANO_REVISORENull = true;
        private System.String _rEV_DESC_ORGANO_REVISORE;
        private System.Boolean _rEV_DESC_ORGANO_REVISORENull = true;
        private System.Int32 _rEV_IDOBJ_ESITO_REVISIONE;
		private System.Boolean _rEV_IDOBJ_ESITO_REVISIONENull = true;
		private System.DateTime _rEV_DATA_CONCLUSIONE;
		private System.Boolean _rEV_DATA_CONCLUSIONENull = true;
		private System.DateTime _rEV_DATA_DEPOSITO_RELAZIONE;
		private System.Boolean _rEV_DATA_DEPOSITO_RELAZIONENull = true;
		private System.String _rEV_NUMERO_DETERMINA_REVOCA;
		private System.Boolean _rEV_NUMERO_DETERMINA_REVOCANull = true;
		private System.DateTime _rEV_DATA_DETERMINA_REVOCA;
		private System.Boolean _rEV_DATA_DETERMINA_REVOCANull = true;
		private System.Double _iNC_IDOBJ;
		private System.Boolean _iNC_IDOBJNull = true;
		private System.DateTime _iNC_DATA_SCADENZA_TEORICA;
		private System.Boolean _iNC_DATA_SCADENZA_TEORICANull = true;
		private System.DateTime _iNC_DATA_DELIBERA_INCARICO;
		private System.Boolean _iNC_DATA_DELIBERA_INCARICONull = true;
		private System.String _iNC_NUMERO_DETERMINA_INCARICO;
		private System.Boolean _iNC_NUMERO_DETERMINA_INCARICONull = true;
		private System.DateTime _iNC_DATA_DETERMINA_INCARICO;
		private System.Boolean _iNC_DATA_DETERMINA_INCARICONull = true;
		private System.Double _iNC_IMPEGNO;
		private System.Boolean _iNC_IMPEGNONull = true;
		private System.Double _cOMPENSI_IDOBJ;
		private System.Boolean _cOMPENSI_IDOBJNull = true;
		private System.Double _cOMPENSI_IDOBJ_SOGGETTO;
		private System.Boolean _cOMPENSI_IDOBJ_SOGGETTONull = true;
		private System.String _cOMPENSI_SOGG_DESC;
		private System.Boolean _cOMPENSI_SOGG_DESCNull = true;
		private System.Double _cOMPENSI_TOTALE;
		private System.Boolean _cOMPENSI_TOTALENull = true;
		private System.String _aDESIONE_ASSOCIAZIONE;
		private System.Boolean _aDESIONE_ASSOCIAZIONENull = true;

		/// <summary>
		/// Default constructor
		/// </summary>
		public GVCVRICERCAREV_DAEFF(){}

		/// <summary>
		/// Value of field S_DENOMINAZIONE
		/// </summary>
		public System.String S_DENOMINAZIONE
		{
			get
			{
				if(IsS_DENOMINAZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _s_DENOMINAZIONE;
			}
			set
			{
				_s_DENOMINAZIONENull = false;
				_s_DENOMINAZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsS_DENOMINAZIONENull
		{
			get
			{
				return _s_DENOMINAZIONENull;
			}
			set
			{
				_s_DENOMINAZIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String S_DENOMINAZIONESafe
		{
			get
			{
				if (IsS_DENOMINAZIONENull)
					return System.String.Empty;
				return S_DENOMINAZIONE;
			}
		}

		/// <summary>
		/// Value of field S_IDOBJ
		/// </summary>
		public System.Int32 S_IDOBJ
		{
			get
			{
				if(IsS_IDOBJNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _s_IDOBJ;
			}
			set
			{
				_s_IDOBJNull = false;
				_s_IDOBJ = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsS_IDOBJNull
		{
			get
			{
				return _s_IDOBJNull;
			}
			set
			{
				_s_IDOBJNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 S_IDOBJSafe
		{
			get
			{
				if (IsS_IDOBJNull)
					return -1;
				return S_IDOBJ;
			}
		}

		/// <summary>
		/// Value of field R_IDOBJ
		/// </summary>
		public System.Int32 R_IDOBJ
		{
			get
			{
				if(IsR_IDOBJNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _r_IDOBJ;
			}
			set
			{
				_r_IDOBJNull = false;
				_r_IDOBJ = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsR_IDOBJNull
		{
			get
			{
				return _r_IDOBJNull;
			}
			set
			{
				_r_IDOBJNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 R_IDOBJSafe
		{
			get
			{
				if (IsR_IDOBJNull)
					return -1;
				return R_IDOBJ;
			}
		}

		/// <summary>
		/// Value of field R_NUMERO_REA
		/// </summary>
		public System.String R_NUMERO_REA
		{
			get
			{
				if(IsR_NUMERO_REANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _r_NUMERO_REA;
			}
			set
			{
				_r_NUMERO_REANull = false;
				_r_NUMERO_REA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsR_NUMERO_REANull
		{
			get
			{
				return _r_NUMERO_REANull;
			}
			set
			{
				_r_NUMERO_REANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String R_NUMERO_REASafe
		{
			get
			{
				if (IsR_NUMERO_REANull)
					return System.String.Empty;
				return R_NUMERO_REA;
			}
		}

		/// <summary>
		/// Value of field R_IDOBJ_STATO
		/// </summary>
		public System.Int32 R_IDOBJ_STATO
		{
			get
			{
				if(IsR_IDOBJ_STATONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _r_IDOBJ_STATO;
			}
			set
			{
				_r_IDOBJ_STATONull = false;
				_r_IDOBJ_STATO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsR_IDOBJ_STATONull
		{
			get
			{
				return _r_IDOBJ_STATONull;
			}
			set
			{
				_r_IDOBJ_STATONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 R_IDOBJ_STATOSafe
		{
			get
			{
				if (IsR_IDOBJ_STATONull)
					return -1;
				return R_IDOBJ_STATO;
			}
		}

		/// <summary>
		/// Value of field STATO_FLAG_REVISIONE
		/// </summary>
		public System.Int32 STATO_FLAG_REVISIONE
		{
			get
			{
				if(IsSTATO_FLAG_REVISIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _sTATO_FLAG_REVISIONE;
			}
			set
			{
				_sTATO_FLAG_REVISIONENull = false;
				_sTATO_FLAG_REVISIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsSTATO_FLAG_REVISIONENull
		{
			get
			{
				return _sTATO_FLAG_REVISIONENull;
			}
			set
			{
				_sTATO_FLAG_REVISIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 STATO_FLAG_REVISIONESafe
		{
			get
			{
				if (IsSTATO_FLAG_REVISIONENull)
					return -1;
				return STATO_FLAG_REVISIONE;
			}
		}

		/// <summary>
		/// Value of field R_IDOBJ_CADENZA_REVISIONE
		/// </summary>
		public System.Int32 R_IDOBJ_CADENZA_REVISIONE
		{
			get
			{
				if(IsR_IDOBJ_CADENZA_REVISIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _r_IDOBJ_CADENZA_REVISIONE;
			}
			set
			{
				_r_IDOBJ_CADENZA_REVISIONENull = false;
				_r_IDOBJ_CADENZA_REVISIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsR_IDOBJ_CADENZA_REVISIONENull
		{
			get
			{
				return _r_IDOBJ_CADENZA_REVISIONENull;
			}
			set
			{
				_r_IDOBJ_CADENZA_REVISIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 R_IDOBJ_CADENZA_REVISIONESafe
		{
			get
			{
				if (IsR_IDOBJ_CADENZA_REVISIONENull)
					return -1;
				return R_IDOBJ_CADENZA_REVISIONE;
			}
		}

		/// <summary>
		/// Value of field R_DATA_COSTITUZIONE
		/// </summary>
		public System.DateTime R_DATA_COSTITUZIONE
		{
			get
			{
				if(IsR_DATA_COSTITUZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _r_DATA_COSTITUZIONE;
			}
			set
			{
				_r_DATA_COSTITUZIONENull = false;
				_r_DATA_COSTITUZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsR_DATA_COSTITUZIONENull
		{
			get
			{
				return _r_DATA_COSTITUZIONENull;
			}
			set
			{
				_r_DATA_COSTITUZIONENull = value;
			}
		}

		/// <summary>
        /// Value of field REV_IDOBJ
        /// </summary>
        public System.Int32 REV_IDOBJ
        {
            get
            {
                if (IsREV_IDOBJNull)
                    throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
                return _rEV_IDOBJ;
            }
            set
            {
                _rEV_IDOBJNull = false;
                _rEV_IDOBJ = value;
            }
        }

        /// <summary>
        /// Return true if field is null, otherwise false.
        /// </summary>
        public bool IsREV_IDOBJNull
        {
            get
            {
                return _rEV_IDOBJNull;
            }
            set
            {
                _rEV_IDOBJNull = value;
            }
        }

        /// <summary>
        ///  This property is intend to use with string and integer fields 
        ///  that can contain nullable values. 
        ///  It is read only. 
        /// </summary>
        /// <returns>The value of the field or String.Empty/-1</returns>
        public System.Int32 REV_IDOBJSafe
        {
            get
            {
                if (IsREV_IDOBJNull)
                    return -1;
                return REV_IDOBJ;
            }
        }

        /// <summary>
        /// Value of field REV_ANNO_REVISIONE
        /// </summary>
        public System.Int32 REV_ANNO_REVISIONE
        {
            get
            {
                if (IsREV_ANNO_REVISIONENull)
                    throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
                return _rEV_ANNO_REVISIONE;
            }
            set
            {
                _rEV_ANNO_REVISIONENull = false;
                _rEV_ANNO_REVISIONE = value;
            }
        }

        /// <summary>
        /// Return true if field is null, otherwise false.
        /// </summary>
        public bool IsREV_ANNO_REVISIONENull
        {
            get
            {
                return _rEV_ANNO_REVISIONENull;
            }
            set
            {
                _rEV_ANNO_REVISIONENull = value;
            }
        }

        /// <summary>
        ///  This property is intend to use with string and integer fields 
        ///  that can contain nullable values. 
        ///  It is read only. 
        /// </summary>
        /// <returns>The value of the field or String.Empty/-1</returns>
        public System.Int32 REV_ANNO_REVISIONESafe
        {
            get
            {
                if (IsREV_ANNO_REVISIONENull)
                    return -1;
                return REV_ANNO_REVISIONE;
            }
        }

        /// <summary>
        /// Value of field REV_IDOBJ_TIPO_REVISIONE
        /// </summary>
        public System.Int32 REV_IDOBJ_TIPO_REVISIONE
        {
            get
            {
                if (IsREV_IDOBJ_TIPO_REVISIONENull)
                    throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
                return _rEV_IDOBJ_TIPO_REVISIONE;
            }
            set
            {
                _rEV_IDOBJ_TIPO_REVISIONENull = false;
                _rEV_IDOBJ_TIPO_REVISIONE = value;
            }
        }

        /// <summary>
        /// Return true if field is null, otherwise false.
        /// </summary>
        public bool IsREV_IDOBJ_TIPO_REVISIONENull
        {
            get
            {
                return _rEV_IDOBJ_TIPO_REVISIONENull;
            }
            set
            {
                _rEV_IDOBJ_TIPO_REVISIONENull = value;
            }
        }

        /// <summary>
        ///  This property is intend to use with string and integer fields 
        ///  that can contain nullable values. 
        ///  It is read only. 
        /// </summary>
        /// <returns>The value of the field or String.Empty/-1</returns>
        public System.Int32 REV_IDOBJ_TIPO_REVISIONESafe
        {
            get
            {
                if (IsREV_IDOBJ_TIPO_REVISIONENull)
                    return -1;
                return REV_IDOBJ_TIPO_REVISIONE;
            }
        }

        /// <summary>
        /// Value of field REV_IDOBJ_ORGANO_REVISORE
        /// </summary>
        public System.Int32 REV_IDOBJ_ORGANO_REVISORE
        {
            get
            {
                if (IsREV_IDOBJ_ORGANO_REVISORENull)
                    throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
                return _rEV_IDOBJ_ORGANO_REVISORE;
            }
            set
            {
                _rEV_IDOBJ_ORGANO_REVISORENull = false;
                _rEV_IDOBJ_ORGANO_REVISORE = value;
            }
        }

        /// <summary>
        /// Return true if field is null, otherwise false.
        /// </summary>
        public bool IsREV_IDOBJ_ORGANO_REVISORENull
        {
            get
            {
                return _rEV_IDOBJ_ORGANO_REVISORENull;
            }
            set
            {
                _rEV_IDOBJ_ORGANO_REVISORENull = value;
            }
        }

        /// <summary>
        /// Value of field REV_DESC_ORGANO_REVISORE
        /// </summary>
        public System.String REV_DESC_ORGANO_REVISORE
        {
            get
            {
                if (IsREV_DESC_ORGANO_REVISORENull)
                    throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
                return _rEV_DESC_ORGANO_REVISORE;
            }
            set
            {
                _rEV_DESC_ORGANO_REVISORENull = false;
                _rEV_DESC_ORGANO_REVISORE = value;
            }
        }

        /// <summary>
        /// Return true if field is null, otherwise false.
        /// </summary>
        public bool IsREV_DESC_ORGANO_REVISORENull
        {
            get
            {
                return _rEV_DESC_ORGANO_REVISORENull;
            }
            set
            {
                _rEV_DESC_ORGANO_REVISORENull = value;
            }
        }

        /// <summary>
        ///  This property is intend to use with string and integer fields 
        ///  that can contain nullable values. 
        ///  It is read only. 
        /// </summary>
        /// <returns>The value of the field or String.Empty/-1</returns>
        public System.String REV_DESC_ORGANO_REVISORESafe
        {
            get
            {
                if (IsREV_DESC_ORGANO_REVISORENull)
                    return System.String.Empty;
                return REV_DESC_ORGANO_REVISORE;
            }
        }

        /// <summary>
        /// Value of field REV_IDOBJ_ESITO_REVISIONE
        /// </summary>
        public System.Int32 REV_IDOBJ_ESITO_REVISIONE
        {
            get
            {
                if (IsREV_IDOBJ_ESITO_REVISIONENull)
                    throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
                return _rEV_IDOBJ_ESITO_REVISIONE;
            }
            set
            {
                _rEV_IDOBJ_ESITO_REVISIONENull = false;
                _rEV_IDOBJ_ESITO_REVISIONE = value;
            }
        }

        /// <summary>
        /// Return true if field is null, otherwise false.
        /// </summary>
        public bool IsREV_IDOBJ_ESITO_REVISIONENull
        {
            get
            {
                return _rEV_IDOBJ_ESITO_REVISIONENull;
            }
            set
            {
                _rEV_IDOBJ_ESITO_REVISIONENull = value;
            }
        }

		/// <summary>
		/// Value of field REV_DATA_CONCLUSIONE
		/// </summary>
		public System.DateTime REV_DATA_CONCLUSIONE
		{
			get
			{
				if(IsREV_DATA_CONCLUSIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _rEV_DATA_CONCLUSIONE;
			}
			set
			{
				_rEV_DATA_CONCLUSIONENull = false;
				_rEV_DATA_CONCLUSIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsREV_DATA_CONCLUSIONENull
		{
			get
			{
				return _rEV_DATA_CONCLUSIONENull;
			}
			set
			{
				_rEV_DATA_CONCLUSIONENull = value;
			}
		}

		/// <summary>
		/// Value of field REV_DATA_DEPOSITO_RELAZIONE
		/// </summary>
		public System.DateTime REV_DATA_DEPOSITO_RELAZIONE
		{
			get
			{
				if(IsREV_DATA_DEPOSITO_RELAZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _rEV_DATA_DEPOSITO_RELAZIONE;
			}
			set
			{
				_rEV_DATA_DEPOSITO_RELAZIONENull = false;
				_rEV_DATA_DEPOSITO_RELAZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsREV_DATA_DEPOSITO_RELAZIONENull
		{
			get
			{
				return _rEV_DATA_DEPOSITO_RELAZIONENull;
			}
			set
			{
				_rEV_DATA_DEPOSITO_RELAZIONENull = value;
			}
		}

		/// <summary>
		/// Value of field REV_NUMERO_DETERMINA_REVOCA
		/// </summary>
		public System.String REV_NUMERO_DETERMINA_REVOCA
		{
			get
			{
				if(IsREV_NUMERO_DETERMINA_REVOCANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _rEV_NUMERO_DETERMINA_REVOCA;
			}
			set
			{
				_rEV_NUMERO_DETERMINA_REVOCANull = false;
				_rEV_NUMERO_DETERMINA_REVOCA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsREV_NUMERO_DETERMINA_REVOCANull
		{
			get
			{
				return _rEV_NUMERO_DETERMINA_REVOCANull;
			}
			set
			{
				_rEV_NUMERO_DETERMINA_REVOCANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String REV_NUMERO_DETERMINA_REVOCASafe
		{
			get
			{
				if (IsREV_NUMERO_DETERMINA_REVOCANull)
					return System.String.Empty;
				return REV_NUMERO_DETERMINA_REVOCA;
			}
		}

		/// <summary>
		/// Value of field REV_DATA_DETERMINA_REVOCA
		/// </summary>
		public System.DateTime REV_DATA_DETERMINA_REVOCA
		{
			get
			{
				if(IsREV_DATA_DETERMINA_REVOCANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _rEV_DATA_DETERMINA_REVOCA;
			}
			set
			{
				_rEV_DATA_DETERMINA_REVOCANull = false;
				_rEV_DATA_DETERMINA_REVOCA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsREV_DATA_DETERMINA_REVOCANull
		{
			get
			{
				return _rEV_DATA_DETERMINA_REVOCANull;
			}
			set
			{
				_rEV_DATA_DETERMINA_REVOCANull = value;
			}
		}

		/// <summary>
		/// Value of field INC_IDOBJ
		/// </summary>
		public System.Double INC_IDOBJ
		{
			get
			{
				if(IsINC_IDOBJNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iNC_IDOBJ;
			}
			set
			{
				_iNC_IDOBJNull = false;
				_iNC_IDOBJ = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsINC_IDOBJNull
		{
			get
			{
				return _iNC_IDOBJNull;
			}
			set
			{
				_iNC_IDOBJNull = value;
			}
		}

		/// <summary>
		/// Value of field INC_DATA_SCADENZA_TEORICA
		/// </summary>
		public System.DateTime INC_DATA_SCADENZA_TEORICA
		{
			get
			{
				if(IsINC_DATA_SCADENZA_TEORICANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iNC_DATA_SCADENZA_TEORICA;
			}
			set
			{
				_iNC_DATA_SCADENZA_TEORICANull = false;
				_iNC_DATA_SCADENZA_TEORICA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsINC_DATA_SCADENZA_TEORICANull
		{
			get
			{
				return _iNC_DATA_SCADENZA_TEORICANull;
			}
			set
			{
				_iNC_DATA_SCADENZA_TEORICANull = value;
			}
		}

		/// <summary>
		/// Value of field INC_DATA_DELIBERA_INCARICO
		/// </summary>
		public System.DateTime INC_DATA_DELIBERA_INCARICO
		{
			get
			{
				if(IsINC_DATA_DELIBERA_INCARICONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iNC_DATA_DELIBERA_INCARICO;
			}
			set
			{
				_iNC_DATA_DELIBERA_INCARICONull = false;
				_iNC_DATA_DELIBERA_INCARICO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsINC_DATA_DELIBERA_INCARICONull
		{
			get
			{
				return _iNC_DATA_DELIBERA_INCARICONull;
			}
			set
			{
				_iNC_DATA_DELIBERA_INCARICONull = value;
			}
		}

		/// <summary>
		/// Value of field INC_NUMERO_DETERMINA_INCARICO
		/// </summary>
		public System.String INC_NUMERO_DETERMINA_INCARICO
		{
			get
			{
				if(IsINC_NUMERO_DETERMINA_INCARICONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iNC_NUMERO_DETERMINA_INCARICO;
			}
			set
			{
				_iNC_NUMERO_DETERMINA_INCARICONull = false;
				_iNC_NUMERO_DETERMINA_INCARICO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsINC_NUMERO_DETERMINA_INCARICONull
		{
			get
			{
				return _iNC_NUMERO_DETERMINA_INCARICONull;
			}
			set
			{
				_iNC_NUMERO_DETERMINA_INCARICONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String INC_NUMERO_DETERMINA_INCARICOSafe
		{
			get
			{
				if (IsINC_NUMERO_DETERMINA_INCARICONull)
					return System.String.Empty;
				return INC_NUMERO_DETERMINA_INCARICO;
			}
		}

		/// <summary>
		/// Value of field INC_DATA_DETERMINA_INCARICO
		/// </summary>
		public System.DateTime INC_DATA_DETERMINA_INCARICO
		{
			get
			{
				if(IsINC_DATA_DETERMINA_INCARICONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iNC_DATA_DETERMINA_INCARICO;
			}
			set
			{
				_iNC_DATA_DETERMINA_INCARICONull = false;
				_iNC_DATA_DETERMINA_INCARICO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsINC_DATA_DETERMINA_INCARICONull
		{
			get
			{
				return _iNC_DATA_DETERMINA_INCARICONull;
			}
			set
			{
				_iNC_DATA_DETERMINA_INCARICONull = value;
			}
		}

		/// <summary>
		/// Value of field INC_IMPEGNO
		/// </summary>
		public System.Double INC_IMPEGNO
		{
			get
			{
				if(IsINC_IMPEGNONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iNC_IMPEGNO;
			}
			set
			{
				_iNC_IMPEGNONull = false;
				_iNC_IMPEGNO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsINC_IMPEGNONull
		{
			get
			{
				return _iNC_IMPEGNONull;
			}
			set
			{
				_iNC_IMPEGNONull = value;
			}
		}

		/// <summary>
		/// Value of field COMPENSI_IDOBJ
		/// </summary>
		public System.Double COMPENSI_IDOBJ
		{
			get
			{
				if(IsCOMPENSI_IDOBJNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cOMPENSI_IDOBJ;
			}
			set
			{
				_cOMPENSI_IDOBJNull = false;
				_cOMPENSI_IDOBJ = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCOMPENSI_IDOBJNull
		{
			get
			{
				return _cOMPENSI_IDOBJNull;
			}
			set
			{
				_cOMPENSI_IDOBJNull = value;
			}
		}

		/// <summary>
		/// Value of field COMPENSI_IDOBJ_SOGGETTO
		/// </summary>
		public System.Double COMPENSI_IDOBJ_SOGGETTO
		{
			get
			{
				if(IsCOMPENSI_IDOBJ_SOGGETTONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cOMPENSI_IDOBJ_SOGGETTO;
			}
			set
			{
				_cOMPENSI_IDOBJ_SOGGETTONull = false;
				_cOMPENSI_IDOBJ_SOGGETTO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCOMPENSI_IDOBJ_SOGGETTONull
		{
			get
			{
				return _cOMPENSI_IDOBJ_SOGGETTONull;
			}
			set
			{
				_cOMPENSI_IDOBJ_SOGGETTONull = value;
			}
		}

		/// <summary>
		/// Value of field COMPENSI_SOGG_DESC
		/// </summary>
		public System.String COMPENSI_SOGG_DESC
		{
			get
			{
				if(IsCOMPENSI_SOGG_DESCNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cOMPENSI_SOGG_DESC;
			}
			set
			{
				_cOMPENSI_SOGG_DESCNull = false;
				_cOMPENSI_SOGG_DESC = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCOMPENSI_SOGG_DESCNull
		{
			get
			{
				return _cOMPENSI_SOGG_DESCNull;
			}
			set
			{
				_cOMPENSI_SOGG_DESCNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String COMPENSI_SOGG_DESCSafe
		{
			get
			{
				if (IsCOMPENSI_SOGG_DESCNull)
					return System.String.Empty;
				return COMPENSI_SOGG_DESC;
			}
		}

		/// <summary>
		/// Value of field COMPENSI_TOTALE
		/// </summary>
		public System.Double COMPENSI_TOTALE
		{
			get
			{
				if(IsCOMPENSI_TOTALENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cOMPENSI_TOTALE;
			}
			set
			{
				_cOMPENSI_TOTALENull = false;
				_cOMPENSI_TOTALE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCOMPENSI_TOTALENull
		{
			get
			{
				return _cOMPENSI_TOTALENull;
			}
			set
			{
				_cOMPENSI_TOTALENull = value;
			}
		}

		/// <summary>
		/// Value of field ADESIONE_ASSOCIAZIONE
		/// </summary>
		public System.String ADESIONE_ASSOCIAZIONE
		{
			get
			{
				if(IsADESIONE_ASSOCIAZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _aDESIONE_ASSOCIAZIONE;
			}
			set
			{
				_aDESIONE_ASSOCIAZIONENull = false;
				_aDESIONE_ASSOCIAZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsADESIONE_ASSOCIAZIONENull
		{
			get
			{
				return _aDESIONE_ASSOCIAZIONENull;
			}
			set
			{
				_aDESIONE_ASSOCIAZIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String ADESIONE_ASSOCIAZIONESafe
		{
			get
			{
				if (IsADESIONE_ASSOCIAZIONENull)
					return System.String.Empty;
				return ADESIONE_ASSOCIAZIONE;
			}
		}

	}
}