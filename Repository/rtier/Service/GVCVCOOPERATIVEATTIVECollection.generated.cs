//
//Generated by gvc at 05/08/2009 14.41.04
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCVCOOPERATIVEATTIVE
	/// </summary>
	public partial class GVCVCOOPERATIVEATTIVECollection
	{
		/// <summary>
		/// Returns the Database Name of the field DENOMINAZIONE.
		/// </summary>
		public const string DENOMINAZIONEColumnName = "DENOMINAZIONE";
		/// <summary>
		/// Returns the Database Name of the field CODICE_FISCALE.
		/// </summary>
		public const string CODICE_FISCALEColumnName = "CODICE_FISCALE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJColumnName = "IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_REA.
		/// </summary>
		public const string NUMERO_REAColumnName = "NUMERO_REA";
		/// <summary>
		/// Returns the Database Name of the field REANUMERIC.
		/// </summary>
		public const string REANUMERICColumnName = "REANUMERIC";
		/// <summary>
		/// Returns the Database Name of the field DATA_DETERMINA.
		/// </summary>
		public const string DATA_DETERMINAColumnName = "DATA_DETERMINA";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_DETERMINA.
		/// </summary>
		public const string NUMERO_DETERMINAColumnName = "NUMERO_DETERMINA";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_STATO.
		/// </summary>
		public const string IDOBJ_STATOColumnName = "IDOBJ_STATO";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCVCOOPERATIVEATTIVECollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCVCOOPERATIVEATTIVE
		/// </summary>
		/// <returns>Array of objects GVCVCOOPERATIVEATTIVE</returns>
		public virtual GVCVCOOPERATIVEATTIVE[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCVCOOPERATIVEATTIVE
		/// </summary>
		/// <returns>DataTable of objects GVCVCOOPERATIVEATTIVE</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCVCOOPERATIVEATTIVE
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCVCOOPERATIVEATTIVE selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCVCOOPERATIVEATTIVE</returns>
		public GVCVCOOPERATIVEATTIVE GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCVCOOPERATIVEATTIVE[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCVCOOPERATIVEATTIVE selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCVCOOPERATIVEATTIVE</returns>
		public GVCVCOOPERATIVEATTIVE[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCVCOOPERATIVEATTIVE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCVCOOPERATIVEATTIVE</returns>
		public virtual GVCVCOOPERATIVEATTIVE[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVCOOPERATIVEATTIVE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCVCOOPERATIVEATTIVE</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVCOOPERATIVEATTIVE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVCOOPERATIVEATTIVE</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCVCOOPERATIVEATTIVE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("DENOMINAZIONE, ");
			sql.Append("CODICE_FISCALE, ");
			sql.Append("IDOBJ, ");
			sql.Append("NUMERO_REA, ");
			sql.Append("REANUMERIC, ");
			sql.Append("DATA_DETERMINA, ");
			sql.Append("NUMERO_DETERMINA, ");
			sql.Append("IDOBJ_STATO ");
			sql.Append("FROM GVCVCOOPERATIVEATTIVE ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}


		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVCOOPERATIVEATTIVE
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCVCOOPERATIVEATTIVE</returns>
		protected GVCVCOOPERATIVEATTIVE[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVCOOPERATIVEATTIVE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCVCOOPERATIVEATTIVE</returns>
		protected GVCVCOOPERATIVEATTIVE[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCVCOOPERATIVEATTIVE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCVCOOPERATIVEATTIVE</returns>
		protected virtual GVCVCOOPERATIVEATTIVE[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int dENOMINAZIONEColumnIndex = reader.GetOrdinal("DENOMINAZIONE");
			int cODICE_FISCALEColumnIndex = reader.GetOrdinal("CODICE_FISCALE");
			int iDOBJColumnIndex = reader.GetOrdinal("IDOBJ");
			int nUMERO_REAColumnIndex = reader.GetOrdinal("NUMERO_REA");
			int rEANUMERICColumnIndex = reader.GetOrdinal("REANUMERIC");
			int dATA_DETERMINAColumnIndex = reader.GetOrdinal("DATA_DETERMINA");
			int nUMERO_DETERMINAColumnIndex = reader.GetOrdinal("NUMERO_DETERMINA");
			int iDOBJ_STATOColumnIndex = reader.GetOrdinal("IDOBJ_STATO");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCVCOOPERATIVEATTIVE record = new GVCVCOOPERATIVEATTIVE();
					recordList.Add(record);
					if(!reader.IsDBNull(dENOMINAZIONEColumnIndex))
						record.DENOMINAZIONE = Convert.ToString(reader.GetValue(dENOMINAZIONEColumnIndex));
					if(!reader.IsDBNull(cODICE_FISCALEColumnIndex))
						record.CODICE_FISCALE = Convert.ToString(reader.GetValue(cODICE_FISCALEColumnIndex));
					record.IDOBJ = Convert.ToInt32(reader.GetValue(iDOBJColumnIndex));
					if(!reader.IsDBNull(nUMERO_REAColumnIndex))
						record.NUMERO_REA = Convert.ToString(reader.GetValue(nUMERO_REAColumnIndex));
					if(!reader.IsDBNull(rEANUMERICColumnIndex))
						record.REANUMERIC = Convert.ToDouble(reader.GetValue(rEANUMERICColumnIndex));
					if(!reader.IsDBNull(dATA_DETERMINAColumnIndex))
						record.DATA_DETERMINA = Convert.ToDateTime(reader.GetValue(dATA_DETERMINAColumnIndex));
					if(!reader.IsDBNull(nUMERO_DETERMINAColumnIndex))
						record.NUMERO_DETERMINA = Convert.ToString(reader.GetValue(nUMERO_DETERMINAColumnIndex));
					if(!reader.IsDBNull(iDOBJ_STATOColumnIndex))
						record.IDOBJ_STATO = Convert.ToInt32(reader.GetValue(iDOBJ_STATOColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCVCOOPERATIVEATTIVE[])(recordList.ToArray(typeof(GVCVCOOPERATIVEATTIVE)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCVCOOPERATIVEATTIVE</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCVCOOPERATIVEATTIVE</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVCOOPERATIVEATTIVE</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCVCOOPERATIVEATTIVE
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCVCOOPERATIVEATTIVE</returns>
		protected virtual GVCVCOOPERATIVEATTIVE MapRow(DataRow row)
		{
			GVCVCOOPERATIVEATTIVE mappedObject = new GVCVCOOPERATIVEATTIVE();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "DENOMINAZIONE"
			dataColumn = dataTable.Columns["DENOMINAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DENOMINAZIONE = (System.String)row[dataColumn];
			//Campo "CODICE_FISCALE"
			dataColumn = dataTable.Columns["CODICE_FISCALE"];
			if(!row.IsNull(dataColumn))
				mappedObject.CODICE_FISCALE = (System.String)row[dataColumn];
			//Campo "IDOBJ"
			dataColumn = dataTable.Columns["IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ = (System.Int32)row[dataColumn];
			//Campo "NUMERO_REA"
			dataColumn = dataTable.Columns["NUMERO_REA"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_REA = (System.String)row[dataColumn];
			//Campo "REANUMERIC"
			dataColumn = dataTable.Columns["REANUMERIC"];
			if(!row.IsNull(dataColumn))
				mappedObject.REANUMERIC = (System.Double)row[dataColumn];
			//Campo "DATA_DETERMINA"
			dataColumn = dataTable.Columns["DATA_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_DETERMINA = (System.DateTime)row[dataColumn];
			//Campo "NUMERO_DETERMINA"
			dataColumn = dataTable.Columns["NUMERO_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_DETERMINA = (System.String)row[dataColumn];
			//Campo "IDOBJ_STATO"
			dataColumn = dataTable.Columns["IDOBJ_STATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_STATO = (System.Int32)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCVCOOPERATIVEATTIVE
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCVCOOPERATIVEATTIVE";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("DENOMINAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CODICE_FISCALE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_REA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("REANUMERIC", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_DETERMINA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_DETERMINA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_STATO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "DENOMINAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "CODICE_FISCALE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "NUMERO_REA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "REANUMERIC":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "DATA_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NUMERO_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IDOBJ_STATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
