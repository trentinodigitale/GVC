//
//Generated by gvc at 26/03/2009 9.03.13
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCTINDIRIZZI
	/// </summary>
	public partial class GVCTINDIRIZZICollection
	{
		/// <summary>
		/// Returns the Database Name of the field IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJColumnName = "IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field FLAG_PRINCIPALE.
		///The field is mandatory.
		/// </summary>
		public const string FLAG_PRINCIPALEColumnName = "FLAG_PRINCIPALE";
		/// <summary>
		/// Returns the Database Name of the field FLAG_SEDE.
		///The field is mandatory.
		/// </summary>
		public const string FLAG_SEDEColumnName = "FLAG_SEDE";
		/// <summary>
		/// Returns the Database Name of the field VIA.
		///The field is mandatory.
		/// </summary>
		public const string VIAColumnName = "VIA";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_SOGGETTO.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_SOGGETTOColumnName = "IDOBJ_SOGGETTO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_TIPO_INDIRIZZO.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_TIPO_INDIRIZZOColumnName = "IDOBJ_TIPO_INDIRIZZO";
		/// <summary>
		/// Returns the Database Name of the field CIVICO.
		/// </summary>
		public const string CIVICOColumnName = "CIVICO";
		/// <summary>
		/// Returns the Database Name of the field CAP.
		/// </summary>
		public const string CAPColumnName = "CAP";
		/// <summary>
		/// Returns the Database Name of the field PROVINCIA.
		/// </summary>
		public const string PROVINCIAColumnName = "PROVINCIA";
		/// <summary>
		/// Returns the Database Name of the field COMUNE.
		/// </summary>
		public const string COMUNEColumnName = "COMUNE";
		/// <summary>
		/// Returns the Database Name of the field FRAZIONE.
		/// </summary>
		public const string FRAZIONEColumnName = "FRAZIONE";
		/// <summary>
		/// Returns the Database Name of the field STATO.
		/// </summary>
		public const string STATOColumnName = "STATO";
		/// <summary>
		/// Returns the Database Name of the field CODICE_STRADARIO.
		/// </summary>
		public const string CODICE_STRADARIOColumnName = "CODICE_STRADARIO";
		/// <summary>
		/// Returns the Database Name of the field TELEFONO.
		/// </summary>
		public const string TELEFONOColumnName = "TELEFONO";
		/// <summary>
		/// Returns the Database Name of the field FAX.
		/// </summary>
		public const string FAXColumnName = "FAX";
		/// <summary>
		/// Returns the Database Name of the field ALTRO.
		/// </summary>
		public const string ALTROColumnName = "ALTRO";
		/// <summary>
		/// Returns the Database Name of the field NOTE.
		/// </summary>
		public const string NOTEColumnName = "NOTE";
		/// <summary>
		/// Returns the Database Name of the field DATA_INIZIO.
		/// </summary>
		public const string DATA_INIZIOColumnName = "DATA_INIZIO";
		/// <summary>
		/// Returns the Database Name of the field DATA_FINE.
		/// </summary>
		public const string DATA_FINEColumnName = "DATA_FINE";
		/// <summary>
		/// Returns the Database Name of the field OPERATOREULTMOD.
		/// </summary>
		public const string OPERATOREULTMODColumnName = "OPERATOREULTMOD";
		/// <summary>
		/// Returns the Database Name of the field DATAORAULTMOD.
		/// </summary>
		public const string DATAORAULTMODColumnName = "DATAORAULTMOD";
		/// <summary>
		/// Returns the Database Name of the field EMAIL.
		/// </summary>
		public const string EMAILColumnName = "EMAIL";
		/// <summary>
		/// Returns the Database Name of the field WEBPAGE.
		/// </summary>
		public const string WEBPAGEColumnName = "WEBPAGE";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCTINDIRIZZICollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCTINDIRIZZI
		/// </summary>
		/// <returns>Array of objects GVCTINDIRIZZI</returns>
		public virtual GVCTINDIRIZZI[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCTINDIRIZZI
		/// </summary>
		/// <returns>DataTable of objects GVCTINDIRIZZI</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCTINDIRIZZI
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCTINDIRIZZI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCTINDIRIZZI</returns>
		public GVCTINDIRIZZI GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCTINDIRIZZI[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCTINDIRIZZI selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCTINDIRIZZI</returns>
		public GVCTINDIRIZZI[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCTINDIRIZZI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCTINDIRIZZI</returns>
		public virtual GVCTINDIRIZZI[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTINDIRIZZI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCTINDIRIZZI</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTINDIRIZZI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTINDIRIZZI</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCTINDIRIZZI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("IDOBJ, ");
			sql.Append("FLAG_PRINCIPALE, ");
			sql.Append("FLAG_SEDE, ");
			sql.Append("VIA, ");
			sql.Append("IDOBJ_SOGGETTO, ");
			sql.Append("IDOBJ_TIPO_INDIRIZZO, ");
			sql.Append("CIVICO, ");
			sql.Append("CAP, ");
			sql.Append("PROVINCIA, ");
			sql.Append("COMUNE, ");
			sql.Append("FRAZIONE, ");
			sql.Append("STATO, ");
			sql.Append("CODICE_STRADARIO, ");
			sql.Append("TELEFONO, ");
			sql.Append("FAX, ");
			sql.Append("ALTRO, ");
			sql.Append("NOTE, ");
			sql.Append("DATA_INIZIO, ");
			sql.Append("DATA_FINE, ");
			sql.Append("OPERATOREULTMOD, ");
			sql.Append("DATAORAULTMOD, ");
			sql.Append("EMAIL, ");
			sql.Append("WEBPAGE ");
			sql.Append("FROM GVCTINDIRIZZI ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Returns an object GVCTINDIRIZZI selected by a primary key
		/// </summary>
		/// <param name="IDOBJ">The primary key of the object</param>
		/// <returns>Object of type GVCTINDIRIZZI</returns>
		public virtual GVCTINDIRIZZI GetByPrimaryKey(System.Int32 IDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateGetCommand(whereSql, null))
			{
				AddParameter(cmd, "IDOBJ", IDOBJ);
				GVCTINDIRIZZI[] tempArray = MapRecords(cmd);
				return tempArray.Length == 0 ? null : tempArray[0];
			}
		}


		/// <summary>
		/// Returns an object GVCTINDIRIZZI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_INDIRIZZO">The foreign key of the object</param>
		/// <returns>Object of type GVCTINDIRIZZI</returns>
		public virtual GVCTINDIRIZZI[] GetByIDOBJ_TIPO_INDIRIZZO(System.Int32 iDOBJ_TIPO_INDIRIZZO)
		{
			return MapRecords(CreateGetByIDOBJ_TIPO_INDIRIZZOCommand(iDOBJ_TIPO_INDIRIZZO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTINDIRIZZI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_INDIRIZZO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_TIPO_INDIRIZZOAsDataTable(System.Int32 iDOBJ_TIPO_INDIRIZZO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_TIPO_INDIRIZZOCommand(iDOBJ_TIPO_INDIRIZZO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_INDIRIZZO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_TIPO_INDIRIZZOCommand(System.Int32 iDOBJ_TIPO_INDIRIZZO)
		{
			string whereSql = "IDOBJ_TIPO_INDIRIZZO = " + _db.CreateSqlParameterName("IDOBJ_TIPO_INDIRIZZO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_TIPO_INDIRIZZO", iDOBJ_TIPO_INDIRIZZO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTINDIRIZZI
		/// </summary>
		/// <param name="iDOBJ_TIPO_INDIRIZZO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_TIPO_INDIRIZZO(System.Int32 iDOBJ_TIPO_INDIRIZZO)
		{
			return CreateDeleteByIDOBJ_TIPO_INDIRIZZOCommand(iDOBJ_TIPO_INDIRIZZO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTINDIRIZZI
		/// </summary>
		/// <param name="iDOBJ_TIPO_INDIRIZZO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_TIPO_INDIRIZZOCommand(System.Int32 iDOBJ_TIPO_INDIRIZZO)
		{
			string whereSql = "IDOBJ_TIPO_INDIRIZZO = " + _db.CreateSqlParameterName("IDOBJ_TIPO_INDIRIZZO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_TIPO_INDIRIZZO", iDOBJ_TIPO_INDIRIZZO);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTINDIRIZZI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key of the object</param>
		/// <returns>Object of type GVCTINDIRIZZI</returns>
		public virtual GVCTINDIRIZZI[] GetByIDOBJ_SOGGETTO(System.Int32 iDOBJ_SOGGETTO)
		{
			return MapRecords(CreateGetByIDOBJ_SOGGETTOCommand(iDOBJ_SOGGETTO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTINDIRIZZI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_SOGGETTOAsDataTable(System.Int32 iDOBJ_SOGGETTO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_SOGGETTOCommand(iDOBJ_SOGGETTO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_SOGGETTOCommand(System.Int32 iDOBJ_SOGGETTO)
		{
			string whereSql = "IDOBJ_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_SOGGETTO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_SOGGETTO", iDOBJ_SOGGETTO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTINDIRIZZI
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_SOGGETTO(System.Int32 iDOBJ_SOGGETTO)
		{
			return CreateDeleteByIDOBJ_SOGGETTOCommand(iDOBJ_SOGGETTO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTINDIRIZZI
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_SOGGETTOCommand(System.Int32 iDOBJ_SOGGETTO)
		{
			string whereSql = "IDOBJ_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_SOGGETTO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_SOGGETTO", iDOBJ_SOGGETTO);
			return cmd;
		}

		/// <summary>
		/// Inserts in the Database an object GVCTINDIRIZZI
		/// </summary>
		/// <param name="valore">The object to insert</param>
		public virtual void Insert(GVCTINDIRIZZI valore)
		{
			System.Int32 id = -1;
			System.String sqlStr;

			sqlStr = "SELECT GVCTINDIRIZZI_SEQ.NEXTVAL FROM DUAL";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				id = Convert.ToInt32(cmd.ExecuteScalar());
			}

			sqlStr = "INSERT INTO GVCTINDIRIZZI (" +
			"IDOBJ, " +
			"FLAG_PRINCIPALE, " +
			"FLAG_SEDE, " +
			"VIA, " +
			"IDOBJ_SOGGETTO, " +
			"IDOBJ_TIPO_INDIRIZZO, " +
			"CIVICO, " +
			"CAP, " +
			"PROVINCIA, " +
			"COMUNE, " +
			"FRAZIONE, " +
			"STATO, " +
			"CODICE_STRADARIO, " +
			"TELEFONO, " +
			"FAX, " +
			"ALTRO, " +
			"NOTE, " +
			"DATA_INIZIO, " +
			"DATA_FINE, " +
			"OPERATOREULTMOD, " +
			"DATAORAULTMOD, " +
			"EMAIL, " +
			"WEBPAGE) " +
			"VALUES (" + id.ToString() + ", " +
			_db.CreateSqlParameterName("FLAG_PRINCIPALE") + ", " +
			_db.CreateSqlParameterName("FLAG_SEDE") + ", " +
			_db.CreateSqlParameterName("VIA") + ", " +
			_db.CreateSqlParameterName("IDOBJ_SOGGETTO") + ", " +
			_db.CreateSqlParameterName("IDOBJ_TIPO_INDIRIZZO") + ", " +
			_db.CreateSqlParameterName("CIVICO") + ", " +
			_db.CreateSqlParameterName("CAP") + ", " +
			_db.CreateSqlParameterName("PROVINCIA") + ", " +
			_db.CreateSqlParameterName("COMUNE") + ", " +
			_db.CreateSqlParameterName("FRAZIONE") + ", " +
			_db.CreateSqlParameterName("STATO") + ", " +
			_db.CreateSqlParameterName("CODICE_STRADARIO") + ", " +
			_db.CreateSqlParameterName("TELEFONO") + ", " +
			_db.CreateSqlParameterName("FAX") + ", " +
			_db.CreateSqlParameterName("ALTRO") + ", " +
			_db.CreateSqlParameterName("NOTE") + ", " +
			_db.CreateSqlParameterName("DATA_INIZIO") + ", " +
			_db.CreateSqlParameterName("DATA_FINE") + ", " +
			_db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
			_db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
			_db.CreateSqlParameterName("EMAIL") + ", " +
			_db.CreateSqlParameterName("WEBPAGE") + ")";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "FLAG_PRINCIPALE", valore.FLAG_PRINCIPALE);
				AddParameter(cmd, "FLAG_SEDE", valore.FLAG_SEDE);
				AddParameter(cmd, "VIA", valore.VIA);
				AddParameter(cmd, "IDOBJ_SOGGETTO", valore.IDOBJ_SOGGETTO);
				AddParameter(cmd, "IDOBJ_TIPO_INDIRIZZO", valore.IDOBJ_TIPO_INDIRIZZO);
				AddParameter(cmd, "CIVICO", valore.IsCIVICONull ? DBNull.Value : (object)valore.CIVICO);
				AddParameter(cmd, "CAP", valore.IsCAPNull ? DBNull.Value : (object)valore.CAP);
				AddParameter(cmd, "PROVINCIA", valore.IsPROVINCIANull ? DBNull.Value : (object)valore.PROVINCIA);
				AddParameter(cmd, "COMUNE", valore.IsCOMUNENull ? DBNull.Value : (object)valore.COMUNE);
				AddParameter(cmd, "FRAZIONE", valore.IsFRAZIONENull ? DBNull.Value : (object)valore.FRAZIONE);
				AddParameter(cmd, "STATO", valore.IsSTATONull ? DBNull.Value : (object)valore.STATO);
				AddParameter(cmd, "CODICE_STRADARIO", valore.IsCODICE_STRADARIONull ? DBNull.Value : (object)valore.CODICE_STRADARIO);
				AddParameter(cmd, "TELEFONO", valore.IsTELEFONONull ? DBNull.Value : (object)valore.TELEFONO);
				AddParameter(cmd, "FAX", valore.IsFAXNull ? DBNull.Value : (object)valore.FAX);
				AddParameter(cmd, "ALTRO", valore.IsALTRONull ? DBNull.Value : (object)valore.ALTRO);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "DATA_INIZIO", valore.IsDATA_INIZIONull ? DBNull.Value : (object)valore.DATA_INIZIO);
				AddParameter(cmd, "DATA_FINE", valore.IsDATA_FINENull ? DBNull.Value : (object)valore.DATA_FINE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "EMAIL", valore.IsEMAILNull ? DBNull.Value : (object)valore.EMAIL);
				AddParameter(cmd, "WEBPAGE", valore.IsWEBPAGENull ? DBNull.Value : (object)valore.WEBPAGE);
				cmd.ExecuteScalar();
				valore.IDOBJ = id;
			}
		}

		/// <summary>
		/// Updates in the Database an object GVCTINDIRIZZI
		/// </summary>
		/// <param name="valore">The object to update</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool Update(GVCTINDIRIZZI valore)
		{
			System.String sqlStr = "UPDATE GVCTINDIRIZZI SET " +
				"FLAG_PRINCIPALE = " + _db.CreateSqlParameterName("FLAG_PRINCIPALE") + ", " +
				"FLAG_SEDE = " + _db.CreateSqlParameterName("FLAG_SEDE") + ", " +
				"VIA = " + _db.CreateSqlParameterName("VIA") + ", " +
				"IDOBJ_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_SOGGETTO") + ", " +
				"IDOBJ_TIPO_INDIRIZZO = " + _db.CreateSqlParameterName("IDOBJ_TIPO_INDIRIZZO") + ", " +
				"CIVICO = " + _db.CreateSqlParameterName("CIVICO") + ", " +
				"CAP = " + _db.CreateSqlParameterName("CAP") + ", " +
				"PROVINCIA = " + _db.CreateSqlParameterName("PROVINCIA") + ", " +
				"COMUNE = " + _db.CreateSqlParameterName("COMUNE") + ", " +
				"FRAZIONE = " + _db.CreateSqlParameterName("FRAZIONE") + ", " +
				"STATO = " + _db.CreateSqlParameterName("STATO") + ", " +
				"CODICE_STRADARIO = " + _db.CreateSqlParameterName("CODICE_STRADARIO") + ", " +
				"TELEFONO = " + _db.CreateSqlParameterName("TELEFONO") + ", " +
				"FAX = " + _db.CreateSqlParameterName("FAX") + ", " +
				"ALTRO = " + _db.CreateSqlParameterName("ALTRO") + ", " +
				"NOTE = " + _db.CreateSqlParameterName("NOTE") + ", " +
				"DATA_INIZIO = " + _db.CreateSqlParameterName("DATA_INIZIO") + ", " +
				"DATA_FINE = " + _db.CreateSqlParameterName("DATA_FINE") + ", " +
				"OPERATOREULTMOD = " + _db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
				"DATAORAULTMOD = " + _db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
				"EMAIL = " + _db.CreateSqlParameterName("EMAIL") + ", " +
				"WEBPAGE = " + _db.CreateSqlParameterName("WEBPAGE") +
				" WHERE " +
				"IDOBJ = " + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ", valore.IDOBJ);
				AddParameter(cmd, "FLAG_PRINCIPALE", valore.FLAG_PRINCIPALE);
				AddParameter(cmd, "FLAG_SEDE", valore.FLAG_SEDE);
				AddParameter(cmd, "VIA", valore.VIA);
				AddParameter(cmd, "IDOBJ_SOGGETTO", valore.IDOBJ_SOGGETTO);
				AddParameter(cmd, "IDOBJ_TIPO_INDIRIZZO", valore.IDOBJ_TIPO_INDIRIZZO);
				AddParameter(cmd, "CIVICO", valore.IsCIVICONull ? DBNull.Value : (object)valore.CIVICO);
				AddParameter(cmd, "CAP", valore.IsCAPNull ? DBNull.Value : (object)valore.CAP);
				AddParameter(cmd, "PROVINCIA", valore.IsPROVINCIANull ? DBNull.Value : (object)valore.PROVINCIA);
				AddParameter(cmd, "COMUNE", valore.IsCOMUNENull ? DBNull.Value : (object)valore.COMUNE);
				AddParameter(cmd, "FRAZIONE", valore.IsFRAZIONENull ? DBNull.Value : (object)valore.FRAZIONE);
				AddParameter(cmd, "STATO", valore.IsSTATONull ? DBNull.Value : (object)valore.STATO);
				AddParameter(cmd, "CODICE_STRADARIO", valore.IsCODICE_STRADARIONull ? DBNull.Value : (object)valore.CODICE_STRADARIO);
				AddParameter(cmd, "TELEFONO", valore.IsTELEFONONull ? DBNull.Value : (object)valore.TELEFONO);
				AddParameter(cmd, "FAX", valore.IsFAXNull ? DBNull.Value : (object)valore.FAX);
				AddParameter(cmd, "ALTRO", valore.IsALTRONull ? DBNull.Value : (object)valore.ALTRO);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "DATA_INIZIO", valore.IsDATA_INIZIONull ? DBNull.Value : (object)valore.DATA_INIZIO);
				AddParameter(cmd, "DATA_FINE", valore.IsDATA_FINENull ? DBNull.Value : (object)valore.DATA_FINE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "EMAIL", valore.IsEMAILNull ? DBNull.Value : (object)valore.EMAIL);
				AddParameter(cmd, "WEBPAGE", valore.IsWEBPAGENull ? DBNull.Value : (object)valore.WEBPAGE);
				return cmd.ExecuteNonQuery() != 0;
			}
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTINDIRIZZI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTINDIRIZZI</param>
		public void Update(DataTable table)
		{
			Update(table, true);
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTINDIRIZZI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTINDIRIZZI</param>
		/// <param name="acceptChanges">true to accept the changes, otherwise false</param>
		public virtual void Update(DataTable table, bool acceptChanges)
		{
			DataRowCollection rows = table.Rows;
			for(int i = rows.Count - 1; i >= 0; i--)
			{
				DataRow row = rows[i];
				switch(row.RowState)
				{
					case DataRowState.Added:
						Insert(MapRow(row));
						if(acceptChanges)
							row.AcceptChanges();
						break;

					case DataRowState.Deleted:
						row.RejectChanges();
						try
						{
							DeleteByPrimaryKey((System.Int32)row["IDOBJ"]);
						}
						finally
						{
							row.Delete();
						}
						if(acceptChanges)
							row.AcceptChanges();
						break;

				case DataRowState.Modified:
					Update(MapRow(row));
					if(acceptChanges)
						row.AcceptChanges();
					break;
				}
			}
		}

		/// <summary>
		/// Deletes from the Database an object GVCTINDIRIZZI
		/// </summary>
		/// <param name="valore">The object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public bool Delete(GVCTINDIRIZZI valore)
		{
			return DeleteByPrimaryKey(valore.IDOBJ);
		}

		/// <summary>
		/// Deletes from the Database an object GVCTINDIRIZZI
		/// </summary>
		/// <param name="iDOBJ">The primary key of the object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool DeleteByPrimaryKey(System.Int32 iDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateDeleteCommand(whereSql))
			{
				AddParameter(cmd, "IDOBJ" , iDOBJ);
				return cmd.ExecuteNonQuery() > 0;
			}
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTINDIRIZZI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>The number of the deleted objects</returns>
		public int Delete(System.String whereSql)
		{
			return CreateDeleteCommand(whereSql).ExecuteNonQuery();
		}

		/// <summary>
		/// Returns an IDbCommand to delete the objects GVCTINDIRIZZI selected by 
		/// a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteCommand(string whereSql)
		{
			StringBuilder sql = new StringBuilder("DELETE FROM GVCTINDIRIZZI");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format(" WHERE {0}", whereSql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Deletes all the objects GVCTINDIRIZZI
		/// </summary>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteAll()
		{
			return Delete("");
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTINDIRIZZI
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCTINDIRIZZI</returns>
		protected GVCTINDIRIZZI[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTINDIRIZZI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCTINDIRIZZI</returns>
		protected GVCTINDIRIZZI[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCTINDIRIZZI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCTINDIRIZZI</returns>
		protected virtual GVCTINDIRIZZI[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int iDOBJColumnIndex = reader.GetOrdinal("IDOBJ");
			int fLAG_PRINCIPALEColumnIndex = reader.GetOrdinal("FLAG_PRINCIPALE");
			int fLAG_SEDEColumnIndex = reader.GetOrdinal("FLAG_SEDE");
			int vIAColumnIndex = reader.GetOrdinal("VIA");
			int iDOBJ_SOGGETTOColumnIndex = reader.GetOrdinal("IDOBJ_SOGGETTO");
			int iDOBJ_TIPO_INDIRIZZOColumnIndex = reader.GetOrdinal("IDOBJ_TIPO_INDIRIZZO");
			int cIVICOColumnIndex = reader.GetOrdinal("CIVICO");
			int cAPColumnIndex = reader.GetOrdinal("CAP");
			int pROVINCIAColumnIndex = reader.GetOrdinal("PROVINCIA");
			int cOMUNEColumnIndex = reader.GetOrdinal("COMUNE");
			int fRAZIONEColumnIndex = reader.GetOrdinal("FRAZIONE");
			int sTATOColumnIndex = reader.GetOrdinal("STATO");
			int cODICE_STRADARIOColumnIndex = reader.GetOrdinal("CODICE_STRADARIO");
			int tELEFONOColumnIndex = reader.GetOrdinal("TELEFONO");
			int fAXColumnIndex = reader.GetOrdinal("FAX");
			int aLTROColumnIndex = reader.GetOrdinal("ALTRO");
			int nOTEColumnIndex = reader.GetOrdinal("NOTE");
			int dATA_INIZIOColumnIndex = reader.GetOrdinal("DATA_INIZIO");
			int dATA_FINEColumnIndex = reader.GetOrdinal("DATA_FINE");
			int oPERATOREULTMODColumnIndex = reader.GetOrdinal("OPERATOREULTMOD");
			int dATAORAULTMODColumnIndex = reader.GetOrdinal("DATAORAULTMOD");
			int eMAILColumnIndex = reader.GetOrdinal("EMAIL");
			int wEBPAGEColumnIndex = reader.GetOrdinal("WEBPAGE");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCTINDIRIZZI record = new GVCTINDIRIZZI();
					recordList.Add(record);
					record.IDOBJ = Convert.ToInt32(reader.GetValue(iDOBJColumnIndex));
					record.FLAG_PRINCIPALE = Convert.ToInt32(reader.GetValue(fLAG_PRINCIPALEColumnIndex));
					record.FLAG_SEDE = Convert.ToInt32(reader.GetValue(fLAG_SEDEColumnIndex));
					record.VIA = Convert.ToString(reader.GetValue(vIAColumnIndex));
					record.IDOBJ_SOGGETTO = Convert.ToInt32(reader.GetValue(iDOBJ_SOGGETTOColumnIndex));
					record.IDOBJ_TIPO_INDIRIZZO = Convert.ToInt32(reader.GetValue(iDOBJ_TIPO_INDIRIZZOColumnIndex));
					if(!reader.IsDBNull(cIVICOColumnIndex))
						record.CIVICO = Convert.ToString(reader.GetValue(cIVICOColumnIndex));
					if(!reader.IsDBNull(cAPColumnIndex))
						record.CAP = Convert.ToString(reader.GetValue(cAPColumnIndex));
					if(!reader.IsDBNull(pROVINCIAColumnIndex))
						record.PROVINCIA = Convert.ToString(reader.GetValue(pROVINCIAColumnIndex));
					if(!reader.IsDBNull(cOMUNEColumnIndex))
						record.COMUNE = Convert.ToString(reader.GetValue(cOMUNEColumnIndex));
					if(!reader.IsDBNull(fRAZIONEColumnIndex))
						record.FRAZIONE = Convert.ToString(reader.GetValue(fRAZIONEColumnIndex));
					if(!reader.IsDBNull(sTATOColumnIndex))
						record.STATO = Convert.ToString(reader.GetValue(sTATOColumnIndex));
					if(!reader.IsDBNull(cODICE_STRADARIOColumnIndex))
						record.CODICE_STRADARIO = Convert.ToString(reader.GetValue(cODICE_STRADARIOColumnIndex));
					if(!reader.IsDBNull(tELEFONOColumnIndex))
						record.TELEFONO = Convert.ToString(reader.GetValue(tELEFONOColumnIndex));
					if(!reader.IsDBNull(fAXColumnIndex))
						record.FAX = Convert.ToString(reader.GetValue(fAXColumnIndex));
					if(!reader.IsDBNull(aLTROColumnIndex))
						record.ALTRO = Convert.ToString(reader.GetValue(aLTROColumnIndex));
					if(!reader.IsDBNull(nOTEColumnIndex))
						record.NOTE = Convert.ToString(reader.GetValue(nOTEColumnIndex));
					if(!reader.IsDBNull(dATA_INIZIOColumnIndex))
						record.DATA_INIZIO = Convert.ToDateTime(reader.GetValue(dATA_INIZIOColumnIndex));
					if(!reader.IsDBNull(dATA_FINEColumnIndex))
						record.DATA_FINE = Convert.ToDateTime(reader.GetValue(dATA_FINEColumnIndex));
					if(!reader.IsDBNull(oPERATOREULTMODColumnIndex))
						record.OPERATOREULTMOD = Convert.ToString(reader.GetValue(oPERATOREULTMODColumnIndex));
					if(!reader.IsDBNull(dATAORAULTMODColumnIndex))
						record.DATAORAULTMOD = Convert.ToDateTime(reader.GetValue(dATAORAULTMODColumnIndex));
					if(!reader.IsDBNull(eMAILColumnIndex))
						record.EMAIL = Convert.ToString(reader.GetValue(eMAILColumnIndex));
					if(!reader.IsDBNull(wEBPAGEColumnIndex))
						record.WEBPAGE = Convert.ToString(reader.GetValue(wEBPAGEColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCTINDIRIZZI[])(recordList.ToArray(typeof(GVCTINDIRIZZI)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCTINDIRIZZI</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCTINDIRIZZI</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTINDIRIZZI</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCTINDIRIZZI
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCTINDIRIZZI</returns>
		protected virtual GVCTINDIRIZZI MapRow(DataRow row)
		{
			GVCTINDIRIZZI mappedObject = new GVCTINDIRIZZI();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "IDOBJ"
			dataColumn = dataTable.Columns["IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ = (System.Int32)row[dataColumn];
			//Campo "FLAG_PRINCIPALE"
			dataColumn = dataTable.Columns["FLAG_PRINCIPALE"];
			if(!row.IsNull(dataColumn))
				mappedObject.FLAG_PRINCIPALE = (System.Int32)row[dataColumn];
			//Campo "FLAG_SEDE"
			dataColumn = dataTable.Columns["FLAG_SEDE"];
			if(!row.IsNull(dataColumn))
				mappedObject.FLAG_SEDE = (System.Int32)row[dataColumn];
			//Campo "VIA"
			dataColumn = dataTable.Columns["VIA"];
			if(!row.IsNull(dataColumn))
				mappedObject.VIA = (System.String)row[dataColumn];
			//Campo "IDOBJ_SOGGETTO"
			dataColumn = dataTable.Columns["IDOBJ_SOGGETTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_SOGGETTO = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_TIPO_INDIRIZZO"
			dataColumn = dataTable.Columns["IDOBJ_TIPO_INDIRIZZO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_TIPO_INDIRIZZO = (System.Int32)row[dataColumn];
			//Campo "CIVICO"
			dataColumn = dataTable.Columns["CIVICO"];
			if(!row.IsNull(dataColumn))
				mappedObject.CIVICO = (System.String)row[dataColumn];
			//Campo "CAP"
			dataColumn = dataTable.Columns["CAP"];
			if(!row.IsNull(dataColumn))
				mappedObject.CAP = (System.String)row[dataColumn];
			//Campo "PROVINCIA"
			dataColumn = dataTable.Columns["PROVINCIA"];
			if(!row.IsNull(dataColumn))
				mappedObject.PROVINCIA = (System.String)row[dataColumn];
			//Campo "COMUNE"
			dataColumn = dataTable.Columns["COMUNE"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMUNE = (System.String)row[dataColumn];
			//Campo "FRAZIONE"
			dataColumn = dataTable.Columns["FRAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.FRAZIONE = (System.String)row[dataColumn];
			//Campo "STATO"
			dataColumn = dataTable.Columns["STATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.STATO = (System.String)row[dataColumn];
			//Campo "CODICE_STRADARIO"
			dataColumn = dataTable.Columns["CODICE_STRADARIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.CODICE_STRADARIO = (System.String)row[dataColumn];
			//Campo "TELEFONO"
			dataColumn = dataTable.Columns["TELEFONO"];
			if(!row.IsNull(dataColumn))
				mappedObject.TELEFONO = (System.String)row[dataColumn];
			//Campo "FAX"
			dataColumn = dataTable.Columns["FAX"];
			if(!row.IsNull(dataColumn))
				mappedObject.FAX = (System.String)row[dataColumn];
			//Campo "ALTRO"
			dataColumn = dataTable.Columns["ALTRO"];
			if(!row.IsNull(dataColumn))
				mappedObject.ALTRO = (System.String)row[dataColumn];
			//Campo "NOTE"
			dataColumn = dataTable.Columns["NOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.NOTE = (System.String)row[dataColumn];
			//Campo "DATA_INIZIO"
			dataColumn = dataTable.Columns["DATA_INIZIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_INIZIO = (System.DateTime)row[dataColumn];
			//Campo "DATA_FINE"
			dataColumn = dataTable.Columns["DATA_FINE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_FINE = (System.DateTime)row[dataColumn];
			//Campo "OPERATOREULTMOD"
			dataColumn = dataTable.Columns["OPERATOREULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.OPERATOREULTMOD = (System.String)row[dataColumn];
			//Campo "DATAORAULTMOD"
			dataColumn = dataTable.Columns["DATAORAULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORAULTMOD = (System.DateTime)row[dataColumn];
			//Campo "EMAIL"
			dataColumn = dataTable.Columns["EMAIL"];
			if(!row.IsNull(dataColumn))
				mappedObject.EMAIL = (System.String)row[dataColumn];
			//Campo "WEBPAGE"
			dataColumn = dataTable.Columns["WEBPAGE"];
			if(!row.IsNull(dataColumn))
				mappedObject.WEBPAGE = (System.String)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCTINDIRIZZI
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCTINDIRIZZI";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = true;
			dataColumn.Unique = true;
			dataColumn.AutoIncrement = true;
			dataColumn = dataTable.Columns.Add("FLAG_PRINCIPALE", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("FLAG_SEDE", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("VIA", typeof(System.String));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_SOGGETTO", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_TIPO_INDIRIZZO", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CIVICO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CAP", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("PROVINCIA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMUNE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("FRAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("STATO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CODICE_STRADARIO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("TELEFONO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("FAX", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ALTRO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NOTE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_INIZIO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_FINE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("OPERATOREULTMOD", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORAULTMOD", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("EMAIL", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("WEBPAGE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "FLAG_PRINCIPALE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "FLAG_SEDE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "VIA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IDOBJ_SOGGETTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_TIPO_INDIRIZZO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "CIVICO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "CAP":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "PROVINCIA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "COMUNE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "FRAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "STATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "CODICE_STRADARIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "TELEFONO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "FAX":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "ALTRO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "NOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_INIZIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_FINE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "OPERATOREULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORAULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "EMAIL":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "WEBPAGE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
