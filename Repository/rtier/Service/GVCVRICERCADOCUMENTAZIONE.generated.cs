//
//Generated by DELTADATOR\gs0445 at 27/07/2009 16.10.08
//

using System;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Description of GVCVRICERCADOCUMENTAZIONE
	/// </summary>
	public partial class GVCVRICERCADOCUMENTAZIONE
	{
		private System.String _s_DENOMINAZIONE;
		private System.Boolean _s_DENOMINAZIONENull = true;
		private System.Int32 _s_IDOBJ;
		private System.Boolean _s_IDOBJNull = true;
		private System.Int32 _r_IDOBJ;
		private System.Boolean _r_IDOBJNull = true;
		private System.String _r_NUMERO_REA;
		private System.Boolean _r_NUMERO_REANull = true;
		private System.Int32 _r_IDOBJ_STATO;
		private System.Boolean _r_IDOBJ_STATONull = true;
		private System.Int32 _dOC_ID_OBJ;
		private System.Boolean _dOC_ID_OBJNull = true;
		private System.Int32 _dOC_IDOBJ_TIPO;
		private System.Boolean _dOC_IDOBJ_TIPONull = true;
		private System.DateTime _dOC_DATA;
		private System.Boolean _dOC_DATANull = true;
		private System.String _dOC_NOME_FILE;
		private System.Boolean _dOC_NOME_FILENull = true;
		private System.String _dOC_SEGNALIBRO;
		private System.Boolean _dOC_SEGNALIBRONull = true;
		private System.String _dOC_NUMERO_PROTOCOLLO;
		private System.Boolean _dOC_NUMERO_PROTOCOLLONull = true;
		private System.Int32 _dOC_DIMENSIONE;
		private System.Boolean _dOC_DIMENSIONENull = true;
		private System.Int32 _dOC_ID_RIFERIMENTO;
		private System.Boolean _dOC_ID_RIFERIMENTONull = true;
		private System.String _aDESIONE_ASSOCIAZIONE;
		private System.Boolean _aDESIONE_ASSOCIAZIONENull = true;
		private System.String _dOC_NOME_RIFERIMENTO;
		private System.Boolean _dOC_NOME_RIFERIMENTONull = true;

		/// <summary>
		/// Default constructor
		/// </summary>
		public GVCVRICERCADOCUMENTAZIONE(){}

		/// <summary>
		/// Value of field S_DENOMINAZIONE
		/// </summary>
		public System.String S_DENOMINAZIONE
		{
			get
			{
				if(IsS_DENOMINAZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _s_DENOMINAZIONE;
			}
			set
			{
				_s_DENOMINAZIONENull = false;
				_s_DENOMINAZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsS_DENOMINAZIONENull
		{
			get
			{
				return _s_DENOMINAZIONENull;
			}
			set
			{
				_s_DENOMINAZIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String S_DENOMINAZIONESafe
		{
			get
			{
				if (IsS_DENOMINAZIONENull)
					return System.String.Empty;
				return S_DENOMINAZIONE;
			}
		}

		/// <summary>
		/// Value of field S_IDOBJ
		/// </summary>
		public System.Int32 S_IDOBJ
		{
			get
			{
				if(IsS_IDOBJNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _s_IDOBJ;
			}
			set
			{
				_s_IDOBJNull = false;
				_s_IDOBJ = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsS_IDOBJNull
		{
			get
			{
				return _s_IDOBJNull;
			}
			set
			{
				_s_IDOBJNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 S_IDOBJSafe
		{
			get
			{
				if (IsS_IDOBJNull)
					return -1;
				return S_IDOBJ;
			}
		}

		/// <summary>
		/// Value of field R_IDOBJ
		/// </summary>
		public System.Int32 R_IDOBJ
		{
			get
			{
				if(IsR_IDOBJNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _r_IDOBJ;
			}
			set
			{
				_r_IDOBJNull = false;
				_r_IDOBJ = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsR_IDOBJNull
		{
			get
			{
				return _r_IDOBJNull;
			}
			set
			{
				_r_IDOBJNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 R_IDOBJSafe
		{
			get
			{
				if (IsR_IDOBJNull)
					return -1;
				return R_IDOBJ;
			}
		}

		/// <summary>
		/// Value of field R_NUMERO_REA
		/// </summary>
		public System.String R_NUMERO_REA
		{
			get
			{
				if(IsR_NUMERO_REANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _r_NUMERO_REA;
			}
			set
			{
				_r_NUMERO_REANull = false;
				_r_NUMERO_REA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsR_NUMERO_REANull
		{
			get
			{
				return _r_NUMERO_REANull;
			}
			set
			{
				_r_NUMERO_REANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String R_NUMERO_REASafe
		{
			get
			{
				if (IsR_NUMERO_REANull)
					return System.String.Empty;
				return R_NUMERO_REA;
			}
		}

		/// <summary>
		/// Value of field R_IDOBJ_STATO
		/// </summary>
		public System.Int32 R_IDOBJ_STATO
		{
			get
			{
				if(IsR_IDOBJ_STATONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _r_IDOBJ_STATO;
			}
			set
			{
				_r_IDOBJ_STATONull = false;
				_r_IDOBJ_STATO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsR_IDOBJ_STATONull
		{
			get
			{
				return _r_IDOBJ_STATONull;
			}
			set
			{
				_r_IDOBJ_STATONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 R_IDOBJ_STATOSafe
		{
			get
			{
				if (IsR_IDOBJ_STATONull)
					return -1;
				return R_IDOBJ_STATO;
			}
		}

		/// <summary>
		/// Value of field DOC_ID_OBJ
		/// </summary>
		public System.Int32 DOC_ID_OBJ
		{
			get
			{
				if(IsDOC_ID_OBJNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dOC_ID_OBJ;
			}
			set
			{
				_dOC_ID_OBJNull = false;
				_dOC_ID_OBJ = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDOC_ID_OBJNull
		{
			get
			{
				return _dOC_ID_OBJNull;
			}
			set
			{
				_dOC_ID_OBJNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 DOC_ID_OBJSafe
		{
			get
			{
				if (IsDOC_ID_OBJNull)
					return -1;
				return DOC_ID_OBJ;
			}
		}

		/// <summary>
		/// Value of field DOC_IDOBJ_TIPO
		/// </summary>
		public System.Int32 DOC_IDOBJ_TIPO
		{
			get
			{
				if(IsDOC_IDOBJ_TIPONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dOC_IDOBJ_TIPO;
			}
			set
			{
				_dOC_IDOBJ_TIPONull = false;
				_dOC_IDOBJ_TIPO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDOC_IDOBJ_TIPONull
		{
			get
			{
				return _dOC_IDOBJ_TIPONull;
			}
			set
			{
				_dOC_IDOBJ_TIPONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 DOC_IDOBJ_TIPOSafe
		{
			get
			{
				if (IsDOC_IDOBJ_TIPONull)
					return -1;
				return DOC_IDOBJ_TIPO;
			}
		}

		/// <summary>
		/// Value of field DOC_DATA
		/// </summary>
		public System.DateTime DOC_DATA
		{
			get
			{
				if(IsDOC_DATANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dOC_DATA;
			}
			set
			{
				_dOC_DATANull = false;
				_dOC_DATA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDOC_DATANull
		{
			get
			{
				return _dOC_DATANull;
			}
			set
			{
				_dOC_DATANull = value;
			}
		}

		/// <summary>
		/// Value of field DOC_NOME_FILE
		/// </summary>
		public System.String DOC_NOME_FILE
		{
			get
			{
				if(IsDOC_NOME_FILENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dOC_NOME_FILE;
			}
			set
			{
				_dOC_NOME_FILENull = false;
				_dOC_NOME_FILE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDOC_NOME_FILENull
		{
			get
			{
				return _dOC_NOME_FILENull;
			}
			set
			{
				_dOC_NOME_FILENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String DOC_NOME_FILESafe
		{
			get
			{
				if (IsDOC_NOME_FILENull)
					return System.String.Empty;
				return DOC_NOME_FILE;
			}
		}

		/// <summary>
		/// Value of field DOC_SEGNALIBRO
		/// </summary>
		public System.String DOC_SEGNALIBRO
		{
			get
			{
				if(IsDOC_SEGNALIBRONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dOC_SEGNALIBRO;
			}
			set
			{
				_dOC_SEGNALIBRONull = false;
				_dOC_SEGNALIBRO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDOC_SEGNALIBRONull
		{
			get
			{
				return _dOC_SEGNALIBRONull;
			}
			set
			{
				_dOC_SEGNALIBRONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String DOC_SEGNALIBROSafe
		{
			get
			{
				if (IsDOC_SEGNALIBRONull)
					return System.String.Empty;
				return DOC_SEGNALIBRO;
			}
		}

		/// <summary>
		/// Value of field DOC_NUMERO_PROTOCOLLO
		/// </summary>
		public System.String DOC_NUMERO_PROTOCOLLO
		{
			get
			{
				if(IsDOC_NUMERO_PROTOCOLLONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dOC_NUMERO_PROTOCOLLO;
			}
			set
			{
				_dOC_NUMERO_PROTOCOLLONull = false;
				_dOC_NUMERO_PROTOCOLLO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDOC_NUMERO_PROTOCOLLONull
		{
			get
			{
				return _dOC_NUMERO_PROTOCOLLONull;
			}
			set
			{
				_dOC_NUMERO_PROTOCOLLONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String DOC_NUMERO_PROTOCOLLOSafe
		{
			get
			{
				if (IsDOC_NUMERO_PROTOCOLLONull)
					return System.String.Empty;
				return DOC_NUMERO_PROTOCOLLO;
			}
		}

		/// <summary>
		/// Value of field DOC_DIMENSIONE
		/// </summary>
		public System.Int32 DOC_DIMENSIONE
		{
			get
			{
				if(IsDOC_DIMENSIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dOC_DIMENSIONE;
			}
			set
			{
				_dOC_DIMENSIONENull = false;
				_dOC_DIMENSIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDOC_DIMENSIONENull
		{
			get
			{
				return _dOC_DIMENSIONENull;
			}
			set
			{
				_dOC_DIMENSIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 DOC_DIMENSIONESafe
		{
			get
			{
				if (IsDOC_DIMENSIONENull)
					return -1;
				return DOC_DIMENSIONE;
			}
		}

		/// <summary>
		/// Value of field DOC_ID_RIFERIMENTO
		/// </summary>
		public System.Int32 DOC_ID_RIFERIMENTO
		{
			get
			{
				if(IsDOC_ID_RIFERIMENTONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dOC_ID_RIFERIMENTO;
			}
			set
			{
				_dOC_ID_RIFERIMENTONull = false;
				_dOC_ID_RIFERIMENTO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDOC_ID_RIFERIMENTONull
		{
			get
			{
				return _dOC_ID_RIFERIMENTONull;
			}
			set
			{
				_dOC_ID_RIFERIMENTONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 DOC_ID_RIFERIMENTOSafe
		{
			get
			{
				if (IsDOC_ID_RIFERIMENTONull)
					return -1;
				return DOC_ID_RIFERIMENTO;
			}
		}

		/// <summary>
		/// Value of field ADESIONE_ASSOCIAZIONE
		/// </summary>
		public System.String ADESIONE_ASSOCIAZIONE
		{
			get
			{
				if(IsADESIONE_ASSOCIAZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _aDESIONE_ASSOCIAZIONE;
			}
			set
			{
				_aDESIONE_ASSOCIAZIONENull = false;
				_aDESIONE_ASSOCIAZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsADESIONE_ASSOCIAZIONENull
		{
			get
			{
				return _aDESIONE_ASSOCIAZIONENull;
			}
			set
			{
				_aDESIONE_ASSOCIAZIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String ADESIONE_ASSOCIAZIONESafe
		{
			get
			{
				if (IsADESIONE_ASSOCIAZIONENull)
					return System.String.Empty;
				return ADESIONE_ASSOCIAZIONE;
			}
		}

		/// <summary>
		/// Value of field DOC_NOME_RIFERIMENTO
		/// </summary>
		public System.String DOC_NOME_RIFERIMENTO
		{
			get
			{
				if(IsDOC_NOME_RIFERIMENTONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dOC_NOME_RIFERIMENTO;
			}
			set
			{
				_dOC_NOME_RIFERIMENTONull = false;
				_dOC_NOME_RIFERIMENTO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDOC_NOME_RIFERIMENTONull
		{
			get
			{
				return _dOC_NOME_RIFERIMENTONull;
			}
			set
			{
				_dOC_NOME_RIFERIMENTONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String DOC_NOME_RIFERIMENTOSafe
		{
			get
			{
				if (IsDOC_NOME_RIFERIMENTONull)
					return System.String.Empty;
				return DOC_NOME_RIFERIMENTO;
			}
		}

	}
}