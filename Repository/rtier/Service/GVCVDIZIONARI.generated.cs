//
//Generated by DELTADATOR\GS0445 at 26/03/2009 9.03.14
//

using System;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Description of GVCVDIZIONARI
	/// </summary>
	public partial class GVCVDIZIONARI
	{
		private System.String _dIC_TIPO;
		private System.Boolean _dIC_TIPONull = true;
		private System.Int32 _dIC_IDOBJ;
		private System.Boolean _dIC_IDOBJNull = true;
		private System.String _dIC_CODICE;
		private System.Boolean _dIC_CODICENull = true;
		private System.String _dIC_DESCRIZIONE;
		private System.Boolean _dIC_DESCRIZIONENull = true;
		private System.Double _dIC_FLAG_ATTIVO;
		private System.Boolean _dIC_FLAG_ATTIVONull = true;
		private System.Double _dIC_ALTRO_FLAG;
		private System.Boolean _dIC_ALTRO_FLAGNull = true;

		/// <summary>
		/// Default constructor
		/// </summary>
		public GVCVDIZIONARI(){}

		/// <summary>
		/// Value of field DIC_TIPO
		/// </summary>
		public System.String DIC_TIPO
		{
			get
			{
				if(IsDIC_TIPONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dIC_TIPO;
			}
			set
			{
				_dIC_TIPONull = false;
				_dIC_TIPO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDIC_TIPONull
		{
			get
			{
				return _dIC_TIPONull;
			}
			set
			{
				_dIC_TIPONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String DIC_TIPOSafe
		{
			get
			{
				if (IsDIC_TIPONull)
					return System.String.Empty;
				return DIC_TIPO;
			}
		}

		/// <summary>
		/// Value of field DIC_IDOBJ
		/// </summary>
		public System.Int32 DIC_IDOBJ
		{
			get
			{
				if(IsDIC_IDOBJNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dIC_IDOBJ;
			}
			set
			{
				_dIC_IDOBJNull = false;
				_dIC_IDOBJ = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDIC_IDOBJNull
		{
			get
			{
				return _dIC_IDOBJNull;
			}
			set
			{
				_dIC_IDOBJNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 DIC_IDOBJSafe
		{
			get
			{
				if (IsDIC_IDOBJNull)
					return -1;
				return DIC_IDOBJ;
			}
		}

		/// <summary>
		/// Value of field DIC_CODICE
		/// </summary>
		public System.String DIC_CODICE
		{
			get
			{
				if(IsDIC_CODICENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dIC_CODICE;
			}
			set
			{
				_dIC_CODICENull = false;
				_dIC_CODICE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDIC_CODICENull
		{
			get
			{
				return _dIC_CODICENull;
			}
			set
			{
				_dIC_CODICENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String DIC_CODICESafe
		{
			get
			{
				if (IsDIC_CODICENull)
					return System.String.Empty;
				return DIC_CODICE;
			}
		}

		/// <summary>
		/// Value of field DIC_DESCRIZIONE
		/// </summary>
		public System.String DIC_DESCRIZIONE
		{
			get
			{
				if(IsDIC_DESCRIZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dIC_DESCRIZIONE;
			}
			set
			{
				_dIC_DESCRIZIONENull = false;
				_dIC_DESCRIZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDIC_DESCRIZIONENull
		{
			get
			{
				return _dIC_DESCRIZIONENull;
			}
			set
			{
				_dIC_DESCRIZIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String DIC_DESCRIZIONESafe
		{
			get
			{
				if (IsDIC_DESCRIZIONENull)
					return System.String.Empty;
				return DIC_DESCRIZIONE;
			}
		}

		/// <summary>
		/// Value of field DIC_FLAG_ATTIVO
		/// </summary>
		public System.Double DIC_FLAG_ATTIVO
		{
			get
			{
				if(IsDIC_FLAG_ATTIVONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dIC_FLAG_ATTIVO;
			}
			set
			{
				_dIC_FLAG_ATTIVONull = false;
				_dIC_FLAG_ATTIVO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDIC_FLAG_ATTIVONull
		{
			get
			{
				return _dIC_FLAG_ATTIVONull;
			}
			set
			{
				_dIC_FLAG_ATTIVONull = value;
			}
		}

		/// <summary>
		/// Value of field DIC_ALTRO_FLAG
		/// </summary>
		public System.Double DIC_ALTRO_FLAG
		{
			get
			{
				if(IsDIC_ALTRO_FLAGNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dIC_ALTRO_FLAG;
			}
			set
			{
				_dIC_ALTRO_FLAGNull = false;
				_dIC_ALTRO_FLAG = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDIC_ALTRO_FLAGNull
		{
			get
			{
				return _dIC_ALTRO_FLAGNull;
			}
			set
			{
				_dIC_ALTRO_FLAGNull = value;
			}
		}

	}
}