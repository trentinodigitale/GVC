//
//Generated by DELTADATOR\GT0961 at 22/07/2009 11.05.04
//

using System;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Description of GVCVCOOPERATIVECESSATE
	/// </summary>
	public partial class GVCVCOOPERATIVECESSATE
	{
		private System.Int32 _iDOBJ;
		private System.String _nUMERO_REA;
		private System.Boolean _nUMERO_REANull = true;
		private System.Double _rEANUMERIC;
		private System.Boolean _rEANUMERICNull = true;
		private System.String _cODICE_FISCALE;
		private System.Boolean _cODICE_FISCALENull = true;
		private System.String _dENOMINAZIONE;
		private System.Boolean _dENOMINAZIONENull = true;
		private System.DateTime _dATA_CANC_REGISTRO;
		private System.Boolean _dATA_CANC_REGISTRONull = true;
		private System.DateTime _dATA_DELIBERA;
		private System.Boolean _dATA_DELIBERANull = true;

		/// <summary>
		/// Default constructor
		/// </summary>
		public GVCVCOOPERATIVECESSATE(){}

		/// <summary>
		/// Value of field IDOBJ
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ
		{
			get
			{
				return _iDOBJ;
			}
			set
			{
				_iDOBJ = value;
			}
		}

		/// <summary>
		/// Value of field NUMERO_REA
		/// </summary>
		public System.String NUMERO_REA
		{
			get
			{
				if(IsNUMERO_REANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _nUMERO_REA;
			}
			set
			{
				_nUMERO_REANull = false;
				_nUMERO_REA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsNUMERO_REANull
		{
			get
			{
				return _nUMERO_REANull;
			}
			set
			{
				_nUMERO_REANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String NUMERO_REASafe
		{
			get
			{
				if (IsNUMERO_REANull)
					return System.String.Empty;
				return NUMERO_REA;
			}
		}

		/// <summary>
		/// Value of field REANUMERIC
		/// </summary>
		public System.Double REANUMERIC
		{
			get
			{
				if(IsREANUMERICNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _rEANUMERIC;
			}
			set
			{
				_rEANUMERICNull = false;
				_rEANUMERIC = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsREANUMERICNull
		{
			get
			{
				return _rEANUMERICNull;
			}
			set
			{
				_rEANUMERICNull = value;
			}
		}

		/// <summary>
		/// Value of field CODICE_FISCALE
		/// </summary>
		public System.String CODICE_FISCALE
		{
			get
			{
				if(IsCODICE_FISCALENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cODICE_FISCALE;
			}
			set
			{
				_cODICE_FISCALENull = false;
				_cODICE_FISCALE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCODICE_FISCALENull
		{
			get
			{
				return _cODICE_FISCALENull;
			}
			set
			{
				_cODICE_FISCALENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String CODICE_FISCALESafe
		{
			get
			{
				if (IsCODICE_FISCALENull)
					return System.String.Empty;
				return CODICE_FISCALE;
			}
		}

		/// <summary>
		/// Value of field DENOMINAZIONE
		/// </summary>
		public System.String DENOMINAZIONE
		{
			get
			{
				if(IsDENOMINAZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dENOMINAZIONE;
			}
			set
			{
				_dENOMINAZIONENull = false;
				_dENOMINAZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDENOMINAZIONENull
		{
			get
			{
				return _dENOMINAZIONENull;
			}
			set
			{
				_dENOMINAZIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String DENOMINAZIONESafe
		{
			get
			{
				if (IsDENOMINAZIONENull)
					return System.String.Empty;
				return DENOMINAZIONE;
			}
		}

		/// <summary>
		/// Value of field DATA_CANC_REGISTRO
		/// </summary>
		public System.DateTime DATA_CANC_REGISTRO
		{
			get
			{
				if(IsDATA_CANC_REGISTRONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_CANC_REGISTRO;
			}
			set
			{
				_dATA_CANC_REGISTRONull = false;
				_dATA_CANC_REGISTRO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_CANC_REGISTRONull
		{
			get
			{
				return _dATA_CANC_REGISTRONull;
			}
			set
			{
				_dATA_CANC_REGISTRONull = value;
			}
		}

		/// <summary>
		/// Value of field DATA_DELIBERA
		/// </summary>
		public System.DateTime DATA_DELIBERA
		{
			get
			{
				if(IsDATA_DELIBERANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_DELIBERA;
			}
			set
			{
				_dATA_DELIBERANull = false;
				_dATA_DELIBERA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_DELIBERANull
		{
			get
			{
				return _dATA_DELIBERANull;
			}
			set
			{
				_dATA_DELIBERANull = value;
			}
		}

	}
}