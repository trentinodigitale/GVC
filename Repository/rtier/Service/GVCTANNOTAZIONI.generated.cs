//
//Generated by DELTADATOR\GS0445 at 26/03/2009 9.03.13
//

using System;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Description of GVCTANNOTAZIONI
	/// </summary>
	public partial class GVCTANNOTAZIONI
	{
		private System.Int32 _iDOBJ;
		private System.DateTime _dATA_ANNOTAZIONE;
		private System.Int32 _iDOBJ_TIPO_NOTA;
		private System.Int32 _iDOBJ_REGISTRO;
		private System.Int32 _rISERVATA;
		private System.Boolean _rISERVATANull = true;
		private System.String _dESCRIZIONE;
		private System.Boolean _dESCRIZIONENull = true;
		private System.Int32 _eVASA;
		private System.Boolean _eVASANull = true;
		private System.DateTime _dATA_SCADENZA;
		private System.Boolean _dATA_SCADENZANull = true;
		private System.DateTime _dATA_EVASIONE;
		private System.Boolean _dATA_EVASIONENull = true;
		private System.String _oPERATOREULTMOD;
		private System.Boolean _oPERATOREULTMODNull = true;
		private System.DateTime _dATAORAULTMOD;
		private System.Boolean _dATAORAULTMODNull = true;

		/// <summary>
		/// Default constructor
		/// </summary>
		public GVCTANNOTAZIONI(){}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ
		{
			get
			{
				return _iDOBJ;
			}
			set
			{
				_iDOBJ = value;
			}
		}

		/// <summary>
		/// Data annotazione/scadenza
		/// The field is mandatory.
		/// </summary>
		public System.DateTime DATA_ANNOTAZIONE
		{
			get
			{
				return _dATA_ANNOTAZIONE;
			}
			set
			{
				_dATA_ANNOTAZIONE = value;
			}
		}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ_TIPO_NOTA
		{
			get
			{
				return _iDOBJ_TIPO_NOTA;
			}
			set
			{
				_iDOBJ_TIPO_NOTA = value;
			}
		}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ_REGISTRO
		{
			get
			{
				return _iDOBJ_REGISTRO;
			}
			set
			{
				_iDOBJ_REGISTRO = value;
			}
		}

		/// <summary>
		/// Riservata ufficio
		/// </summary>
		public System.Int32 RISERVATA
		{
			get
			{
				if(IsRISERVATANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _rISERVATA;
			}
			set
			{
				_rISERVATANull = false;
				_rISERVATA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsRISERVATANull
		{
			get
			{
				return _rISERVATANull;
			}
			set
			{
				_rISERVATANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 RISERVATASafe
		{
			get
			{
				if (IsRISERVATANull)
					return -1;
				return RISERVATA;
			}
		}

		/// <summary>
		/// Descrizione
		/// </summary>
		public System.String DESCRIZIONE
		{
			get
			{
				if(IsDESCRIZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dESCRIZIONE;
			}
			set
			{
				_dESCRIZIONENull = false;
				_dESCRIZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDESCRIZIONENull
		{
			get
			{
				return _dESCRIZIONENull;
			}
			set
			{
				_dESCRIZIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String DESCRIZIONESafe
		{
			get
			{
				if (IsDESCRIZIONENull)
					return System.String.Empty;
				return DESCRIZIONE;
			}
		}

		/// <summary>
		/// Evasa si/no
		/// </summary>
		public System.Int32 EVASA
		{
			get
			{
				if(IsEVASANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _eVASA;
			}
			set
			{
				_eVASANull = false;
				_eVASA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsEVASANull
		{
			get
			{
				return _eVASANull;
			}
			set
			{
				_eVASANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 EVASASafe
		{
			get
			{
				if (IsEVASANull)
					return -1;
				return EVASA;
			}
		}

		/// <summary>
		/// Data scadenza
		/// </summary>
		public System.DateTime DATA_SCADENZA
		{
			get
			{
				if(IsDATA_SCADENZANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_SCADENZA;
			}
			set
			{
				_dATA_SCADENZANull = false;
				_dATA_SCADENZA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_SCADENZANull
		{
			get
			{
				return _dATA_SCADENZANull;
			}
			set
			{
				_dATA_SCADENZANull = value;
			}
		}

		/// <summary>
		/// Data evasione
		/// </summary>
		public System.DateTime DATA_EVASIONE
		{
			get
			{
				if(IsDATA_EVASIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_EVASIONE;
			}
			set
			{
				_dATA_EVASIONENull = false;
				_dATA_EVASIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_EVASIONENull
		{
			get
			{
				return _dATA_EVASIONENull;
			}
			set
			{
				_dATA_EVASIONENull = value;
			}
		}

		/// <summary>
		/// Value of field OPERATOREULTMOD
		/// </summary>
		public System.String OPERATOREULTMOD
		{
			get
			{
				if(IsOPERATOREULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _oPERATOREULTMOD;
			}
			set
			{
				_oPERATOREULTMODNull = false;
				_oPERATOREULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsOPERATOREULTMODNull
		{
			get
			{
				return _oPERATOREULTMODNull;
			}
			set
			{
				_oPERATOREULTMODNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String OPERATOREULTMODSafe
		{
			get
			{
				if (IsOPERATOREULTMODNull)
					return System.String.Empty;
				return OPERATOREULTMOD;
			}
		}

		/// <summary>
		/// Value of field DATAORAULTMOD
		/// </summary>
		public System.DateTime DATAORAULTMOD
		{
			get
			{
				if(IsDATAORAULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATAORAULTMOD;
			}
			set
			{
				_dATAORAULTMODNull = false;
				_dATAORAULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATAORAULTMODNull
		{
			get
			{
				return _dATAORAULTMODNull;
			}
			set
			{
				_dATAORAULTMODNull = value;
			}
		}

	}
}