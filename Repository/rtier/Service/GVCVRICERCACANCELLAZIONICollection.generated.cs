//
//Generated by gvc at 28/09/2009 9.59.47
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCVRICERCACANCELLAZIONI
	/// </summary>
	public partial class GVCVRICERCACANCELLAZIONICollection
	{
		/// <summary>
		/// Returns the Database Name of the field S_DENOMINAZIONE.
		/// </summary>
		public const string S_DENOMINAZIONEColumnName = "S_DENOMINAZIONE";
		/// <summary>
		/// Returns the Database Name of the field S_IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string S_IDOBJColumnName = "S_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string R_IDOBJColumnName = "R_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field R_NUMERO_REA.
		/// </summary>
		public const string R_NUMERO_REAColumnName = "R_NUMERO_REA";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ_STATO.
		/// </summary>
		public const string R_IDOBJ_STATOColumnName = "R_IDOBJ_STATO";
		/// <summary>
		/// Returns the Database Name of the field CANC_TIPO_1.
		/// </summary>
		public const string CANC_TIPO_1ColumnName = "CANC_TIPO_1";
		/// <summary>
		/// Returns the Database Name of the field CANC_TIPO_2.
		/// </summary>
		public const string CANC_TIPO_2ColumnName = "CANC_TIPO_2";
		/// <summary>
		/// Returns the Database Name of the field CANC_TIPO_3.
		/// </summary>
		public const string CANC_TIPO_3ColumnName = "CANC_TIPO_3";
		/// <summary>
		/// Returns the Database Name of the field CANC_DATA_DOMANDA.
		/// </summary>
		public const string CANC_DATA_DOMANDAColumnName = "CANC_DATA_DOMANDA";
		/// <summary>
		/// Returns the Database Name of the field CANC_DATA_DETERMINA.
		/// </summary>
		public const string CANC_DATA_DETERMINAColumnName = "CANC_DATA_DETERMINA";
		/// <summary>
		/// Returns the Database Name of the field CANC_DATA_CANC_REGISTRO.
		/// </summary>
		public const string CANC_DATA_CANC_REGISTROColumnName = "CANC_DATA_CANC_REGISTRO";
		/// <summary>
		/// Returns the Database Name of the field CANC_DATA_CANC_ALBO.
		/// </summary>
		public const string CANC_DATA_CANC_ALBOColumnName = "CANC_DATA_CANC_ALBO";
		/// <summary>
		/// Returns the Database Name of the field CANC_NUMERO_DETERMINA.
		/// </summary>
		public const string CANC_NUMERO_DETERMINAColumnName = "CANC_NUMERO_DETERMINA";
		/// <summary>
		/// Returns the Database Name of the field CANC_NOTE.
		/// </summary>
		public const string CANC_NOTEColumnName = "CANC_NOTE";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCVRICERCACANCELLAZIONICollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCVRICERCACANCELLAZIONI
		/// </summary>
		/// <returns>Array of objects GVCVRICERCACANCELLAZIONI</returns>
		public virtual GVCVRICERCACANCELLAZIONI[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCVRICERCACANCELLAZIONI
		/// </summary>
		/// <returns>DataTable of objects GVCVRICERCACANCELLAZIONI</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCVRICERCACANCELLAZIONI
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCVRICERCACANCELLAZIONI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCVRICERCACANCELLAZIONI</returns>
		public GVCVRICERCACANCELLAZIONI GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCVRICERCACANCELLAZIONI[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCVRICERCACANCELLAZIONI selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCVRICERCACANCELLAZIONI</returns>
		public GVCVRICERCACANCELLAZIONI[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCVRICERCACANCELLAZIONI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCVRICERCACANCELLAZIONI</returns>
		public virtual GVCVRICERCACANCELLAZIONI[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCACANCELLAZIONI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCVRICERCACANCELLAZIONI</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCACANCELLAZIONI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCACANCELLAZIONI</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCVRICERCACANCELLAZIONI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("S_DENOMINAZIONE, ");
			sql.Append("S_IDOBJ, ");
			sql.Append("R_IDOBJ, ");
			sql.Append("R_NUMERO_REA, ");
			sql.Append("R_IDOBJ_STATO, ");
			sql.Append("CANC_TIPO_1, ");
			sql.Append("CANC_TIPO_2, ");
			sql.Append("CANC_TIPO_3, ");
			sql.Append("CANC_DATA_DOMANDA, ");
			sql.Append("CANC_DATA_DETERMINA, ");
			sql.Append("CANC_DATA_CANC_REGISTRO, ");
			sql.Append("CANC_DATA_CANC_ALBO, ");
			sql.Append("CANC_NUMERO_DETERMINA, ");
			sql.Append("CANC_NOTE ");
			sql.Append("FROM GVCVRICERCACANCELLAZIONI ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}


		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCACANCELLAZIONI
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCVRICERCACANCELLAZIONI</returns>
		protected GVCVRICERCACANCELLAZIONI[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCACANCELLAZIONI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCVRICERCACANCELLAZIONI</returns>
		protected GVCVRICERCACANCELLAZIONI[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCVRICERCACANCELLAZIONI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCVRICERCACANCELLAZIONI</returns>
		protected virtual GVCVRICERCACANCELLAZIONI[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int s_DENOMINAZIONEColumnIndex = reader.GetOrdinal("S_DENOMINAZIONE");
			int s_IDOBJColumnIndex = reader.GetOrdinal("S_IDOBJ");
			int r_IDOBJColumnIndex = reader.GetOrdinal("R_IDOBJ");
			int r_NUMERO_REAColumnIndex = reader.GetOrdinal("R_NUMERO_REA");
			int r_IDOBJ_STATOColumnIndex = reader.GetOrdinal("R_IDOBJ_STATO");
			int cANC_TIPO_1ColumnIndex = reader.GetOrdinal("CANC_TIPO_1");
			int cANC_TIPO_2ColumnIndex = reader.GetOrdinal("CANC_TIPO_2");
			int cANC_TIPO_3ColumnIndex = reader.GetOrdinal("CANC_TIPO_3");
			int cANC_DATA_DOMANDAColumnIndex = reader.GetOrdinal("CANC_DATA_DOMANDA");
			int cANC_DATA_DETERMINAColumnIndex = reader.GetOrdinal("CANC_DATA_DETERMINA");
			int cANC_DATA_CANC_REGISTROColumnIndex = reader.GetOrdinal("CANC_DATA_CANC_REGISTRO");
			int cANC_DATA_CANC_ALBOColumnIndex = reader.GetOrdinal("CANC_DATA_CANC_ALBO");
			int cANC_NUMERO_DETERMINAColumnIndex = reader.GetOrdinal("CANC_NUMERO_DETERMINA");
			int cANC_NOTEColumnIndex = reader.GetOrdinal("CANC_NOTE");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCVRICERCACANCELLAZIONI record = new GVCVRICERCACANCELLAZIONI();
					recordList.Add(record);
					if(!reader.IsDBNull(s_DENOMINAZIONEColumnIndex))
						record.S_DENOMINAZIONE = Convert.ToString(reader.GetValue(s_DENOMINAZIONEColumnIndex));
					record.S_IDOBJ = Convert.ToInt32(reader.GetValue(s_IDOBJColumnIndex));
					record.R_IDOBJ = Convert.ToInt32(reader.GetValue(r_IDOBJColumnIndex));
					if(!reader.IsDBNull(r_NUMERO_REAColumnIndex))
						record.R_NUMERO_REA = Convert.ToString(reader.GetValue(r_NUMERO_REAColumnIndex));
					if(!reader.IsDBNull(r_IDOBJ_STATOColumnIndex))
						record.R_IDOBJ_STATO = Convert.ToInt32(reader.GetValue(r_IDOBJ_STATOColumnIndex));
					if(!reader.IsDBNull(cANC_TIPO_1ColumnIndex))
						record.CANC_TIPO_1 = Convert.ToString(reader.GetValue(cANC_TIPO_1ColumnIndex));
					if(!reader.IsDBNull(cANC_TIPO_2ColumnIndex))
						record.CANC_TIPO_2 = Convert.ToString(reader.GetValue(cANC_TIPO_2ColumnIndex));
					if(!reader.IsDBNull(cANC_TIPO_3ColumnIndex))
						record.CANC_TIPO_3 = Convert.ToString(reader.GetValue(cANC_TIPO_3ColumnIndex));
					if(!reader.IsDBNull(cANC_DATA_DOMANDAColumnIndex))
						record.CANC_DATA_DOMANDA = Convert.ToDateTime(reader.GetValue(cANC_DATA_DOMANDAColumnIndex));
					if(!reader.IsDBNull(cANC_DATA_DETERMINAColumnIndex))
						record.CANC_DATA_DETERMINA = Convert.ToDateTime(reader.GetValue(cANC_DATA_DETERMINAColumnIndex));
					if(!reader.IsDBNull(cANC_DATA_CANC_REGISTROColumnIndex))
						record.CANC_DATA_CANC_REGISTRO = Convert.ToDateTime(reader.GetValue(cANC_DATA_CANC_REGISTROColumnIndex));
					if(!reader.IsDBNull(cANC_DATA_CANC_ALBOColumnIndex))
						record.CANC_DATA_CANC_ALBO = Convert.ToDateTime(reader.GetValue(cANC_DATA_CANC_ALBOColumnIndex));
					if(!reader.IsDBNull(cANC_NUMERO_DETERMINAColumnIndex))
						record.CANC_NUMERO_DETERMINA = Convert.ToString(reader.GetValue(cANC_NUMERO_DETERMINAColumnIndex));
					if(!reader.IsDBNull(cANC_NOTEColumnIndex))
						record.CANC_NOTE = Convert.ToString(reader.GetValue(cANC_NOTEColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCVRICERCACANCELLAZIONI[])(recordList.ToArray(typeof(GVCVRICERCACANCELLAZIONI)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCVRICERCACANCELLAZIONI</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCVRICERCACANCELLAZIONI</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCACANCELLAZIONI</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCVRICERCACANCELLAZIONI
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCVRICERCACANCELLAZIONI</returns>
		protected virtual GVCVRICERCACANCELLAZIONI MapRow(DataRow row)
		{
			GVCVRICERCACANCELLAZIONI mappedObject = new GVCVRICERCACANCELLAZIONI();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "S_DENOMINAZIONE"
			dataColumn = dataTable.Columns["S_DENOMINAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_DENOMINAZIONE = (System.String)row[dataColumn];
			//Campo "S_IDOBJ"
			dataColumn = dataTable.Columns["S_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "R_IDOBJ"
			dataColumn = dataTable.Columns["R_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "R_NUMERO_REA"
			dataColumn = dataTable.Columns["R_NUMERO_REA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_NUMERO_REA = (System.String)row[dataColumn];
			//Campo "R_IDOBJ_STATO"
			dataColumn = dataTable.Columns["R_IDOBJ_STATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ_STATO = (System.Int32)row[dataColumn];
			//Campo "CANC_TIPO_1"
			dataColumn = dataTable.Columns["CANC_TIPO_1"];
			if(!row.IsNull(dataColumn))
				mappedObject.CANC_TIPO_1 = (System.String)row[dataColumn];
			//Campo "CANC_TIPO_2"
			dataColumn = dataTable.Columns["CANC_TIPO_2"];
			if(!row.IsNull(dataColumn))
				mappedObject.CANC_TIPO_2 = (System.String)row[dataColumn];
			//Campo "CANC_TIPO_3"
			dataColumn = dataTable.Columns["CANC_TIPO_3"];
			if(!row.IsNull(dataColumn))
				mappedObject.CANC_TIPO_3 = (System.String)row[dataColumn];
			//Campo "CANC_DATA_DOMANDA"
			dataColumn = dataTable.Columns["CANC_DATA_DOMANDA"];
			if(!row.IsNull(dataColumn))
				mappedObject.CANC_DATA_DOMANDA = (System.DateTime)row[dataColumn];
			//Campo "CANC_DATA_DETERMINA"
			dataColumn = dataTable.Columns["CANC_DATA_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.CANC_DATA_DETERMINA = (System.DateTime)row[dataColumn];
			//Campo "CANC_DATA_CANC_REGISTRO"
			dataColumn = dataTable.Columns["CANC_DATA_CANC_REGISTRO"];
			if(!row.IsNull(dataColumn))
				mappedObject.CANC_DATA_CANC_REGISTRO = (System.DateTime)row[dataColumn];
			//Campo "CANC_DATA_CANC_ALBO"
			dataColumn = dataTable.Columns["CANC_DATA_CANC_ALBO"];
			if(!row.IsNull(dataColumn))
				mappedObject.CANC_DATA_CANC_ALBO = (System.DateTime)row[dataColumn];
			//Campo "CANC_NUMERO_DETERMINA"
			dataColumn = dataTable.Columns["CANC_NUMERO_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.CANC_NUMERO_DETERMINA = (System.String)row[dataColumn];
			//Campo "CANC_NOTE"
			dataColumn = dataTable.Columns["CANC_NOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.CANC_NOTE = (System.String)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCVRICERCACANCELLAZIONI
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCVRICERCACANCELLAZIONI";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("S_DENOMINAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("S_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_NUMERO_REA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ_STATO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CANC_TIPO_1", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CANC_TIPO_2", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CANC_TIPO_3", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CANC_DATA_DOMANDA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CANC_DATA_DETERMINA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CANC_DATA_CANC_REGISTRO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CANC_DATA_CANC_ALBO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CANC_NUMERO_DETERMINA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CANC_NOTE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "S_DENOMINAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "S_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_NUMERO_REA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_IDOBJ_STATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "CANC_TIPO_1":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "CANC_TIPO_2":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "CANC_TIPO_3":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "CANC_DATA_DOMANDA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "CANC_DATA_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "CANC_DATA_CANC_REGISTRO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "CANC_DATA_CANC_ALBO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "CANC_NUMERO_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "CANC_NOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
