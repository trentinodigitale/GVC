//
//Generated by gvc at 06/04/2010 15.56.50
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCTREVISIONI
	/// </summary>
	public partial class GVCTREVISIONICollection
	{
		/// <summary>
		/// Returns the Database Name of the field IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJColumnName = "IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field ANNO_REVISIONE.
		///The field is mandatory.
		/// </summary>
		public const string ANNO_REVISIONEColumnName = "ANNO_REVISIONE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_TIPO_REVISIONE.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_TIPO_REVISIONEColumnName = "IDOBJ_TIPO_REVISIONE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_REGISTRO.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_REGISTROColumnName = "IDOBJ_REGISTRO";
		/// <summary>
		/// Returns the Database Name of the field DATA_CONCLUSIONE.
		/// </summary>
		public const string DATA_CONCLUSIONEColumnName = "DATA_CONCLUSIONE";
		/// <summary>
		/// Returns the Database Name of the field DATA_DEPOSITO_RELAZIONE.
		/// </summary>
		public const string DATA_DEPOSITO_RELAZIONEColumnName = "DATA_DEPOSITO_RELAZIONE";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_DELIBERA_ESAME.
		/// </summary>
		public const string NUMERO_DELIBERA_ESAMEColumnName = "NUMERO_DELIBERA_ESAME";
		/// <summary>
		/// Returns the Database Name of the field DATA_DELIBERA_ESAME.
		/// </summary>
		public const string DATA_DELIBERA_ESAMEColumnName = "DATA_DELIBERA_ESAME";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_DETERMINA_ESAME.
		/// </summary>
		public const string NUMERO_DETERMINA_ESAMEColumnName = "NUMERO_DETERMINA_ESAME";
		/// <summary>
		/// Returns the Database Name of the field DATA_DETERMINA_ESAME.
		/// </summary>
		public const string DATA_DETERMINA_ESAMEColumnName = "DATA_DETERMINA_ESAME";
		/// <summary>
		/// Returns the Database Name of the field DATA_COMUNICAZIONE_ESITI.
		/// </summary>
		public const string DATA_COMUNICAZIONE_ESITIColumnName = "DATA_COMUNICAZIONE_ESITI";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_DELIBERA_REVOCA.
		/// </summary>
		public const string NUMERO_DELIBERA_REVOCAColumnName = "NUMERO_DELIBERA_REVOCA";
		/// <summary>
		/// Returns the Database Name of the field DATA_DELIBERA_REVOCA.
		/// </summary>
		public const string DATA_DELIBERA_REVOCAColumnName = "DATA_DELIBERA_REVOCA";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_DETERMINA_REVOCA.
		/// </summary>
		public const string NUMERO_DETERMINA_REVOCAColumnName = "NUMERO_DETERMINA_REVOCA";
		/// <summary>
		/// Returns the Database Name of the field DATA_DETERMINA_REVOCA.
		/// </summary>
		public const string DATA_DETERMINA_REVOCAColumnName = "DATA_DETERMINA_REVOCA";
		/// <summary>
		/// Returns the Database Name of the field OPERATOREULTMOD.
		/// </summary>
		public const string OPERATOREULTMODColumnName = "OPERATOREULTMOD";
		/// <summary>
		/// Returns the Database Name of the field DATAORAULTMOD.
		/// </summary>
		public const string DATAORAULTMODColumnName = "DATAORAULTMOD";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_ORGANO_REVISORE.
		/// </summary>
		public const string IDOBJ_ORGANO_REVISOREColumnName = "IDOBJ_ORGANO_REVISORE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_ESITO_REVISIONE.
		/// </summary>
		public const string IDOBJ_ESITO_REVISIONEColumnName = "IDOBJ_ESITO_REVISIONE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_LIMITE_COSTO.
		/// </summary>
		public const string IDOBJ_LIMITE_COSTOColumnName = "IDOBJ_LIMITE_COSTO";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCTREVISIONICollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCTREVISIONI
		/// </summary>
		/// <returns>Array of objects GVCTREVISIONI</returns>
		public virtual GVCTREVISIONI[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCTREVISIONI
		/// </summary>
		/// <returns>DataTable of objects GVCTREVISIONI</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCTREVISIONI
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCTREVISIONI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCTREVISIONI</returns>
		public GVCTREVISIONI GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCTREVISIONI[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCTREVISIONI selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCTREVISIONI</returns>
		public GVCTREVISIONI[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCTREVISIONI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCTREVISIONI</returns>
		public virtual GVCTREVISIONI[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTREVISIONI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCTREVISIONI</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTREVISIONI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTREVISIONI</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCTREVISIONI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("IDOBJ, ");
			sql.Append("ANNO_REVISIONE, ");
			sql.Append("IDOBJ_TIPO_REVISIONE, ");
			sql.Append("IDOBJ_REGISTRO, ");
			sql.Append("DATA_CONCLUSIONE, ");
			sql.Append("DATA_DEPOSITO_RELAZIONE, ");
			sql.Append("NUMERO_DELIBERA_ESAME, ");
			sql.Append("DATA_DELIBERA_ESAME, ");
			sql.Append("NUMERO_DETERMINA_ESAME, ");
			sql.Append("DATA_DETERMINA_ESAME, ");
			sql.Append("DATA_COMUNICAZIONE_ESITI, ");
			sql.Append("NUMERO_DELIBERA_REVOCA, ");
			sql.Append("DATA_DELIBERA_REVOCA, ");
			sql.Append("NUMERO_DETERMINA_REVOCA, ");
			sql.Append("DATA_DETERMINA_REVOCA, ");
			sql.Append("OPERATOREULTMOD, ");
			sql.Append("DATAORAULTMOD, ");
			sql.Append("IDOBJ_ORGANO_REVISORE, ");
			sql.Append("IDOBJ_ESITO_REVISIONE, ");
			sql.Append("IDOBJ_LIMITE_COSTO ");
			sql.Append("FROM GVCTREVISIONI ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Returns an object GVCTREVISIONI selected by a primary key
		/// </summary>
		/// <param name="IDOBJ">The primary key of the object</param>
		/// <returns>Object of type GVCTREVISIONI</returns>
		public virtual GVCTREVISIONI GetByPrimaryKey(System.Int32 IDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateGetCommand(whereSql, null))
			{
				AddParameter(cmd, "IDOBJ", IDOBJ);
				GVCTREVISIONI[] tempArray = MapRecords(cmd);
				return tempArray.Length == 0 ? null : tempArray[0];
			}
		}


		/// <summary>
		/// Returns an object GVCTREVISIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_ESITO_REVISIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTREVISIONI</returns>
		public virtual GVCTREVISIONI[] GetByIDOBJ_ESITO_REVISIONE(System.Int32 iDOBJ_ESITO_REVISIONE)
		{
			return MapRecords(CreateGetByIDOBJ_ESITO_REVISIONECommand(iDOBJ_ESITO_REVISIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTREVISIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_ESITO_REVISIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_ESITO_REVISIONEAsDataTable(System.Int32 iDOBJ_ESITO_REVISIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_ESITO_REVISIONECommand(iDOBJ_ESITO_REVISIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_ESITO_REVISIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_ESITO_REVISIONECommand(System.Int32 iDOBJ_ESITO_REVISIONE)
		{
			string whereSql = "IDOBJ_ESITO_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_ESITO_REVISIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_ESITO_REVISIONE", iDOBJ_ESITO_REVISIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREVISIONI
		/// </summary>
		/// <param name="iDOBJ_ESITO_REVISIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_ESITO_REVISIONE(System.Int32 iDOBJ_ESITO_REVISIONE)
		{
			return CreateDeleteByIDOBJ_ESITO_REVISIONECommand(iDOBJ_ESITO_REVISIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTREVISIONI
		/// </summary>
		/// <param name="iDOBJ_ESITO_REVISIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_ESITO_REVISIONECommand(System.Int32 iDOBJ_ESITO_REVISIONE)
		{
			string whereSql = "IDOBJ_ESITO_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_ESITO_REVISIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_ESITO_REVISIONE", iDOBJ_ESITO_REVISIONE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTREVISIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_LIMITE_COSTO">The foreign key of the object</param>
		/// <returns>Object of type GVCTREVISIONI</returns>
		public virtual GVCTREVISIONI[] GetByIDOBJ_LIMITE_COSTO(System.Int32 iDOBJ_LIMITE_COSTO)
		{
			return MapRecords(CreateGetByIDOBJ_LIMITE_COSTOCommand(iDOBJ_LIMITE_COSTO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTREVISIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_LIMITE_COSTO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_LIMITE_COSTOAsDataTable(System.Int32 iDOBJ_LIMITE_COSTO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_LIMITE_COSTOCommand(iDOBJ_LIMITE_COSTO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_LIMITE_COSTO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_LIMITE_COSTOCommand(System.Int32 iDOBJ_LIMITE_COSTO)
		{
			string whereSql = "IDOBJ_LIMITE_COSTO = " + _db.CreateSqlParameterName("IDOBJ_LIMITE_COSTO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_LIMITE_COSTO", iDOBJ_LIMITE_COSTO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREVISIONI
		/// </summary>
		/// <param name="iDOBJ_LIMITE_COSTO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_LIMITE_COSTO(System.Int32 iDOBJ_LIMITE_COSTO)
		{
			return CreateDeleteByIDOBJ_LIMITE_COSTOCommand(iDOBJ_LIMITE_COSTO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTREVISIONI
		/// </summary>
		/// <param name="iDOBJ_LIMITE_COSTO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_LIMITE_COSTOCommand(System.Int32 iDOBJ_LIMITE_COSTO)
		{
			string whereSql = "IDOBJ_LIMITE_COSTO = " + _db.CreateSqlParameterName("IDOBJ_LIMITE_COSTO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_LIMITE_COSTO", iDOBJ_LIMITE_COSTO);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTREVISIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_REVISIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTREVISIONI</returns>
		public virtual GVCTREVISIONI[] GetByIDOBJ_TIPO_REVISIONE(System.Int32 iDOBJ_TIPO_REVISIONE)
		{
			return MapRecords(CreateGetByIDOBJ_TIPO_REVISIONECommand(iDOBJ_TIPO_REVISIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTREVISIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_REVISIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_TIPO_REVISIONEAsDataTable(System.Int32 iDOBJ_TIPO_REVISIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_TIPO_REVISIONECommand(iDOBJ_TIPO_REVISIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_REVISIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_TIPO_REVISIONECommand(System.Int32 iDOBJ_TIPO_REVISIONE)
		{
			string whereSql = "IDOBJ_TIPO_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_REVISIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_TIPO_REVISIONE", iDOBJ_TIPO_REVISIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREVISIONI
		/// </summary>
		/// <param name="iDOBJ_TIPO_REVISIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_TIPO_REVISIONE(System.Int32 iDOBJ_TIPO_REVISIONE)
		{
			return CreateDeleteByIDOBJ_TIPO_REVISIONECommand(iDOBJ_TIPO_REVISIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTREVISIONI
		/// </summary>
		/// <param name="iDOBJ_TIPO_REVISIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_TIPO_REVISIONECommand(System.Int32 iDOBJ_TIPO_REVISIONE)
		{
			string whereSql = "IDOBJ_TIPO_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_REVISIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_TIPO_REVISIONE", iDOBJ_TIPO_REVISIONE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTREVISIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key of the object</param>
		/// <returns>Object of type GVCTREVISIONI</returns>
		public virtual GVCTREVISIONI[] GetByIDOBJ_REGISTRO(System.Int32 iDOBJ_REGISTRO)
		{
			return MapRecords(CreateGetByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTREVISIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_REGISTROAsDataTable(System.Int32 iDOBJ_REGISTRO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_REGISTROCommand(System.Int32 iDOBJ_REGISTRO)
		{
			string whereSql = "IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_REGISTRO", iDOBJ_REGISTRO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREVISIONI
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_REGISTRO(System.Int32 iDOBJ_REGISTRO)
		{
			return CreateDeleteByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTREVISIONI
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_REGISTROCommand(System.Int32 iDOBJ_REGISTRO)
		{
			string whereSql = "IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_REGISTRO", iDOBJ_REGISTRO);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTREVISIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_ORGANO_REVISORE">The foreign key of the object</param>
		/// <returns>Object of type GVCTREVISIONI</returns>
		public virtual GVCTREVISIONI[] GetByIDOBJ_ORGANO_REVISORE(System.Int32 iDOBJ_ORGANO_REVISORE)
		{
			return MapRecords(CreateGetByIDOBJ_ORGANO_REVISORECommand(iDOBJ_ORGANO_REVISORE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTREVISIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_ORGANO_REVISORE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_ORGANO_REVISOREAsDataTable(System.Int32 iDOBJ_ORGANO_REVISORE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_ORGANO_REVISORECommand(iDOBJ_ORGANO_REVISORE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_ORGANO_REVISORE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_ORGANO_REVISORECommand(System.Int32 iDOBJ_ORGANO_REVISORE)
		{
			string whereSql = "IDOBJ_ORGANO_REVISORE = " + _db.CreateSqlParameterName("IDOBJ_ORGANO_REVISORE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_ORGANO_REVISORE", iDOBJ_ORGANO_REVISORE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREVISIONI
		/// </summary>
		/// <param name="iDOBJ_ORGANO_REVISORE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_ORGANO_REVISORE(System.Int32 iDOBJ_ORGANO_REVISORE)
		{
			return CreateDeleteByIDOBJ_ORGANO_REVISORECommand(iDOBJ_ORGANO_REVISORE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTREVISIONI
		/// </summary>
		/// <param name="iDOBJ_ORGANO_REVISORE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_ORGANO_REVISORECommand(System.Int32 iDOBJ_ORGANO_REVISORE)
		{
			string whereSql = "IDOBJ_ORGANO_REVISORE = " + _db.CreateSqlParameterName("IDOBJ_ORGANO_REVISORE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_ORGANO_REVISORE", iDOBJ_ORGANO_REVISORE);
			return cmd;
		}

		/// <summary>
		/// Inserts in the Database an object GVCTREVISIONI
		/// </summary>
		/// <param name="valore">The object to insert</param>
		public virtual void Insert(GVCTREVISIONI valore)
		{
			System.Int32 id = -1;
			System.String sqlStr;

			sqlStr = "SELECT GVCTREVISIONI_SEQ.NEXTVAL FROM DUAL";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				id = Convert.ToInt32(cmd.ExecuteScalar());
			}

			sqlStr = "INSERT INTO GVCTREVISIONI (" +
			"IDOBJ, " +
			"ANNO_REVISIONE, " +
			"IDOBJ_TIPO_REVISIONE, " +
			"IDOBJ_REGISTRO, " +
			"DATA_CONCLUSIONE, " +
			"DATA_DEPOSITO_RELAZIONE, " +
			"NUMERO_DELIBERA_ESAME, " +
			"DATA_DELIBERA_ESAME, " +
			"NUMERO_DETERMINA_ESAME, " +
			"DATA_DETERMINA_ESAME, " +
			"DATA_COMUNICAZIONE_ESITI, " +
			"NUMERO_DELIBERA_REVOCA, " +
			"DATA_DELIBERA_REVOCA, " +
			"NUMERO_DETERMINA_REVOCA, " +
			"DATA_DETERMINA_REVOCA, " +
			"OPERATOREULTMOD, " +
			"DATAORAULTMOD, " +
			"IDOBJ_ORGANO_REVISORE, " +
			"IDOBJ_ESITO_REVISIONE, " +
			"IDOBJ_LIMITE_COSTO) " +
			"VALUES (" + id.ToString() + ", " +
			_db.CreateSqlParameterName("ANNO_REVISIONE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_TIPO_REVISIONE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_REGISTRO") + ", " +
			_db.CreateSqlParameterName("DATA_CONCLUSIONE") + ", " +
			_db.CreateSqlParameterName("DATA_DEPOSITO_RELAZIONE") + ", " +
			_db.CreateSqlParameterName("NUMERO_DELIBERA_ESAME") + ", " +
			_db.CreateSqlParameterName("DATA_DELIBERA_ESAME") + ", " +
			_db.CreateSqlParameterName("NUMERO_DETERMINA_ESAME") + ", " +
			_db.CreateSqlParameterName("DATA_DETERMINA_ESAME") + ", " +
			_db.CreateSqlParameterName("DATA_COMUNICAZIONE_ESITI") + ", " +
			_db.CreateSqlParameterName("NUMERO_DELIBERA_REVOCA") + ", " +
			_db.CreateSqlParameterName("DATA_DELIBERA_REVOCA") + ", " +
			_db.CreateSqlParameterName("NUMERO_DETERMINA_REVOCA") + ", " +
			_db.CreateSqlParameterName("DATA_DETERMINA_REVOCA") + ", " +
			_db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
			_db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
			_db.CreateSqlParameterName("IDOBJ_ORGANO_REVISORE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_ESITO_REVISIONE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_LIMITE_COSTO") + ")";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "ANNO_REVISIONE", valore.ANNO_REVISIONE);
				AddParameter(cmd, "IDOBJ_TIPO_REVISIONE", valore.IDOBJ_TIPO_REVISIONE);
				AddParameter(cmd, "IDOBJ_REGISTRO", valore.IDOBJ_REGISTRO);
				AddParameter(cmd, "DATA_CONCLUSIONE", valore.IsDATA_CONCLUSIONENull ? DBNull.Value : (object)valore.DATA_CONCLUSIONE);
				AddParameter(cmd, "DATA_DEPOSITO_RELAZIONE", valore.IsDATA_DEPOSITO_RELAZIONENull ? DBNull.Value : (object)valore.DATA_DEPOSITO_RELAZIONE);
				AddParameter(cmd, "NUMERO_DELIBERA_ESAME", valore.IsNUMERO_DELIBERA_ESAMENull ? DBNull.Value : (object)valore.NUMERO_DELIBERA_ESAME);
				AddParameter(cmd, "DATA_DELIBERA_ESAME", valore.IsDATA_DELIBERA_ESAMENull ? DBNull.Value : (object)valore.DATA_DELIBERA_ESAME);
				AddParameter(cmd, "NUMERO_DETERMINA_ESAME", valore.IsNUMERO_DETERMINA_ESAMENull ? DBNull.Value : (object)valore.NUMERO_DETERMINA_ESAME);
				AddParameter(cmd, "DATA_DETERMINA_ESAME", valore.IsDATA_DETERMINA_ESAMENull ? DBNull.Value : (object)valore.DATA_DETERMINA_ESAME);
				AddParameter(cmd, "DATA_COMUNICAZIONE_ESITI", valore.IsDATA_COMUNICAZIONE_ESITINull ? DBNull.Value : (object)valore.DATA_COMUNICAZIONE_ESITI);
				AddParameter(cmd, "NUMERO_DELIBERA_REVOCA", valore.IsNUMERO_DELIBERA_REVOCANull ? DBNull.Value : (object)valore.NUMERO_DELIBERA_REVOCA);
				AddParameter(cmd, "DATA_DELIBERA_REVOCA", valore.IsDATA_DELIBERA_REVOCANull ? DBNull.Value : (object)valore.DATA_DELIBERA_REVOCA);
				AddParameter(cmd, "NUMERO_DETERMINA_REVOCA", valore.IsNUMERO_DETERMINA_REVOCANull ? DBNull.Value : (object)valore.NUMERO_DETERMINA_REVOCA);
				AddParameter(cmd, "DATA_DETERMINA_REVOCA", valore.IsDATA_DETERMINA_REVOCANull ? DBNull.Value : (object)valore.DATA_DETERMINA_REVOCA);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_ORGANO_REVISORE", valore.IsIDOBJ_ORGANO_REVISORENull ? DBNull.Value : (object)valore.IDOBJ_ORGANO_REVISORE);
				AddParameter(cmd, "IDOBJ_ESITO_REVISIONE", valore.IsIDOBJ_ESITO_REVISIONENull ? DBNull.Value : (object)valore.IDOBJ_ESITO_REVISIONE);
				AddParameter(cmd, "IDOBJ_LIMITE_COSTO", valore.IsIDOBJ_LIMITE_COSTONull ? DBNull.Value : (object)valore.IDOBJ_LIMITE_COSTO);
				cmd.ExecuteScalar();
				valore.IDOBJ = id;
			}
		}

		/// <summary>
		/// Updates in the Database an object GVCTREVISIONI
		/// </summary>
		/// <param name="valore">The object to update</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool Update(GVCTREVISIONI valore)
		{
			System.String sqlStr = "UPDATE GVCTREVISIONI SET " +
				"ANNO_REVISIONE = " + _db.CreateSqlParameterName("ANNO_REVISIONE") + ", " +
				"IDOBJ_TIPO_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_REVISIONE") + ", " +
				"IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO") + ", " +
				"DATA_CONCLUSIONE = " + _db.CreateSqlParameterName("DATA_CONCLUSIONE") + ", " +
				"DATA_DEPOSITO_RELAZIONE = " + _db.CreateSqlParameterName("DATA_DEPOSITO_RELAZIONE") + ", " +
				"NUMERO_DELIBERA_ESAME = " + _db.CreateSqlParameterName("NUMERO_DELIBERA_ESAME") + ", " +
				"DATA_DELIBERA_ESAME = " + _db.CreateSqlParameterName("DATA_DELIBERA_ESAME") + ", " +
				"NUMERO_DETERMINA_ESAME = " + _db.CreateSqlParameterName("NUMERO_DETERMINA_ESAME") + ", " +
				"DATA_DETERMINA_ESAME = " + _db.CreateSqlParameterName("DATA_DETERMINA_ESAME") + ", " +
				"DATA_COMUNICAZIONE_ESITI = " + _db.CreateSqlParameterName("DATA_COMUNICAZIONE_ESITI") + ", " +
				"NUMERO_DELIBERA_REVOCA = " + _db.CreateSqlParameterName("NUMERO_DELIBERA_REVOCA") + ", " +
				"DATA_DELIBERA_REVOCA = " + _db.CreateSqlParameterName("DATA_DELIBERA_REVOCA") + ", " +
				"NUMERO_DETERMINA_REVOCA = " + _db.CreateSqlParameterName("NUMERO_DETERMINA_REVOCA") + ", " +
				"DATA_DETERMINA_REVOCA = " + _db.CreateSqlParameterName("DATA_DETERMINA_REVOCA") + ", " +
				"OPERATOREULTMOD = " + _db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
				"DATAORAULTMOD = " + _db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
				"IDOBJ_ORGANO_REVISORE = " + _db.CreateSqlParameterName("IDOBJ_ORGANO_REVISORE") + ", " +
				"IDOBJ_ESITO_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_ESITO_REVISIONE") + ", " +
				"IDOBJ_LIMITE_COSTO = " + _db.CreateSqlParameterName("IDOBJ_LIMITE_COSTO") +
				" WHERE " +
				"IDOBJ = " + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ", valore.IDOBJ);
				AddParameter(cmd, "ANNO_REVISIONE", valore.ANNO_REVISIONE);
				AddParameter(cmd, "IDOBJ_TIPO_REVISIONE", valore.IDOBJ_TIPO_REVISIONE);
				AddParameter(cmd, "IDOBJ_REGISTRO", valore.IDOBJ_REGISTRO);
				AddParameter(cmd, "DATA_CONCLUSIONE", valore.IsDATA_CONCLUSIONENull ? DBNull.Value : (object)valore.DATA_CONCLUSIONE);
				AddParameter(cmd, "DATA_DEPOSITO_RELAZIONE", valore.IsDATA_DEPOSITO_RELAZIONENull ? DBNull.Value : (object)valore.DATA_DEPOSITO_RELAZIONE);
				AddParameter(cmd, "NUMERO_DELIBERA_ESAME", valore.IsNUMERO_DELIBERA_ESAMENull ? DBNull.Value : (object)valore.NUMERO_DELIBERA_ESAME);
				AddParameter(cmd, "DATA_DELIBERA_ESAME", valore.IsDATA_DELIBERA_ESAMENull ? DBNull.Value : (object)valore.DATA_DELIBERA_ESAME);
				AddParameter(cmd, "NUMERO_DETERMINA_ESAME", valore.IsNUMERO_DETERMINA_ESAMENull ? DBNull.Value : (object)valore.NUMERO_DETERMINA_ESAME);
				AddParameter(cmd, "DATA_DETERMINA_ESAME", valore.IsDATA_DETERMINA_ESAMENull ? DBNull.Value : (object)valore.DATA_DETERMINA_ESAME);
				AddParameter(cmd, "DATA_COMUNICAZIONE_ESITI", valore.IsDATA_COMUNICAZIONE_ESITINull ? DBNull.Value : (object)valore.DATA_COMUNICAZIONE_ESITI);
				AddParameter(cmd, "NUMERO_DELIBERA_REVOCA", valore.IsNUMERO_DELIBERA_REVOCANull ? DBNull.Value : (object)valore.NUMERO_DELIBERA_REVOCA);
				AddParameter(cmd, "DATA_DELIBERA_REVOCA", valore.IsDATA_DELIBERA_REVOCANull ? DBNull.Value : (object)valore.DATA_DELIBERA_REVOCA);
				AddParameter(cmd, "NUMERO_DETERMINA_REVOCA", valore.IsNUMERO_DETERMINA_REVOCANull ? DBNull.Value : (object)valore.NUMERO_DETERMINA_REVOCA);
				AddParameter(cmd, "DATA_DETERMINA_REVOCA", valore.IsDATA_DETERMINA_REVOCANull ? DBNull.Value : (object)valore.DATA_DETERMINA_REVOCA);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_ORGANO_REVISORE", valore.IsIDOBJ_ORGANO_REVISORENull ? DBNull.Value : (object)valore.IDOBJ_ORGANO_REVISORE);
				AddParameter(cmd, "IDOBJ_ESITO_REVISIONE", valore.IsIDOBJ_ESITO_REVISIONENull ? DBNull.Value : (object)valore.IDOBJ_ESITO_REVISIONE);
				AddParameter(cmd, "IDOBJ_LIMITE_COSTO", valore.IsIDOBJ_LIMITE_COSTONull ? DBNull.Value : (object)valore.IDOBJ_LIMITE_COSTO);
				return cmd.ExecuteNonQuery() != 0;
			}
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTREVISIONI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTREVISIONI</param>
		public void Update(DataTable table)
		{
			Update(table, true);
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTREVISIONI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTREVISIONI</param>
		/// <param name="acceptChanges">true to accept the changes, otherwise false</param>
		public virtual void Update(DataTable table, bool acceptChanges)
		{
			DataRowCollection rows = table.Rows;
			for(int i = rows.Count - 1; i >= 0; i--)
			{
				DataRow row = rows[i];
				switch(row.RowState)
				{
					case DataRowState.Added:
						Insert(MapRow(row));
						if(acceptChanges)
							row.AcceptChanges();
						break;

					case DataRowState.Deleted:
						row.RejectChanges();
						try
						{
							DeleteByPrimaryKey((System.Int32)row["IDOBJ"]);
						}
						finally
						{
							row.Delete();
						}
						if(acceptChanges)
							row.AcceptChanges();
						break;

				case DataRowState.Modified:
					Update(MapRow(row));
					if(acceptChanges)
						row.AcceptChanges();
					break;
				}
			}
		}

		/// <summary>
		/// Deletes from the Database an object GVCTREVISIONI
		/// </summary>
		/// <param name="valore">The object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public bool Delete(GVCTREVISIONI valore)
		{
			return DeleteByPrimaryKey(valore.IDOBJ);
		}

		/// <summary>
		/// Deletes from the Database an object GVCTREVISIONI
		/// </summary>
		/// <param name="iDOBJ">The primary key of the object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool DeleteByPrimaryKey(System.Int32 iDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateDeleteCommand(whereSql))
			{
				AddParameter(cmd, "IDOBJ" , iDOBJ);
				return cmd.ExecuteNonQuery() > 0;
			}
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREVISIONI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>The number of the deleted objects</returns>
		public int Delete(System.String whereSql)
		{
			return CreateDeleteCommand(whereSql).ExecuteNonQuery();
		}

		/// <summary>
		/// Returns an IDbCommand to delete the objects GVCTREVISIONI selected by 
		/// a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteCommand(string whereSql)
		{
			StringBuilder sql = new StringBuilder("DELETE FROM GVCTREVISIONI");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format(" WHERE {0}", whereSql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Deletes all the objects GVCTREVISIONI
		/// </summary>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteAll()
		{
			return Delete("");
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTREVISIONI
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCTREVISIONI</returns>
		protected GVCTREVISIONI[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTREVISIONI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCTREVISIONI</returns>
		protected GVCTREVISIONI[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCTREVISIONI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCTREVISIONI</returns>
		protected virtual GVCTREVISIONI[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int iDOBJColumnIndex = reader.GetOrdinal("IDOBJ");
			int aNNO_REVISIONEColumnIndex = reader.GetOrdinal("ANNO_REVISIONE");
			int iDOBJ_TIPO_REVISIONEColumnIndex = reader.GetOrdinal("IDOBJ_TIPO_REVISIONE");
			int iDOBJ_REGISTROColumnIndex = reader.GetOrdinal("IDOBJ_REGISTRO");
			int dATA_CONCLUSIONEColumnIndex = reader.GetOrdinal("DATA_CONCLUSIONE");
			int dATA_DEPOSITO_RELAZIONEColumnIndex = reader.GetOrdinal("DATA_DEPOSITO_RELAZIONE");
			int nUMERO_DELIBERA_ESAMEColumnIndex = reader.GetOrdinal("NUMERO_DELIBERA_ESAME");
			int dATA_DELIBERA_ESAMEColumnIndex = reader.GetOrdinal("DATA_DELIBERA_ESAME");
			int nUMERO_DETERMINA_ESAMEColumnIndex = reader.GetOrdinal("NUMERO_DETERMINA_ESAME");
			int dATA_DETERMINA_ESAMEColumnIndex = reader.GetOrdinal("DATA_DETERMINA_ESAME");
			int dATA_COMUNICAZIONE_ESITIColumnIndex = reader.GetOrdinal("DATA_COMUNICAZIONE_ESITI");
			int nUMERO_DELIBERA_REVOCAColumnIndex = reader.GetOrdinal("NUMERO_DELIBERA_REVOCA");
			int dATA_DELIBERA_REVOCAColumnIndex = reader.GetOrdinal("DATA_DELIBERA_REVOCA");
			int nUMERO_DETERMINA_REVOCAColumnIndex = reader.GetOrdinal("NUMERO_DETERMINA_REVOCA");
			int dATA_DETERMINA_REVOCAColumnIndex = reader.GetOrdinal("DATA_DETERMINA_REVOCA");
			int oPERATOREULTMODColumnIndex = reader.GetOrdinal("OPERATOREULTMOD");
			int dATAORAULTMODColumnIndex = reader.GetOrdinal("DATAORAULTMOD");
			int iDOBJ_ORGANO_REVISOREColumnIndex = reader.GetOrdinal("IDOBJ_ORGANO_REVISORE");
			int iDOBJ_ESITO_REVISIONEColumnIndex = reader.GetOrdinal("IDOBJ_ESITO_REVISIONE");
			int iDOBJ_LIMITE_COSTOColumnIndex = reader.GetOrdinal("IDOBJ_LIMITE_COSTO");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCTREVISIONI record = new GVCTREVISIONI();
					recordList.Add(record);
					record.IDOBJ = Convert.ToInt32(reader.GetValue(iDOBJColumnIndex));
					record.ANNO_REVISIONE = Convert.ToInt32(reader.GetValue(aNNO_REVISIONEColumnIndex));
					record.IDOBJ_TIPO_REVISIONE = Convert.ToInt32(reader.GetValue(iDOBJ_TIPO_REVISIONEColumnIndex));
					record.IDOBJ_REGISTRO = Convert.ToInt32(reader.GetValue(iDOBJ_REGISTROColumnIndex));
					if(!reader.IsDBNull(dATA_CONCLUSIONEColumnIndex))
						record.DATA_CONCLUSIONE = Convert.ToDateTime(reader.GetValue(dATA_CONCLUSIONEColumnIndex));
					if(!reader.IsDBNull(dATA_DEPOSITO_RELAZIONEColumnIndex))
						record.DATA_DEPOSITO_RELAZIONE = Convert.ToDateTime(reader.GetValue(dATA_DEPOSITO_RELAZIONEColumnIndex));
					if(!reader.IsDBNull(nUMERO_DELIBERA_ESAMEColumnIndex))
						record.NUMERO_DELIBERA_ESAME = Convert.ToString(reader.GetValue(nUMERO_DELIBERA_ESAMEColumnIndex));
					if(!reader.IsDBNull(dATA_DELIBERA_ESAMEColumnIndex))
						record.DATA_DELIBERA_ESAME = Convert.ToDateTime(reader.GetValue(dATA_DELIBERA_ESAMEColumnIndex));
					if(!reader.IsDBNull(nUMERO_DETERMINA_ESAMEColumnIndex))
						record.NUMERO_DETERMINA_ESAME = Convert.ToString(reader.GetValue(nUMERO_DETERMINA_ESAMEColumnIndex));
					if(!reader.IsDBNull(dATA_DETERMINA_ESAMEColumnIndex))
						record.DATA_DETERMINA_ESAME = Convert.ToDateTime(reader.GetValue(dATA_DETERMINA_ESAMEColumnIndex));
					if(!reader.IsDBNull(dATA_COMUNICAZIONE_ESITIColumnIndex))
						record.DATA_COMUNICAZIONE_ESITI = Convert.ToDateTime(reader.GetValue(dATA_COMUNICAZIONE_ESITIColumnIndex));
					if(!reader.IsDBNull(nUMERO_DELIBERA_REVOCAColumnIndex))
						record.NUMERO_DELIBERA_REVOCA = Convert.ToString(reader.GetValue(nUMERO_DELIBERA_REVOCAColumnIndex));
					if(!reader.IsDBNull(dATA_DELIBERA_REVOCAColumnIndex))
						record.DATA_DELIBERA_REVOCA = Convert.ToDateTime(reader.GetValue(dATA_DELIBERA_REVOCAColumnIndex));
					if(!reader.IsDBNull(nUMERO_DETERMINA_REVOCAColumnIndex))
						record.NUMERO_DETERMINA_REVOCA = Convert.ToString(reader.GetValue(nUMERO_DETERMINA_REVOCAColumnIndex));
					if(!reader.IsDBNull(dATA_DETERMINA_REVOCAColumnIndex))
						record.DATA_DETERMINA_REVOCA = Convert.ToDateTime(reader.GetValue(dATA_DETERMINA_REVOCAColumnIndex));
					if(!reader.IsDBNull(oPERATOREULTMODColumnIndex))
						record.OPERATOREULTMOD = Convert.ToString(reader.GetValue(oPERATOREULTMODColumnIndex));
					if(!reader.IsDBNull(dATAORAULTMODColumnIndex))
						record.DATAORAULTMOD = Convert.ToDateTime(reader.GetValue(dATAORAULTMODColumnIndex));
					if(!reader.IsDBNull(iDOBJ_ORGANO_REVISOREColumnIndex))
						record.IDOBJ_ORGANO_REVISORE = Convert.ToInt32(reader.GetValue(iDOBJ_ORGANO_REVISOREColumnIndex));
					if(!reader.IsDBNull(iDOBJ_ESITO_REVISIONEColumnIndex))
						record.IDOBJ_ESITO_REVISIONE = Convert.ToInt32(reader.GetValue(iDOBJ_ESITO_REVISIONEColumnIndex));
					if(!reader.IsDBNull(iDOBJ_LIMITE_COSTOColumnIndex))
						record.IDOBJ_LIMITE_COSTO = Convert.ToInt32(reader.GetValue(iDOBJ_LIMITE_COSTOColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCTREVISIONI[])(recordList.ToArray(typeof(GVCTREVISIONI)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCTREVISIONI</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCTREVISIONI</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTREVISIONI</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCTREVISIONI
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCTREVISIONI</returns>
		protected virtual GVCTREVISIONI MapRow(DataRow row)
		{
			GVCTREVISIONI mappedObject = new GVCTREVISIONI();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "IDOBJ"
			dataColumn = dataTable.Columns["IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ = (System.Int32)row[dataColumn];
			//Campo "ANNO_REVISIONE"
			dataColumn = dataTable.Columns["ANNO_REVISIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.ANNO_REVISIONE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_TIPO_REVISIONE"
			dataColumn = dataTable.Columns["IDOBJ_TIPO_REVISIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_TIPO_REVISIONE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_REGISTRO"
			dataColumn = dataTable.Columns["IDOBJ_REGISTRO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_REGISTRO = (System.Int32)row[dataColumn];
			//Campo "DATA_CONCLUSIONE"
			dataColumn = dataTable.Columns["DATA_CONCLUSIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_CONCLUSIONE = (System.DateTime)row[dataColumn];
			//Campo "DATA_DEPOSITO_RELAZIONE"
			dataColumn = dataTable.Columns["DATA_DEPOSITO_RELAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_DEPOSITO_RELAZIONE = (System.DateTime)row[dataColumn];
			//Campo "NUMERO_DELIBERA_ESAME"
			dataColumn = dataTable.Columns["NUMERO_DELIBERA_ESAME"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_DELIBERA_ESAME = (System.String)row[dataColumn];
			//Campo "DATA_DELIBERA_ESAME"
			dataColumn = dataTable.Columns["DATA_DELIBERA_ESAME"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_DELIBERA_ESAME = (System.DateTime)row[dataColumn];
			//Campo "NUMERO_DETERMINA_ESAME"
			dataColumn = dataTable.Columns["NUMERO_DETERMINA_ESAME"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_DETERMINA_ESAME = (System.String)row[dataColumn];
			//Campo "DATA_DETERMINA_ESAME"
			dataColumn = dataTable.Columns["DATA_DETERMINA_ESAME"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_DETERMINA_ESAME = (System.DateTime)row[dataColumn];
			//Campo "DATA_COMUNICAZIONE_ESITI"
			dataColumn = dataTable.Columns["DATA_COMUNICAZIONE_ESITI"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_COMUNICAZIONE_ESITI = (System.DateTime)row[dataColumn];
			//Campo "NUMERO_DELIBERA_REVOCA"
			dataColumn = dataTable.Columns["NUMERO_DELIBERA_REVOCA"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_DELIBERA_REVOCA = (System.String)row[dataColumn];
			//Campo "DATA_DELIBERA_REVOCA"
			dataColumn = dataTable.Columns["DATA_DELIBERA_REVOCA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_DELIBERA_REVOCA = (System.DateTime)row[dataColumn];
			//Campo "NUMERO_DETERMINA_REVOCA"
			dataColumn = dataTable.Columns["NUMERO_DETERMINA_REVOCA"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_DETERMINA_REVOCA = (System.String)row[dataColumn];
			//Campo "DATA_DETERMINA_REVOCA"
			dataColumn = dataTable.Columns["DATA_DETERMINA_REVOCA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_DETERMINA_REVOCA = (System.DateTime)row[dataColumn];
			//Campo "OPERATOREULTMOD"
			dataColumn = dataTable.Columns["OPERATOREULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.OPERATOREULTMOD = (System.String)row[dataColumn];
			//Campo "DATAORAULTMOD"
			dataColumn = dataTable.Columns["DATAORAULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORAULTMOD = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_ORGANO_REVISORE"
			dataColumn = dataTable.Columns["IDOBJ_ORGANO_REVISORE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_ORGANO_REVISORE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_ESITO_REVISIONE"
			dataColumn = dataTable.Columns["IDOBJ_ESITO_REVISIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_ESITO_REVISIONE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_LIMITE_COSTO"
			dataColumn = dataTable.Columns["IDOBJ_LIMITE_COSTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_LIMITE_COSTO = (System.Int32)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCTREVISIONI
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCTREVISIONI";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = true;
			dataColumn.Unique = true;
			dataColumn.AutoIncrement = true;
			dataColumn = dataTable.Columns.Add("ANNO_REVISIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_TIPO_REVISIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_REGISTRO", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_CONCLUSIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_DEPOSITO_RELAZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_DELIBERA_ESAME", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_DELIBERA_ESAME", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_DETERMINA_ESAME", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_DETERMINA_ESAME", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_COMUNICAZIONE_ESITI", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_DELIBERA_REVOCA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_DELIBERA_REVOCA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_DETERMINA_REVOCA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_DETERMINA_REVOCA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("OPERATOREULTMOD", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORAULTMOD", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_ORGANO_REVISORE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_ESITO_REVISIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_LIMITE_COSTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "ANNO_REVISIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_TIPO_REVISIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_REGISTRO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_CONCLUSIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_DEPOSITO_RELAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NUMERO_DELIBERA_ESAME":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_DELIBERA_ESAME":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NUMERO_DETERMINA_ESAME":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_DETERMINA_ESAME":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_COMUNICAZIONE_ESITI":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NUMERO_DELIBERA_REVOCA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_DELIBERA_REVOCA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NUMERO_DETERMINA_REVOCA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_DETERMINA_REVOCA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "OPERATOREULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORAULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_ORGANO_REVISORE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_ESITO_REVISIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_LIMITE_COSTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
