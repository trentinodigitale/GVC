//
//Generated by gvc at 16/06/2009 17.10.24
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCVRICERCASOGGETTIDAESPORTARE
	/// </summary>
	public partial class GVCVRICERCASOGGETTIDAESPORTARECollection
	{
		/// <summary>
		/// Returns the Database Name of the field R_ID_SOGGETTO.
		///The field is mandatory.
		/// </summary>
		public const string R_ID_SOGGETTOColumnName = "R_ID_SOGGETTO";
		/// <summary>
		/// Returns the Database Name of the field R_ID_TIPO_SOGGETTO.
		/// </summary>
		public const string R_ID_TIPO_SOGGETTOColumnName = "R_ID_TIPO_SOGGETTO";
		/// <summary>
		/// Returns the Database Name of the field R_ASSOCIAZIONE.
		///The field is mandatory.
		/// </summary>
		public const string R_ASSOCIAZIONEColumnName = "R_ASSOCIAZIONE";
		/// <summary>
		/// Returns the Database Name of the field R_NOME.
		/// </summary>
		public const string R_NOMEColumnName = "R_NOME";
		/// <summary>
		/// Returns the Database Name of the field R_COGNOME.
		/// </summary>
		public const string R_COGNOMEColumnName = "R_COGNOME";
		/// <summary>
		/// Returns the Database Name of the field R_DENOMINAZIONE.
		/// </summary>
		public const string R_DENOMINAZIONEColumnName = "R_DENOMINAZIONE";
		/// <summary>
		/// Returns the Database Name of the field R_CODICE_FISCALE.
		/// </summary>
		public const string R_CODICE_FISCALEColumnName = "R_CODICE_FISCALE";
		/// <summary>
		/// Returns the Database Name of the field R_DATA_NASCITA.
		/// </summary>
		public const string R_DATA_NASCITAColumnName = "R_DATA_NASCITA";
		/// <summary>
		/// Returns the Database Name of the field R_LUOGO_NASCITA.
		/// </summary>
		public const string R_LUOGO_NASCITAColumnName = "R_LUOGO_NASCITA";
		/// <summary>
		/// Returns the Database Name of the field R_CODICE_COOPERATIVA.
		/// </summary>
		public const string R_CODICE_COOPERATIVAColumnName = "R_CODICE_COOPERATIVA";
		/// <summary>
		/// Returns the Database Name of the field R_NUMERO_REA.
		/// </summary>
		public const string R_NUMERO_REAColumnName = "R_NUMERO_REA";
		/// <summary>
		/// Returns the Database Name of the field R_ID_OBJ_STATO.
		/// </summary>
		public const string R_ID_OBJ_STATOColumnName = "R_ID_OBJ_STATO";
		/// <summary>
		/// Returns the Database Name of the field R_FLAG_PF.
		///The field is mandatory.
		/// </summary>
		public const string R_FLAG_PFColumnName = "R_FLAG_PF";
		/// <summary>
		/// Returns the Database Name of the field R_PARTITA_IVA.
		/// </summary>
		public const string R_PARTITA_IVAColumnName = "R_PARTITA_IVA";
		/// <summary>
		/// Returns the Database Name of the field R_SESSO.
		/// </summary>
		public const string R_SESSOColumnName = "R_SESSO";
		/// <summary>
		/// Returns the Database Name of the field R_COGNOME_ACQUISITO.
		/// </summary>
		public const string R_COGNOME_ACQUISITOColumnName = "R_COGNOME_ACQUISITO";
		/// <summary>
		/// Returns the Database Name of the field R_STATO_NASCITA.
		/// </summary>
		public const string R_STATO_NASCITAColumnName = "R_STATO_NASCITA";
		/// <summary>
		/// Returns the Database Name of the field R_CITTADINANZA.
		/// </summary>
		public const string R_CITTADINANZAColumnName = "R_CITTADINANZA";
		/// <summary>
		/// Returns the Database Name of the field R_TELEFONO_1.
		/// </summary>
		public const string R_TELEFONO_1ColumnName = "R_TELEFONO_1";
		/// <summary>
		/// Returns the Database Name of the field R_TELEFONO_2.
		/// </summary>
		public const string R_TELEFONO_2ColumnName = "R_TELEFONO_2";
		/// <summary>
		/// Returns the Database Name of the field R_CELLULARE.
		/// </summary>
		public const string R_CELLULAREColumnName = "R_CELLULARE";
		/// <summary>
		/// Returns the Database Name of the field R_EMAIL.
		/// </summary>
		public const string R_EMAILColumnName = "R_EMAIL";
		/// <summary>
		/// Returns the Database Name of the field R_NOTE.
		/// </summary>
		public const string R_NOTEColumnName = "R_NOTE";
		/// <summary>
		/// Returns the Database Name of the field IND_IDOBJ.
		/// </summary>
		public const string IND_IDOBJColumnName = "IND_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field IND_FLAG_PRINCIPALE.
		/// </summary>
		public const string IND_FLAG_PRINCIPALEColumnName = "IND_FLAG_PRINCIPALE";
		/// <summary>
		/// Returns the Database Name of the field IND_FLAG_SEDE.
		/// </summary>
		public const string IND_FLAG_SEDEColumnName = "IND_FLAG_SEDE";
		/// <summary>
		/// Returns the Database Name of the field IND_VIA.
		/// </summary>
		public const string IND_VIAColumnName = "IND_VIA";
		/// <summary>
		/// Returns the Database Name of the field IND_IDOBJ_SOGGETTO.
		/// </summary>
		public const string IND_IDOBJ_SOGGETTOColumnName = "IND_IDOBJ_SOGGETTO";
		/// <summary>
		/// Returns the Database Name of the field IND_IDOBJ_TIPO_INDIRIZZO.
		/// </summary>
		public const string IND_IDOBJ_TIPO_INDIRIZZOColumnName = "IND_IDOBJ_TIPO_INDIRIZZO";
		/// <summary>
		/// Returns the Database Name of the field IND_CIVICO.
		/// </summary>
		public const string IND_CIVICOColumnName = "IND_CIVICO";
		/// <summary>
		/// Returns the Database Name of the field IND_CAP.
		/// </summary>
		public const string IND_CAPColumnName = "IND_CAP";
		/// <summary>
		/// Returns the Database Name of the field IND_PROVINCIA.
		/// </summary>
		public const string IND_PROVINCIAColumnName = "IND_PROVINCIA";
		/// <summary>
		/// Returns the Database Name of the field IND_COMUNE.
		/// </summary>
		public const string IND_COMUNEColumnName = "IND_COMUNE";
		/// <summary>
		/// Returns the Database Name of the field IND_FRAZIONE.
		/// </summary>
		public const string IND_FRAZIONEColumnName = "IND_FRAZIONE";
		/// <summary>
		/// Returns the Database Name of the field IND_STATO.
		/// </summary>
		public const string IND_STATOColumnName = "IND_STATO";
		/// <summary>
		/// Returns the Database Name of the field IND_CODICE_STRADARIO.
		/// </summary>
		public const string IND_CODICE_STRADARIOColumnName = "IND_CODICE_STRADARIO";
		/// <summary>
		/// Returns the Database Name of the field IND_TELEFONO.
		/// </summary>
		public const string IND_TELEFONOColumnName = "IND_TELEFONO";
		/// <summary>
		/// Returns the Database Name of the field IND_FAX.
		/// </summary>
		public const string IND_FAXColumnName = "IND_FAX";
		/// <summary>
		/// Returns the Database Name of the field IND_ALTRO.
		/// </summary>
		public const string IND_ALTROColumnName = "IND_ALTRO";
		/// <summary>
		/// Returns the Database Name of the field IND_NOTE.
		/// </summary>
		public const string IND_NOTEColumnName = "IND_NOTE";
		/// <summary>
		/// Returns the Database Name of the field IND_DATA_INIZIO.
		/// </summary>
		public const string IND_DATA_INIZIOColumnName = "IND_DATA_INIZIO";
		/// <summary>
		/// Returns the Database Name of the field IND_DATA_FINE.
		/// </summary>
		public const string IND_DATA_FINEColumnName = "IND_DATA_FINE";
		/// <summary>
		/// Returns the Database Name of the field IND_EMAIL.
		/// </summary>
		public const string IND_EMAILColumnName = "IND_EMAIL";
		/// <summary>
		/// Returns the Database Name of the field IND_WEBPAGE.
		/// </summary>
		public const string IND_WEBPAGEColumnName = "IND_WEBPAGE";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCVRICERCASOGGETTIDAESPORTARECollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCVRICERCASOGGETTIDAESPORTARE
		/// </summary>
		/// <returns>Array of objects GVCVRICERCASOGGETTIDAESPORTARE</returns>
		public virtual GVCVRICERCASOGGETTIDAESPORTARE[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCVRICERCASOGGETTIDAESPORTARE
		/// </summary>
		/// <returns>DataTable of objects GVCVRICERCASOGGETTIDAESPORTARE</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCVRICERCASOGGETTIDAESPORTARE
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCVRICERCASOGGETTIDAESPORTARE selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCVRICERCASOGGETTIDAESPORTARE</returns>
		public GVCVRICERCASOGGETTIDAESPORTARE GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCVRICERCASOGGETTIDAESPORTARE[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCVRICERCASOGGETTIDAESPORTARE selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCVRICERCASOGGETTIDAESPORTARE</returns>
		public GVCVRICERCASOGGETTIDAESPORTARE[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCVRICERCASOGGETTIDAESPORTARE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCVRICERCASOGGETTIDAESPORTARE</returns>
		public virtual GVCVRICERCASOGGETTIDAESPORTARE[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCASOGGETTIDAESPORTARE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCVRICERCASOGGETTIDAESPORTARE</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCASOGGETTIDAESPORTARE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCASOGGETTIDAESPORTARE</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCVRICERCASOGGETTIDAESPORTARE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("R_ID_SOGGETTO, ");
			sql.Append("R_ID_TIPO_SOGGETTO, ");
			sql.Append("R_ASSOCIAZIONE, ");
			sql.Append("R_NOME, ");
			sql.Append("R_COGNOME, ");
			sql.Append("R_DENOMINAZIONE, ");
			sql.Append("R_CODICE_FISCALE, ");
			sql.Append("R_DATA_NASCITA, ");
			sql.Append("R_LUOGO_NASCITA, ");
			sql.Append("R_CODICE_COOPERATIVA, ");
			sql.Append("R_NUMERO_REA, ");
			sql.Append("R_ID_OBJ_STATO, ");
			sql.Append("R_FLAG_PF, ");
			sql.Append("R_PARTITA_IVA, ");
			sql.Append("R_SESSO, ");
			sql.Append("R_COGNOME_ACQUISITO, ");
			sql.Append("R_STATO_NASCITA, ");
			sql.Append("R_CITTADINANZA, ");
			sql.Append("R_TELEFONO_1, ");
			sql.Append("R_TELEFONO_2, ");
			sql.Append("R_CELLULARE, ");
			sql.Append("R_EMAIL, ");
			sql.Append("R_NOTE, ");
			sql.Append("IND_IDOBJ, ");
			sql.Append("IND_FLAG_PRINCIPALE, ");
			sql.Append("IND_FLAG_SEDE, ");
			sql.Append("IND_VIA, ");
			sql.Append("IND_IDOBJ_SOGGETTO, ");
			sql.Append("IND_IDOBJ_TIPO_INDIRIZZO, ");
			sql.Append("IND_CIVICO, ");
			sql.Append("IND_CAP, ");
			sql.Append("IND_PROVINCIA, ");
			sql.Append("IND_COMUNE, ");
			sql.Append("IND_FRAZIONE, ");
			sql.Append("IND_STATO, ");
			sql.Append("IND_CODICE_STRADARIO, ");
			sql.Append("IND_TELEFONO, ");
			sql.Append("IND_FAX, ");
			sql.Append("IND_ALTRO, ");
			sql.Append("IND_NOTE, ");
			sql.Append("IND_DATA_INIZIO, ");
			sql.Append("IND_DATA_FINE, ");
			sql.Append("IND_EMAIL, ");
			sql.Append("IND_WEBPAGE ");
			sql.Append("FROM GVCVRICERCASOGGETTIDAESPORTARE ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}


		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCASOGGETTIDAESPORTARE
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCVRICERCASOGGETTIDAESPORTARE</returns>
		protected GVCVRICERCASOGGETTIDAESPORTARE[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCASOGGETTIDAESPORTARE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCVRICERCASOGGETTIDAESPORTARE</returns>
		protected GVCVRICERCASOGGETTIDAESPORTARE[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCVRICERCASOGGETTIDAESPORTARE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCVRICERCASOGGETTIDAESPORTARE</returns>
		protected virtual GVCVRICERCASOGGETTIDAESPORTARE[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int r_ID_SOGGETTOColumnIndex = reader.GetOrdinal("R_ID_SOGGETTO");
			int r_ID_TIPO_SOGGETTOColumnIndex = reader.GetOrdinal("R_ID_TIPO_SOGGETTO");
			int r_ASSOCIAZIONEColumnIndex = reader.GetOrdinal("R_ASSOCIAZIONE");
			int r_NOMEColumnIndex = reader.GetOrdinal("R_NOME");
			int r_COGNOMEColumnIndex = reader.GetOrdinal("R_COGNOME");
			int r_DENOMINAZIONEColumnIndex = reader.GetOrdinal("R_DENOMINAZIONE");
			int r_CODICE_FISCALEColumnIndex = reader.GetOrdinal("R_CODICE_FISCALE");
			int r_DATA_NASCITAColumnIndex = reader.GetOrdinal("R_DATA_NASCITA");
			int r_LUOGO_NASCITAColumnIndex = reader.GetOrdinal("R_LUOGO_NASCITA");
			int r_CODICE_COOPERATIVAColumnIndex = reader.GetOrdinal("R_CODICE_COOPERATIVA");
			int r_NUMERO_REAColumnIndex = reader.GetOrdinal("R_NUMERO_REA");
			int r_ID_OBJ_STATOColumnIndex = reader.GetOrdinal("R_ID_OBJ_STATO");
			int r_FLAG_PFColumnIndex = reader.GetOrdinal("R_FLAG_PF");
			int r_PARTITA_IVAColumnIndex = reader.GetOrdinal("R_PARTITA_IVA");
			int r_SESSOColumnIndex = reader.GetOrdinal("R_SESSO");
			int r_COGNOME_ACQUISITOColumnIndex = reader.GetOrdinal("R_COGNOME_ACQUISITO");
			int r_STATO_NASCITAColumnIndex = reader.GetOrdinal("R_STATO_NASCITA");
			int r_CITTADINANZAColumnIndex = reader.GetOrdinal("R_CITTADINANZA");
			int r_TELEFONO_1ColumnIndex = reader.GetOrdinal("R_TELEFONO_1");
			int r_TELEFONO_2ColumnIndex = reader.GetOrdinal("R_TELEFONO_2");
			int r_CELLULAREColumnIndex = reader.GetOrdinal("R_CELLULARE");
			int r_EMAILColumnIndex = reader.GetOrdinal("R_EMAIL");
			int r_NOTEColumnIndex = reader.GetOrdinal("R_NOTE");
			int iND_IDOBJColumnIndex = reader.GetOrdinal("IND_IDOBJ");
			int iND_FLAG_PRINCIPALEColumnIndex = reader.GetOrdinal("IND_FLAG_PRINCIPALE");
			int iND_FLAG_SEDEColumnIndex = reader.GetOrdinal("IND_FLAG_SEDE");
			int iND_VIAColumnIndex = reader.GetOrdinal("IND_VIA");
			int iND_IDOBJ_SOGGETTOColumnIndex = reader.GetOrdinal("IND_IDOBJ_SOGGETTO");
			int iND_IDOBJ_TIPO_INDIRIZZOColumnIndex = reader.GetOrdinal("IND_IDOBJ_TIPO_INDIRIZZO");
			int iND_CIVICOColumnIndex = reader.GetOrdinal("IND_CIVICO");
			int iND_CAPColumnIndex = reader.GetOrdinal("IND_CAP");
			int iND_PROVINCIAColumnIndex = reader.GetOrdinal("IND_PROVINCIA");
			int iND_COMUNEColumnIndex = reader.GetOrdinal("IND_COMUNE");
			int iND_FRAZIONEColumnIndex = reader.GetOrdinal("IND_FRAZIONE");
			int iND_STATOColumnIndex = reader.GetOrdinal("IND_STATO");
			int iND_CODICE_STRADARIOColumnIndex = reader.GetOrdinal("IND_CODICE_STRADARIO");
			int iND_TELEFONOColumnIndex = reader.GetOrdinal("IND_TELEFONO");
			int iND_FAXColumnIndex = reader.GetOrdinal("IND_FAX");
			int iND_ALTROColumnIndex = reader.GetOrdinal("IND_ALTRO");
			int iND_NOTEColumnIndex = reader.GetOrdinal("IND_NOTE");
			int iND_DATA_INIZIOColumnIndex = reader.GetOrdinal("IND_DATA_INIZIO");
			int iND_DATA_FINEColumnIndex = reader.GetOrdinal("IND_DATA_FINE");
			int iND_EMAILColumnIndex = reader.GetOrdinal("IND_EMAIL");
			int iND_WEBPAGEColumnIndex = reader.GetOrdinal("IND_WEBPAGE");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCVRICERCASOGGETTIDAESPORTARE record = new GVCVRICERCASOGGETTIDAESPORTARE();
					recordList.Add(record);
					record.R_ID_SOGGETTO = Convert.ToInt32(reader.GetValue(r_ID_SOGGETTOColumnIndex));
					if(!reader.IsDBNull(r_ID_TIPO_SOGGETTOColumnIndex))
						record.R_ID_TIPO_SOGGETTO = Convert.ToInt32(reader.GetValue(r_ID_TIPO_SOGGETTOColumnIndex));
					record.R_ASSOCIAZIONE = Convert.ToInt32(reader.GetValue(r_ASSOCIAZIONEColumnIndex));
					if(!reader.IsDBNull(r_NOMEColumnIndex))
						record.R_NOME = Convert.ToString(reader.GetValue(r_NOMEColumnIndex));
					if(!reader.IsDBNull(r_COGNOMEColumnIndex))
						record.R_COGNOME = Convert.ToString(reader.GetValue(r_COGNOMEColumnIndex));
					if(!reader.IsDBNull(r_DENOMINAZIONEColumnIndex))
						record.R_DENOMINAZIONE = Convert.ToString(reader.GetValue(r_DENOMINAZIONEColumnIndex));
					if(!reader.IsDBNull(r_CODICE_FISCALEColumnIndex))
						record.R_CODICE_FISCALE = Convert.ToString(reader.GetValue(r_CODICE_FISCALEColumnIndex));
					if(!reader.IsDBNull(r_DATA_NASCITAColumnIndex))
						record.R_DATA_NASCITA = Convert.ToDateTime(reader.GetValue(r_DATA_NASCITAColumnIndex));
					if(!reader.IsDBNull(r_LUOGO_NASCITAColumnIndex))
						record.R_LUOGO_NASCITA = Convert.ToString(reader.GetValue(r_LUOGO_NASCITAColumnIndex));
					if(!reader.IsDBNull(r_CODICE_COOPERATIVAColumnIndex))
						record.R_CODICE_COOPERATIVA = Convert.ToInt32(reader.GetValue(r_CODICE_COOPERATIVAColumnIndex));
					if(!reader.IsDBNull(r_NUMERO_REAColumnIndex))
						record.R_NUMERO_REA = Convert.ToString(reader.GetValue(r_NUMERO_REAColumnIndex));
					if(!reader.IsDBNull(r_ID_OBJ_STATOColumnIndex))
						record.R_ID_OBJ_STATO = Convert.ToInt32(reader.GetValue(r_ID_OBJ_STATOColumnIndex));
					record.R_FLAG_PF = Convert.ToInt32(reader.GetValue(r_FLAG_PFColumnIndex));
					if(!reader.IsDBNull(r_PARTITA_IVAColumnIndex))
						record.R_PARTITA_IVA = Convert.ToString(reader.GetValue(r_PARTITA_IVAColumnIndex));
					if(!reader.IsDBNull(r_SESSOColumnIndex))
						record.R_SESSO = Convert.ToString(reader.GetValue(r_SESSOColumnIndex));
					if(!reader.IsDBNull(r_COGNOME_ACQUISITOColumnIndex))
						record.R_COGNOME_ACQUISITO = Convert.ToString(reader.GetValue(r_COGNOME_ACQUISITOColumnIndex));
					if(!reader.IsDBNull(r_STATO_NASCITAColumnIndex))
						record.R_STATO_NASCITA = Convert.ToString(reader.GetValue(r_STATO_NASCITAColumnIndex));
					if(!reader.IsDBNull(r_CITTADINANZAColumnIndex))
						record.R_CITTADINANZA = Convert.ToString(reader.GetValue(r_CITTADINANZAColumnIndex));
					if(!reader.IsDBNull(r_TELEFONO_1ColumnIndex))
						record.R_TELEFONO_1 = Convert.ToString(reader.GetValue(r_TELEFONO_1ColumnIndex));
					if(!reader.IsDBNull(r_TELEFONO_2ColumnIndex))
						record.R_TELEFONO_2 = Convert.ToString(reader.GetValue(r_TELEFONO_2ColumnIndex));
					if(!reader.IsDBNull(r_CELLULAREColumnIndex))
						record.R_CELLULARE = Convert.ToString(reader.GetValue(r_CELLULAREColumnIndex));
					if(!reader.IsDBNull(r_EMAILColumnIndex))
						record.R_EMAIL = Convert.ToString(reader.GetValue(r_EMAILColumnIndex));
					if(!reader.IsDBNull(r_NOTEColumnIndex))
						record.R_NOTE = Convert.ToString(reader.GetValue(r_NOTEColumnIndex));
					if(!reader.IsDBNull(iND_IDOBJColumnIndex))
						record.IND_IDOBJ = Convert.ToInt32(reader.GetValue(iND_IDOBJColumnIndex));
					if(!reader.IsDBNull(iND_FLAG_PRINCIPALEColumnIndex))
						record.IND_FLAG_PRINCIPALE = Convert.ToInt32(reader.GetValue(iND_FLAG_PRINCIPALEColumnIndex));
					if(!reader.IsDBNull(iND_FLAG_SEDEColumnIndex))
						record.IND_FLAG_SEDE = Convert.ToInt32(reader.GetValue(iND_FLAG_SEDEColumnIndex));
					if(!reader.IsDBNull(iND_VIAColumnIndex))
						record.IND_VIA = Convert.ToString(reader.GetValue(iND_VIAColumnIndex));
					if(!reader.IsDBNull(iND_IDOBJ_SOGGETTOColumnIndex))
						record.IND_IDOBJ_SOGGETTO = Convert.ToInt32(reader.GetValue(iND_IDOBJ_SOGGETTOColumnIndex));
					if(!reader.IsDBNull(iND_IDOBJ_TIPO_INDIRIZZOColumnIndex))
						record.IND_IDOBJ_TIPO_INDIRIZZO = Convert.ToInt32(reader.GetValue(iND_IDOBJ_TIPO_INDIRIZZOColumnIndex));
					if(!reader.IsDBNull(iND_CIVICOColumnIndex))
						record.IND_CIVICO = Convert.ToString(reader.GetValue(iND_CIVICOColumnIndex));
					if(!reader.IsDBNull(iND_CAPColumnIndex))
						record.IND_CAP = Convert.ToString(reader.GetValue(iND_CAPColumnIndex));
					if(!reader.IsDBNull(iND_PROVINCIAColumnIndex))
						record.IND_PROVINCIA = Convert.ToString(reader.GetValue(iND_PROVINCIAColumnIndex));
					if(!reader.IsDBNull(iND_COMUNEColumnIndex))
						record.IND_COMUNE = Convert.ToString(reader.GetValue(iND_COMUNEColumnIndex));
					if(!reader.IsDBNull(iND_FRAZIONEColumnIndex))
						record.IND_FRAZIONE = Convert.ToString(reader.GetValue(iND_FRAZIONEColumnIndex));
					if(!reader.IsDBNull(iND_STATOColumnIndex))
						record.IND_STATO = Convert.ToString(reader.GetValue(iND_STATOColumnIndex));
					if(!reader.IsDBNull(iND_CODICE_STRADARIOColumnIndex))
						record.IND_CODICE_STRADARIO = Convert.ToString(reader.GetValue(iND_CODICE_STRADARIOColumnIndex));
					if(!reader.IsDBNull(iND_TELEFONOColumnIndex))
						record.IND_TELEFONO = Convert.ToString(reader.GetValue(iND_TELEFONOColumnIndex));
					if(!reader.IsDBNull(iND_FAXColumnIndex))
						record.IND_FAX = Convert.ToString(reader.GetValue(iND_FAXColumnIndex));
					if(!reader.IsDBNull(iND_ALTROColumnIndex))
						record.IND_ALTRO = Convert.ToString(reader.GetValue(iND_ALTROColumnIndex));
					if(!reader.IsDBNull(iND_NOTEColumnIndex))
						record.IND_NOTE = Convert.ToString(reader.GetValue(iND_NOTEColumnIndex));
					if(!reader.IsDBNull(iND_DATA_INIZIOColumnIndex))
						record.IND_DATA_INIZIO = Convert.ToDateTime(reader.GetValue(iND_DATA_INIZIOColumnIndex));
					if(!reader.IsDBNull(iND_DATA_FINEColumnIndex))
						record.IND_DATA_FINE = Convert.ToDateTime(reader.GetValue(iND_DATA_FINEColumnIndex));
					if(!reader.IsDBNull(iND_EMAILColumnIndex))
						record.IND_EMAIL = Convert.ToString(reader.GetValue(iND_EMAILColumnIndex));
					if(!reader.IsDBNull(iND_WEBPAGEColumnIndex))
						record.IND_WEBPAGE = Convert.ToString(reader.GetValue(iND_WEBPAGEColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCVRICERCASOGGETTIDAESPORTARE[])(recordList.ToArray(typeof(GVCVRICERCASOGGETTIDAESPORTARE)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCVRICERCASOGGETTIDAESPORTARE</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCVRICERCASOGGETTIDAESPORTARE</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCASOGGETTIDAESPORTARE</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCVRICERCASOGGETTIDAESPORTARE
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCVRICERCASOGGETTIDAESPORTARE</returns>
		protected virtual GVCVRICERCASOGGETTIDAESPORTARE MapRow(DataRow row)
		{
			GVCVRICERCASOGGETTIDAESPORTARE mappedObject = new GVCVRICERCASOGGETTIDAESPORTARE();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "R_ID_SOGGETTO"
			dataColumn = dataTable.Columns["R_ID_SOGGETTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_ID_SOGGETTO = (System.Int32)row[dataColumn];
			//Campo "R_ID_TIPO_SOGGETTO"
			dataColumn = dataTable.Columns["R_ID_TIPO_SOGGETTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_ID_TIPO_SOGGETTO = (System.Int32)row[dataColumn];
			//Campo "R_ASSOCIAZIONE"
			dataColumn = dataTable.Columns["R_ASSOCIAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_ASSOCIAZIONE = (System.Int32)row[dataColumn];
			//Campo "R_NOME"
			dataColumn = dataTable.Columns["R_NOME"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_NOME = (System.String)row[dataColumn];
			//Campo "R_COGNOME"
			dataColumn = dataTable.Columns["R_COGNOME"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_COGNOME = (System.String)row[dataColumn];
			//Campo "R_DENOMINAZIONE"
			dataColumn = dataTable.Columns["R_DENOMINAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_DENOMINAZIONE = (System.String)row[dataColumn];
			//Campo "R_CODICE_FISCALE"
			dataColumn = dataTable.Columns["R_CODICE_FISCALE"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_CODICE_FISCALE = (System.String)row[dataColumn];
			//Campo "R_DATA_NASCITA"
			dataColumn = dataTable.Columns["R_DATA_NASCITA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_DATA_NASCITA = (System.DateTime)row[dataColumn];
			//Campo "R_LUOGO_NASCITA"
			dataColumn = dataTable.Columns["R_LUOGO_NASCITA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_LUOGO_NASCITA = (System.String)row[dataColumn];
			//Campo "R_CODICE_COOPERATIVA"
			dataColumn = dataTable.Columns["R_CODICE_COOPERATIVA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_CODICE_COOPERATIVA = (System.Int32)row[dataColumn];
			//Campo "R_NUMERO_REA"
			dataColumn = dataTable.Columns["R_NUMERO_REA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_NUMERO_REA = (System.String)row[dataColumn];
			//Campo "R_ID_OBJ_STATO"
			dataColumn = dataTable.Columns["R_ID_OBJ_STATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_ID_OBJ_STATO = (System.Int32)row[dataColumn];
			//Campo "R_FLAG_PF"
			dataColumn = dataTable.Columns["R_FLAG_PF"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_FLAG_PF = (System.Int32)row[dataColumn];
			//Campo "R_PARTITA_IVA"
			dataColumn = dataTable.Columns["R_PARTITA_IVA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_PARTITA_IVA = (System.String)row[dataColumn];
			//Campo "R_SESSO"
			dataColumn = dataTable.Columns["R_SESSO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_SESSO = (System.String)row[dataColumn];
			//Campo "R_COGNOME_ACQUISITO"
			dataColumn = dataTable.Columns["R_COGNOME_ACQUISITO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_COGNOME_ACQUISITO = (System.String)row[dataColumn];
			//Campo "R_STATO_NASCITA"
			dataColumn = dataTable.Columns["R_STATO_NASCITA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_STATO_NASCITA = (System.String)row[dataColumn];
			//Campo "R_CITTADINANZA"
			dataColumn = dataTable.Columns["R_CITTADINANZA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_CITTADINANZA = (System.String)row[dataColumn];
			//Campo "R_TELEFONO_1"
			dataColumn = dataTable.Columns["R_TELEFONO_1"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_TELEFONO_1 = (System.String)row[dataColumn];
			//Campo "R_TELEFONO_2"
			dataColumn = dataTable.Columns["R_TELEFONO_2"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_TELEFONO_2 = (System.String)row[dataColumn];
			//Campo "R_CELLULARE"
			dataColumn = dataTable.Columns["R_CELLULARE"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_CELLULARE = (System.String)row[dataColumn];
			//Campo "R_EMAIL"
			dataColumn = dataTable.Columns["R_EMAIL"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_EMAIL = (System.String)row[dataColumn];
			//Campo "R_NOTE"
			dataColumn = dataTable.Columns["R_NOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_NOTE = (System.String)row[dataColumn];
			//Campo "IND_IDOBJ"
			dataColumn = dataTable.Columns["IND_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "IND_FLAG_PRINCIPALE"
			dataColumn = dataTable.Columns["IND_FLAG_PRINCIPALE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_FLAG_PRINCIPALE = (System.Int32)row[dataColumn];
			//Campo "IND_FLAG_SEDE"
			dataColumn = dataTable.Columns["IND_FLAG_SEDE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_FLAG_SEDE = (System.Int32)row[dataColumn];
			//Campo "IND_VIA"
			dataColumn = dataTable.Columns["IND_VIA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_VIA = (System.String)row[dataColumn];
			//Campo "IND_IDOBJ_SOGGETTO"
			dataColumn = dataTable.Columns["IND_IDOBJ_SOGGETTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_IDOBJ_SOGGETTO = (System.Int32)row[dataColumn];
			//Campo "IND_IDOBJ_TIPO_INDIRIZZO"
			dataColumn = dataTable.Columns["IND_IDOBJ_TIPO_INDIRIZZO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_IDOBJ_TIPO_INDIRIZZO = (System.Int32)row[dataColumn];
			//Campo "IND_CIVICO"
			dataColumn = dataTable.Columns["IND_CIVICO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_CIVICO = (System.String)row[dataColumn];
			//Campo "IND_CAP"
			dataColumn = dataTable.Columns["IND_CAP"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_CAP = (System.String)row[dataColumn];
			//Campo "IND_PROVINCIA"
			dataColumn = dataTable.Columns["IND_PROVINCIA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_PROVINCIA = (System.String)row[dataColumn];
			//Campo "IND_COMUNE"
			dataColumn = dataTable.Columns["IND_COMUNE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_COMUNE = (System.String)row[dataColumn];
			//Campo "IND_FRAZIONE"
			dataColumn = dataTable.Columns["IND_FRAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_FRAZIONE = (System.String)row[dataColumn];
			//Campo "IND_STATO"
			dataColumn = dataTable.Columns["IND_STATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_STATO = (System.String)row[dataColumn];
			//Campo "IND_CODICE_STRADARIO"
			dataColumn = dataTable.Columns["IND_CODICE_STRADARIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_CODICE_STRADARIO = (System.String)row[dataColumn];
			//Campo "IND_TELEFONO"
			dataColumn = dataTable.Columns["IND_TELEFONO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_TELEFONO = (System.String)row[dataColumn];
			//Campo "IND_FAX"
			dataColumn = dataTable.Columns["IND_FAX"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_FAX = (System.String)row[dataColumn];
			//Campo "IND_ALTRO"
			dataColumn = dataTable.Columns["IND_ALTRO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_ALTRO = (System.String)row[dataColumn];
			//Campo "IND_NOTE"
			dataColumn = dataTable.Columns["IND_NOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_NOTE = (System.String)row[dataColumn];
			//Campo "IND_DATA_INIZIO"
			dataColumn = dataTable.Columns["IND_DATA_INIZIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_DATA_INIZIO = (System.DateTime)row[dataColumn];
			//Campo "IND_DATA_FINE"
			dataColumn = dataTable.Columns["IND_DATA_FINE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_DATA_FINE = (System.DateTime)row[dataColumn];
			//Campo "IND_EMAIL"
			dataColumn = dataTable.Columns["IND_EMAIL"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_EMAIL = (System.String)row[dataColumn];
			//Campo "IND_WEBPAGE"
			dataColumn = dataTable.Columns["IND_WEBPAGE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_WEBPAGE = (System.String)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCVRICERCASOGGETTIDAESPORTARE
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCVRICERCASOGGETTIDAESPORTARE";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("R_ID_SOGGETTO", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_ID_TIPO_SOGGETTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_ASSOCIAZIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_NOME", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_COGNOME", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_DENOMINAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_CODICE_FISCALE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_DATA_NASCITA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_LUOGO_NASCITA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_CODICE_COOPERATIVA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_NUMERO_REA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_ID_OBJ_STATO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_FLAG_PF", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_PARTITA_IVA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_SESSO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_COGNOME_ACQUISITO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_STATO_NASCITA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_CITTADINANZA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_TELEFONO_1", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_TELEFONO_2", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_CELLULARE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_EMAIL", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_NOTE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_FLAG_PRINCIPALE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_FLAG_SEDE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_VIA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_IDOBJ_SOGGETTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_IDOBJ_TIPO_INDIRIZZO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_CIVICO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_CAP", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_PROVINCIA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_COMUNE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_FRAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_STATO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_CODICE_STRADARIO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_TELEFONO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_FAX", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_ALTRO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_NOTE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_DATA_INIZIO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_DATA_FINE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_EMAIL", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_WEBPAGE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "R_ID_SOGGETTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_ID_TIPO_SOGGETTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_ASSOCIAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_NOME":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_COGNOME":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_DENOMINAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_CODICE_FISCALE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_DATA_NASCITA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "R_LUOGO_NASCITA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_CODICE_COOPERATIVA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_NUMERO_REA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_ID_OBJ_STATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_FLAG_PF":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_PARTITA_IVA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_SESSO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_COGNOME_ACQUISITO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_STATO_NASCITA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_CITTADINANZA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_TELEFONO_1":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_TELEFONO_2":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_CELLULARE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_EMAIL":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_NOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IND_FLAG_PRINCIPALE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IND_FLAG_SEDE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IND_VIA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_IDOBJ_SOGGETTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IND_IDOBJ_TIPO_INDIRIZZO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IND_CIVICO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_CAP":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_PROVINCIA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_COMUNE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_FRAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_STATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_CODICE_STRADARIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_TELEFONO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_FAX":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_ALTRO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_NOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_DATA_INIZIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IND_DATA_FINE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IND_EMAIL":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_WEBPAGE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
