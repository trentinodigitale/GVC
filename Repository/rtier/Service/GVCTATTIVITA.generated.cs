//
//Generated by DELTADATOR\GS0445 at 26/03/2009 9.03.13
//

using System;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Description of GVCTATTIVITA
	/// </summary>
	public partial class GVCTATTIVITA
	{
		private System.Int32 _iDOBJ;
		private System.Int32 _aTTIVITA_CCIAA;
		private System.Int32 _iDOBJ_REGISTRO;
		private System.Int32 _iDOBJ_CODICE_ATECO;
		private System.String _iMPORTANZA;
		private System.Boolean _iMPORTANZANull = true;
		private System.DateTime _dATA_INIZIO;
		private System.Boolean _dATA_INIZIONull = true;
		private System.String _sTATO_ATTIVITA;
		private System.Boolean _sTATO_ATTIVITANull = true;
		private System.String _nOTE;
		private System.Boolean _nOTENull = true;
		private System.String _oPERATOREULTMOD;
		private System.Boolean _oPERATOREULTMODNull = true;
		private System.DateTime _dATAORAULTMOD;
		private System.Boolean _dATAORAULTMODNull = true;

		/// <summary>
		/// Default constructor
		/// </summary>
		public GVCTATTIVITA(){}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ
		{
			get
			{
				return _iDOBJ;
			}
			set
			{
				_iDOBJ = value;
			}
		}

		/// <summary>
		/// 1=viene da infocamere
		/// The field is mandatory.
		/// </summary>
		public System.Int32 ATTIVITA_CCIAA
		{
			get
			{
				return _aTTIVITA_CCIAA;
			}
			set
			{
				_aTTIVITA_CCIAA = value;
			}
		}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ_REGISTRO
		{
			get
			{
				return _iDOBJ_REGISTRO;
			}
			set
			{
				_iDOBJ_REGISTRO = value;
			}
		}

		/// <summary>
		/// Ientificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ_CODICE_ATECO
		{
			get
			{
				return _iDOBJ_CODICE_ATECO;
			}
			set
			{
				_iDOBJ_CODICE_ATECO = value;
			}
		}

		/// <summary>
		/// Importanza
		/// </summary>
		public System.String IMPORTANZA
		{
			get
			{
				if(IsIMPORTANZANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iMPORTANZA;
			}
			set
			{
				_iMPORTANZANull = false;
				_iMPORTANZA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIMPORTANZANull
		{
			get
			{
				return _iMPORTANZANull;
			}
			set
			{
				_iMPORTANZANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String IMPORTANZASafe
		{
			get
			{
				if (IsIMPORTANZANull)
					return System.String.Empty;
				return IMPORTANZA;
			}
		}

		/// <summary>
		/// Data inizio attività
		/// </summary>
		public System.DateTime DATA_INIZIO
		{
			get
			{
				if(IsDATA_INIZIONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_INIZIO;
			}
			set
			{
				_dATA_INIZIONull = false;
				_dATA_INIZIO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_INIZIONull
		{
			get
			{
				return _dATA_INIZIONull;
			}
			set
			{
				_dATA_INIZIONull = value;
			}
		}

		/// <summary>
		/// Stato attività
		/// </summary>
		public System.String STATO_ATTIVITA
		{
			get
			{
				if(IsSTATO_ATTIVITANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _sTATO_ATTIVITA;
			}
			set
			{
				_sTATO_ATTIVITANull = false;
				_sTATO_ATTIVITA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsSTATO_ATTIVITANull
		{
			get
			{
				return _sTATO_ATTIVITANull;
			}
			set
			{
				_sTATO_ATTIVITANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String STATO_ATTIVITASafe
		{
			get
			{
				if (IsSTATO_ATTIVITANull)
					return System.String.Empty;
				return STATO_ATTIVITA;
			}
		}

		/// <summary>
		/// Value of field NOTE
		/// </summary>
		public System.String NOTE
		{
			get
			{
				if(IsNOTENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _nOTE;
			}
			set
			{
				_nOTENull = false;
				_nOTE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsNOTENull
		{
			get
			{
				return _nOTENull;
			}
			set
			{
				_nOTENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String NOTESafe
		{
			get
			{
				if (IsNOTENull)
					return System.String.Empty;
				return NOTE;
			}
		}

		/// <summary>
		/// Value of field OPERATOREULTMOD
		/// </summary>
		public System.String OPERATOREULTMOD
		{
			get
			{
				if(IsOPERATOREULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _oPERATOREULTMOD;
			}
			set
			{
				_oPERATOREULTMODNull = false;
				_oPERATOREULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsOPERATOREULTMODNull
		{
			get
			{
				return _oPERATOREULTMODNull;
			}
			set
			{
				_oPERATOREULTMODNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String OPERATOREULTMODSafe
		{
			get
			{
				if (IsOPERATOREULTMODNull)
					return System.String.Empty;
				return OPERATOREULTMOD;
			}
		}

		/// <summary>
		/// Value of field DATAORAULTMOD
		/// </summary>
		public System.DateTime DATAORAULTMOD
		{
			get
			{
				if(IsDATAORAULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATAORAULTMOD;
			}
			set
			{
				_dATAORAULTMODNull = false;
				_dATAORAULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATAORAULTMODNull
		{
			get
			{
				return _dATAORAULTMODNull;
			}
			set
			{
				_dATAORAULTMODNull = value;
			}
		}

	}
}