//
//Generated by DELTADATOR\GS0445 at 26/03/2009 9.03.13
//

using System;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Description of GVCTBILANCI
	/// </summary>
	public partial class GVCTBILANCI
	{
		private System.Int32 _iDOBJ;
		private System.Int32 _aNNO_RIFERIMENTO;
		private System.Int32 _iDOBJ_REGISTRO;
		private System.Int32 _iDOBJ_TIPO_BILANCIO;
		private System.DateTime _dATA_RIFERIMENTO;
		private System.Boolean _dATA_RIFERIMENTONull = true;
		private System.DateTime _dATA_DEPOSITO_RI;
		private System.Boolean _dATA_DEPOSITO_RINull = true;
		private System.DateTime _dATA_SEGNALAZIONE;
		private System.Boolean _dATA_SEGNALAZIONENull = true;
		private System.Int32 _rEQUISITO_PREVALENZA;
		private System.Boolean _rEQUISITO_PREVALENZANull = true;
		private System.Double _iMPORTO_PERCENTO_UTILI;
		private System.Boolean _iMPORTO_PERCENTO_UTILINull = true;
		private System.Double _iMPORTO_PATRIMONIO;
		private System.Boolean _iMPORTO_PATRIMONIONull = true;
		private System.Int32 _vERIFICA_PAGAMENTO;
		private System.Boolean _vERIFICA_PAGAMENTONull = true;
		private System.String _nOTE;
		private System.Boolean _nOTENull = true;
		private System.String _oPERATOREULTMOD;
		private System.Boolean _oPERATOREULTMODNull = true;
		private System.DateTime _dATAORAULTMOD;
		private System.Boolean _dATAORAULTMODNull = true;

		/// <summary>
		/// Default constructor
		/// </summary>
		public GVCTBILANCI(){}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ
		{
			get
			{
				return _iDOBJ;
			}
			set
			{
				_iDOBJ = value;
			}
		}

		/// <summary>
		/// Anno riferimento filancio
		/// The field is mandatory.
		/// </summary>
		public System.Int32 ANNO_RIFERIMENTO
		{
			get
			{
				return _aNNO_RIFERIMENTO;
			}
			set
			{
				_aNNO_RIFERIMENTO = value;
			}
		}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ_REGISTRO
		{
			get
			{
				return _iDOBJ_REGISTRO;
			}
			set
			{
				_iDOBJ_REGISTRO = value;
			}
		}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ_TIPO_BILANCIO
		{
			get
			{
				return _iDOBJ_TIPO_BILANCIO;
			}
			set
			{
				_iDOBJ_TIPO_BILANCIO = value;
			}
		}

		/// <summary>
		/// Data riferimento bilancio
		/// </summary>
		public System.DateTime DATA_RIFERIMENTO
		{
			get
			{
				if(IsDATA_RIFERIMENTONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_RIFERIMENTO;
			}
			set
			{
				_dATA_RIFERIMENTONull = false;
				_dATA_RIFERIMENTO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_RIFERIMENTONull
		{
			get
			{
				return _dATA_RIFERIMENTONull;
			}
			set
			{
				_dATA_RIFERIMENTONull = value;
			}
		}

		/// <summary>
		/// Data deposito bilancio al RI
		/// </summary>
		public System.DateTime DATA_DEPOSITO_RI
		{
			get
			{
				if(IsDATA_DEPOSITO_RINull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_DEPOSITO_RI;
			}
			set
			{
				_dATA_DEPOSITO_RINull = false;
				_dATA_DEPOSITO_RI = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_DEPOSITO_RINull
		{
			get
			{
				return _dATA_DEPOSITO_RINull;
			}
			set
			{
				_dATA_DEPOSITO_RINull = value;
			}
		}

		/// <summary>
		/// Data segnalazione revisore
		/// </summary>
		public System.DateTime DATA_SEGNALAZIONE
		{
			get
			{
				if(IsDATA_SEGNALAZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_SEGNALAZIONE;
			}
			set
			{
				_dATA_SEGNALAZIONENull = false;
				_dATA_SEGNALAZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_SEGNALAZIONENull
		{
			get
			{
				return _dATA_SEGNALAZIONENull;
			}
			set
			{
				_dATA_SEGNALAZIONENull = value;
			}
		}

		/// <summary>
		/// Requisito prevalenza nel rapporto coi soci
		/// </summary>
		public System.Int32 REQUISITO_PREVALENZA
		{
			get
			{
				if(IsREQUISITO_PREVALENZANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _rEQUISITO_PREVALENZA;
			}
			set
			{
				_rEQUISITO_PREVALENZANull = false;
				_rEQUISITO_PREVALENZA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsREQUISITO_PREVALENZANull
		{
			get
			{
				return _rEQUISITO_PREVALENZANull;
			}
			set
			{
				_rEQUISITO_PREVALENZANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 REQUISITO_PREVALENZASafe
		{
			get
			{
				if (IsREQUISITO_PREVALENZANull)
					return -1;
				return REQUISITO_PREVALENZA;
			}
		}

		/// <summary>
		/// Importo percento utili versato
		/// </summary>
		public System.Double IMPORTO_PERCENTO_UTILI
		{
			get
			{
				if(IsIMPORTO_PERCENTO_UTILINull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iMPORTO_PERCENTO_UTILI;
			}
			set
			{
				_iMPORTO_PERCENTO_UTILINull = false;
				_iMPORTO_PERCENTO_UTILI = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIMPORTO_PERCENTO_UTILINull
		{
			get
			{
				return _iMPORTO_PERCENTO_UTILINull;
			}
			set
			{
				_iMPORTO_PERCENTO_UTILINull = value;
			}
		}

		/// <summary>
		/// Importo patrimonio
		/// </summary>
		public System.Double IMPORTO_PATRIMONIO
		{
			get
			{
				if(IsIMPORTO_PATRIMONIONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iMPORTO_PATRIMONIO;
			}
			set
			{
				_iMPORTO_PATRIMONIONull = false;
				_iMPORTO_PATRIMONIO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIMPORTO_PATRIMONIONull
		{
			get
			{
				return _iMPORTO_PATRIMONIONull;
			}
			set
			{
				_iMPORTO_PATRIMONIONull = value;
			}
		}

		/// <summary>
		/// Flag verifica pagamento si/no
		/// </summary>
		public System.Int32 VERIFICA_PAGAMENTO
		{
			get
			{
				if(IsVERIFICA_PAGAMENTONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _vERIFICA_PAGAMENTO;
			}
			set
			{
				_vERIFICA_PAGAMENTONull = false;
				_vERIFICA_PAGAMENTO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsVERIFICA_PAGAMENTONull
		{
			get
			{
				return _vERIFICA_PAGAMENTONull;
			}
			set
			{
				_vERIFICA_PAGAMENTONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 VERIFICA_PAGAMENTOSafe
		{
			get
			{
				if (IsVERIFICA_PAGAMENTONull)
					return -1;
				return VERIFICA_PAGAMENTO;
			}
		}

		/// <summary>
		/// Note
		/// </summary>
		public System.String NOTE
		{
			get
			{
				if(IsNOTENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _nOTE;
			}
			set
			{
				_nOTENull = false;
				_nOTE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsNOTENull
		{
			get
			{
				return _nOTENull;
			}
			set
			{
				_nOTENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String NOTESafe
		{
			get
			{
				if (IsNOTENull)
					return System.String.Empty;
				return NOTE;
			}
		}

		/// <summary>
		/// Value of field OPERATOREULTMOD
		/// </summary>
		public System.String OPERATOREULTMOD
		{
			get
			{
				if(IsOPERATOREULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _oPERATOREULTMOD;
			}
			set
			{
				_oPERATOREULTMODNull = false;
				_oPERATOREULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsOPERATOREULTMODNull
		{
			get
			{
				return _oPERATOREULTMODNull;
			}
			set
			{
				_oPERATOREULTMODNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String OPERATOREULTMODSafe
		{
			get
			{
				if (IsOPERATOREULTMODNull)
					return System.String.Empty;
				return OPERATOREULTMOD;
			}
		}

		/// <summary>
		/// Value of field DATAORAULTMOD
		/// </summary>
		public System.DateTime DATAORAULTMOD
		{
			get
			{
				if(IsDATAORAULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATAORAULTMOD;
			}
			set
			{
				_dATAORAULTMODNull = false;
				_dATAORAULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATAORAULTMODNull
		{
			get
			{
				return _dATAORAULTMODNull;
			}
			set
			{
				_dATAORAULTMODNull = value;
			}
		}

	}
}