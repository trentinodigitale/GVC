//
//Generated by gvc at 26/03/2009 9.03.14
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCTMODIFICHE_STATUTARIE
	/// </summary>
	public partial class GVCTMODIFICHE_STATUTARIECollection
	{
		/// <summary>
		/// Returns the Database Name of the field IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJColumnName = "IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field DATA_INIZIO.
		/// </summary>
		public const string DATA_INIZIOColumnName = "DATA_INIZIO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_TIPO_MODIFICA.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_TIPO_MODIFICAColumnName = "IDOBJ_TIPO_MODIFICA";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_ASSEMBLEA.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_ASSEMBLEAColumnName = "IDOBJ_ASSEMBLEA";
		/// <summary>
		/// Returns the Database Name of the field VECCHIA_DENOMINAZIONE.
		/// </summary>
		public const string VECCHIA_DENOMINAZIONEColumnName = "VECCHIA_DENOMINAZIONE";
		/// <summary>
		/// Returns the Database Name of the field NUOVA_DENOMINAZIONE.
		/// </summary>
		public const string NUOVA_DENOMINAZIONEColumnName = "NUOVA_DENOMINAZIONE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_VECCHIA_FG.
		/// </summary>
		public const string IDOBJ_VECCHIA_FGColumnName = "IDOBJ_VECCHIA_FG";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_NUOVA_FG.
		/// </summary>
		public const string IDOBJ_NUOVA_FGColumnName = "IDOBJ_NUOVA_FG";
		/// <summary>
		/// Returns the Database Name of the field NUOVA_DURATA.
		/// </summary>
		public const string NUOVA_DURATAColumnName = "NUOVA_DURATA";
		/// <summary>
		/// Returns the Database Name of the field NUOVA_ILLIMITATA.
		/// </summary>
		public const string NUOVA_ILLIMITATAColumnName = "NUOVA_ILLIMITATA";
		/// <summary>
		/// Returns the Database Name of the field VECCHIO_BILANCIO_AL.
		/// </summary>
		public const string VECCHIO_BILANCIO_ALColumnName = "VECCHIO_BILANCIO_AL";
		/// <summary>
		/// Returns the Database Name of the field NUOVO_BILANCIO_AL.
		/// </summary>
		public const string NUOVO_BILANCIO_ALColumnName = "NUOVO_BILANCIO_AL";
		/// <summary>
		/// Returns the Database Name of the field DATA_ATTO_FUSIONE.
		/// </summary>
		public const string DATA_ATTO_FUSIONEColumnName = "DATA_ATTO_FUSIONE";
		/// <summary>
		/// Returns the Database Name of the field DATA_ISCRIZIONE_ATTO.
		/// </summary>
		public const string DATA_ISCRIZIONE_ATTOColumnName = "DATA_ISCRIZIONE_ATTO";
		/// <summary>
		/// Returns the Database Name of the field DATA_EFFICACIA_ATTO.
		/// </summary>
		public const string DATA_EFFICACIA_ATTOColumnName = "DATA_EFFICACIA_ATTO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_VECCHIO_STATO.
		/// </summary>
		public const string IDOBJ_VECCHIO_STATOColumnName = "IDOBJ_VECCHIO_STATO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_NUOVO_STATO.
		/// </summary>
		public const string IDOBJ_NUOVO_STATOColumnName = "IDOBJ_NUOVO_STATO";
		/// <summary>
		/// Returns the Database Name of the field NOTE.
		/// </summary>
		public const string NOTEColumnName = "NOTE";
		/// <summary>
		/// Returns the Database Name of the field OPERATOREULTMOD.
		/// </summary>
		public const string OPERATOREULTMODColumnName = "OPERATOREULTMOD";
		/// <summary>
		/// Returns the Database Name of the field DATAORAULTMOD.
		/// </summary>
		public const string DATAORAULTMODColumnName = "DATAORAULTMOD";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_NOTAIO.
		/// </summary>
		public const string IDOBJ_NOTAIOColumnName = "IDOBJ_NOTAIO";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCTMODIFICHE_STATUTARIECollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <returns>Array of objects GVCTMODIFICHE_STATUTARIE</returns>
		public virtual GVCTMODIFICHE_STATUTARIE[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <returns>DataTable of objects GVCTMODIFICHE_STATUTARIE</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCTMODIFICHE_STATUTARIE selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCTMODIFICHE_STATUTARIE</returns>
		public GVCTMODIFICHE_STATUTARIE GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCTMODIFICHE_STATUTARIE[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCTMODIFICHE_STATUTARIE selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCTMODIFICHE_STATUTARIE</returns>
		public GVCTMODIFICHE_STATUTARIE[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCTMODIFICHE_STATUTARIE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCTMODIFICHE_STATUTARIE</returns>
		public virtual GVCTMODIFICHE_STATUTARIE[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTMODIFICHE_STATUTARIE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCTMODIFICHE_STATUTARIE</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTMODIFICHE_STATUTARIE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTMODIFICHE_STATUTARIE</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCTMODIFICHE_STATUTARIE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("IDOBJ, ");
			sql.Append("DATA_INIZIO, ");
			sql.Append("IDOBJ_TIPO_MODIFICA, ");
			sql.Append("IDOBJ_ASSEMBLEA, ");
			sql.Append("VECCHIA_DENOMINAZIONE, ");
			sql.Append("NUOVA_DENOMINAZIONE, ");
			sql.Append("IDOBJ_VECCHIA_FG, ");
			sql.Append("IDOBJ_NUOVA_FG, ");
			sql.Append("NUOVA_DURATA, ");
			sql.Append("NUOVA_ILLIMITATA, ");
			sql.Append("VECCHIO_BILANCIO_AL, ");
			sql.Append("NUOVO_BILANCIO_AL, ");
			sql.Append("DATA_ATTO_FUSIONE, ");
			sql.Append("DATA_ISCRIZIONE_ATTO, ");
			sql.Append("DATA_EFFICACIA_ATTO, ");
			sql.Append("IDOBJ_VECCHIO_STATO, ");
			sql.Append("IDOBJ_NUOVO_STATO, ");
			sql.Append("NOTE, ");
			sql.Append("OPERATOREULTMOD, ");
			sql.Append("DATAORAULTMOD, ");
			sql.Append("IDOBJ_NOTAIO ");
			sql.Append("FROM GVCTMODIFICHE_STATUTARIE ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Returns an object GVCTMODIFICHE_STATUTARIE selected by a primary key
		/// </summary>
		/// <param name="IDOBJ">The primary key of the object</param>
		/// <returns>Object of type GVCTMODIFICHE_STATUTARIE</returns>
		public virtual GVCTMODIFICHE_STATUTARIE GetByPrimaryKey(System.Int32 IDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateGetCommand(whereSql, null))
			{
				AddParameter(cmd, "IDOBJ", IDOBJ);
				GVCTMODIFICHE_STATUTARIE[] tempArray = MapRecords(cmd);
				return tempArray.Length == 0 ? null : tempArray[0];
			}
		}


		/// <summary>
		/// Returns an object GVCTMODIFICHE_STATUTARIE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_MODIFICA">The foreign key of the object</param>
		/// <returns>Object of type GVCTMODIFICHE_STATUTARIE</returns>
		public virtual GVCTMODIFICHE_STATUTARIE[] GetByIDOBJ_TIPO_MODIFICA(System.Int32 iDOBJ_TIPO_MODIFICA)
		{
			return MapRecords(CreateGetByIDOBJ_TIPO_MODIFICACommand(iDOBJ_TIPO_MODIFICA));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTMODIFICHE_STATUTARIE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_MODIFICA">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_TIPO_MODIFICAAsDataTable(System.Int32 iDOBJ_TIPO_MODIFICA)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_TIPO_MODIFICACommand(iDOBJ_TIPO_MODIFICA));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_MODIFICA">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_TIPO_MODIFICACommand(System.Int32 iDOBJ_TIPO_MODIFICA)
		{
			string whereSql = "IDOBJ_TIPO_MODIFICA = " + _db.CreateSqlParameterName("IDOBJ_TIPO_MODIFICA");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_TIPO_MODIFICA", iDOBJ_TIPO_MODIFICA);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="iDOBJ_TIPO_MODIFICA">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_TIPO_MODIFICA(System.Int32 iDOBJ_TIPO_MODIFICA)
		{
			return CreateDeleteByIDOBJ_TIPO_MODIFICACommand(iDOBJ_TIPO_MODIFICA).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="iDOBJ_TIPO_MODIFICA">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_TIPO_MODIFICACommand(System.Int32 iDOBJ_TIPO_MODIFICA)
		{
			string whereSql = "IDOBJ_TIPO_MODIFICA = " + _db.CreateSqlParameterName("IDOBJ_TIPO_MODIFICA");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_TIPO_MODIFICA", iDOBJ_TIPO_MODIFICA);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTMODIFICHE_STATUTARIE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_ASSEMBLEA">The foreign key of the object</param>
		/// <returns>Object of type GVCTMODIFICHE_STATUTARIE</returns>
		public virtual GVCTMODIFICHE_STATUTARIE[] GetByIDOBJ_ASSEMBLEA(System.Int32 iDOBJ_ASSEMBLEA)
		{
			return MapRecords(CreateGetByIDOBJ_ASSEMBLEACommand(iDOBJ_ASSEMBLEA));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTMODIFICHE_STATUTARIE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_ASSEMBLEA">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_ASSEMBLEAAsDataTable(System.Int32 iDOBJ_ASSEMBLEA)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_ASSEMBLEACommand(iDOBJ_ASSEMBLEA));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_ASSEMBLEA">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_ASSEMBLEACommand(System.Int32 iDOBJ_ASSEMBLEA)
		{
			string whereSql = "IDOBJ_ASSEMBLEA = " + _db.CreateSqlParameterName("IDOBJ_ASSEMBLEA");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_ASSEMBLEA", iDOBJ_ASSEMBLEA);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="iDOBJ_ASSEMBLEA">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_ASSEMBLEA(System.Int32 iDOBJ_ASSEMBLEA)
		{
			return CreateDeleteByIDOBJ_ASSEMBLEACommand(iDOBJ_ASSEMBLEA).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="iDOBJ_ASSEMBLEA">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_ASSEMBLEACommand(System.Int32 iDOBJ_ASSEMBLEA)
		{
			string whereSql = "IDOBJ_ASSEMBLEA = " + _db.CreateSqlParameterName("IDOBJ_ASSEMBLEA");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_ASSEMBLEA", iDOBJ_ASSEMBLEA);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTMODIFICHE_STATUTARIE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_NOTAIO">The foreign key of the object</param>
		/// <returns>Object of type GVCTMODIFICHE_STATUTARIE</returns>
		public virtual GVCTMODIFICHE_STATUTARIE[] GetByIDOBJ_NOTAIO(System.Int32 iDOBJ_NOTAIO)
		{
			return MapRecords(CreateGetByIDOBJ_NOTAIOCommand(iDOBJ_NOTAIO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTMODIFICHE_STATUTARIE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_NOTAIO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_NOTAIOAsDataTable(System.Int32 iDOBJ_NOTAIO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_NOTAIOCommand(iDOBJ_NOTAIO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_NOTAIO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_NOTAIOCommand(System.Int32 iDOBJ_NOTAIO)
		{
			string whereSql = "IDOBJ_NOTAIO = " + _db.CreateSqlParameterName("IDOBJ_NOTAIO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_NOTAIO", iDOBJ_NOTAIO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="iDOBJ_NOTAIO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_NOTAIO(System.Int32 iDOBJ_NOTAIO)
		{
			return CreateDeleteByIDOBJ_NOTAIOCommand(iDOBJ_NOTAIO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="iDOBJ_NOTAIO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_NOTAIOCommand(System.Int32 iDOBJ_NOTAIO)
		{
			string whereSql = "IDOBJ_NOTAIO = " + _db.CreateSqlParameterName("IDOBJ_NOTAIO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_NOTAIO", iDOBJ_NOTAIO);
			return cmd;
		}

		/// <summary>
		/// Inserts in the Database an object GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="valore">The object to insert</param>
		public virtual void Insert(GVCTMODIFICHE_STATUTARIE valore)
		{
			System.Int32 id = -1;
			System.String sqlStr;

			sqlStr = "SELECT GVCTMODIFICHE_STATUTARIE_SEQ.NEXTVAL FROM DUAL";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				id = Convert.ToInt32(cmd.ExecuteScalar());
			}

			sqlStr = "INSERT INTO GVCTMODIFICHE_STATUTARIE (" +
			"IDOBJ, " +
			"DATA_INIZIO, " +
			"IDOBJ_TIPO_MODIFICA, " +
			"IDOBJ_ASSEMBLEA, " +
			"VECCHIA_DENOMINAZIONE, " +
			"NUOVA_DENOMINAZIONE, " +
			"IDOBJ_VECCHIA_FG, " +
			"IDOBJ_NUOVA_FG, " +
			"NUOVA_DURATA, " +
			"NUOVA_ILLIMITATA, " +
			"VECCHIO_BILANCIO_AL, " +
			"NUOVO_BILANCIO_AL, " +
			"DATA_ATTO_FUSIONE, " +
			"DATA_ISCRIZIONE_ATTO, " +
			"DATA_EFFICACIA_ATTO, " +
			"IDOBJ_VECCHIO_STATO, " +
			"IDOBJ_NUOVO_STATO, " +
			"NOTE, " +
			"OPERATOREULTMOD, " +
			"DATAORAULTMOD, " +
			"IDOBJ_NOTAIO) " +
			"VALUES (" + id.ToString() + ", " +
			_db.CreateSqlParameterName("DATA_INIZIO") + ", " +
			_db.CreateSqlParameterName("IDOBJ_TIPO_MODIFICA") + ", " +
			_db.CreateSqlParameterName("IDOBJ_ASSEMBLEA") + ", " +
			_db.CreateSqlParameterName("VECCHIA_DENOMINAZIONE") + ", " +
			_db.CreateSqlParameterName("NUOVA_DENOMINAZIONE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_VECCHIA_FG") + ", " +
			_db.CreateSqlParameterName("IDOBJ_NUOVA_FG") + ", " +
			_db.CreateSqlParameterName("NUOVA_DURATA") + ", " +
			_db.CreateSqlParameterName("NUOVA_ILLIMITATA") + ", " +
			_db.CreateSqlParameterName("VECCHIO_BILANCIO_AL") + ", " +
			_db.CreateSqlParameterName("NUOVO_BILANCIO_AL") + ", " +
			_db.CreateSqlParameterName("DATA_ATTO_FUSIONE") + ", " +
			_db.CreateSqlParameterName("DATA_ISCRIZIONE_ATTO") + ", " +
			_db.CreateSqlParameterName("DATA_EFFICACIA_ATTO") + ", " +
			_db.CreateSqlParameterName("IDOBJ_VECCHIO_STATO") + ", " +
			_db.CreateSqlParameterName("IDOBJ_NUOVO_STATO") + ", " +
			_db.CreateSqlParameterName("NOTE") + ", " +
			_db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
			_db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
			_db.CreateSqlParameterName("IDOBJ_NOTAIO") + ")";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "DATA_INIZIO", valore.IsDATA_INIZIONull ? DBNull.Value : (object)valore.DATA_INIZIO);
				AddParameter(cmd, "IDOBJ_TIPO_MODIFICA", valore.IDOBJ_TIPO_MODIFICA);
				AddParameter(cmd, "IDOBJ_ASSEMBLEA", valore.IDOBJ_ASSEMBLEA);
				AddParameter(cmd, "VECCHIA_DENOMINAZIONE", valore.IsVECCHIA_DENOMINAZIONENull ? DBNull.Value : (object)valore.VECCHIA_DENOMINAZIONE);
				AddParameter(cmd, "NUOVA_DENOMINAZIONE", valore.IsNUOVA_DENOMINAZIONENull ? DBNull.Value : (object)valore.NUOVA_DENOMINAZIONE);
				AddParameter(cmd, "IDOBJ_VECCHIA_FG", valore.IsIDOBJ_VECCHIA_FGNull ? DBNull.Value : (object)valore.IDOBJ_VECCHIA_FG);
				AddParameter(cmd, "IDOBJ_NUOVA_FG", valore.IsIDOBJ_NUOVA_FGNull ? DBNull.Value : (object)valore.IDOBJ_NUOVA_FG);
				AddParameter(cmd, "NUOVA_DURATA", valore.IsNUOVA_DURATANull ? DBNull.Value : (object)valore.NUOVA_DURATA);
				AddParameter(cmd, "NUOVA_ILLIMITATA", valore.IsNUOVA_ILLIMITATANull ? DBNull.Value : (object)valore.NUOVA_ILLIMITATA);
				AddParameter(cmd, "VECCHIO_BILANCIO_AL", valore.IsVECCHIO_BILANCIO_ALNull ? DBNull.Value : (object)valore.VECCHIO_BILANCIO_AL);
				AddParameter(cmd, "NUOVO_BILANCIO_AL", valore.IsNUOVO_BILANCIO_ALNull ? DBNull.Value : (object)valore.NUOVO_BILANCIO_AL);
				AddParameter(cmd, "DATA_ATTO_FUSIONE", valore.IsDATA_ATTO_FUSIONENull ? DBNull.Value : (object)valore.DATA_ATTO_FUSIONE);
				AddParameter(cmd, "DATA_ISCRIZIONE_ATTO", valore.IsDATA_ISCRIZIONE_ATTONull ? DBNull.Value : (object)valore.DATA_ISCRIZIONE_ATTO);
				AddParameter(cmd, "DATA_EFFICACIA_ATTO", valore.IsDATA_EFFICACIA_ATTONull ? DBNull.Value : (object)valore.DATA_EFFICACIA_ATTO);
				AddParameter(cmd, "IDOBJ_VECCHIO_STATO", valore.IsIDOBJ_VECCHIO_STATONull ? DBNull.Value : (object)valore.IDOBJ_VECCHIO_STATO);
				AddParameter(cmd, "IDOBJ_NUOVO_STATO", valore.IsIDOBJ_NUOVO_STATONull ? DBNull.Value : (object)valore.IDOBJ_NUOVO_STATO);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_NOTAIO", valore.IsIDOBJ_NOTAIONull ? DBNull.Value : (object)valore.IDOBJ_NOTAIO);
				cmd.ExecuteScalar();
				valore.IDOBJ = id;
			}
		}

		/// <summary>
		/// Updates in the Database an object GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="valore">The object to update</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool Update(GVCTMODIFICHE_STATUTARIE valore)
		{
			System.String sqlStr = "UPDATE GVCTMODIFICHE_STATUTARIE SET " +
				"DATA_INIZIO = " + _db.CreateSqlParameterName("DATA_INIZIO") + ", " +
				"IDOBJ_TIPO_MODIFICA = " + _db.CreateSqlParameterName("IDOBJ_TIPO_MODIFICA") + ", " +
				"IDOBJ_ASSEMBLEA = " + _db.CreateSqlParameterName("IDOBJ_ASSEMBLEA") + ", " +
				"VECCHIA_DENOMINAZIONE = " + _db.CreateSqlParameterName("VECCHIA_DENOMINAZIONE") + ", " +
				"NUOVA_DENOMINAZIONE = " + _db.CreateSqlParameterName("NUOVA_DENOMINAZIONE") + ", " +
				"IDOBJ_VECCHIA_FG = " + _db.CreateSqlParameterName("IDOBJ_VECCHIA_FG") + ", " +
				"IDOBJ_NUOVA_FG = " + _db.CreateSqlParameterName("IDOBJ_NUOVA_FG") + ", " +
				"NUOVA_DURATA = " + _db.CreateSqlParameterName("NUOVA_DURATA") + ", " +
				"NUOVA_ILLIMITATA = " + _db.CreateSqlParameterName("NUOVA_ILLIMITATA") + ", " +
				"VECCHIO_BILANCIO_AL = " + _db.CreateSqlParameterName("VECCHIO_BILANCIO_AL") + ", " +
				"NUOVO_BILANCIO_AL = " + _db.CreateSqlParameterName("NUOVO_BILANCIO_AL") + ", " +
				"DATA_ATTO_FUSIONE = " + _db.CreateSqlParameterName("DATA_ATTO_FUSIONE") + ", " +
				"DATA_ISCRIZIONE_ATTO = " + _db.CreateSqlParameterName("DATA_ISCRIZIONE_ATTO") + ", " +
				"DATA_EFFICACIA_ATTO = " + _db.CreateSqlParameterName("DATA_EFFICACIA_ATTO") + ", " +
				"IDOBJ_VECCHIO_STATO = " + _db.CreateSqlParameterName("IDOBJ_VECCHIO_STATO") + ", " +
				"IDOBJ_NUOVO_STATO = " + _db.CreateSqlParameterName("IDOBJ_NUOVO_STATO") + ", " +
				"NOTE = " + _db.CreateSqlParameterName("NOTE") + ", " +
				"OPERATOREULTMOD = " + _db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
				"DATAORAULTMOD = " + _db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
				"IDOBJ_NOTAIO = " + _db.CreateSqlParameterName("IDOBJ_NOTAIO") +
				" WHERE " +
				"IDOBJ = " + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ", valore.IDOBJ);
				AddParameter(cmd, "DATA_INIZIO", valore.IsDATA_INIZIONull ? DBNull.Value : (object)valore.DATA_INIZIO);
				AddParameter(cmd, "IDOBJ_TIPO_MODIFICA", valore.IDOBJ_TIPO_MODIFICA);
				AddParameter(cmd, "IDOBJ_ASSEMBLEA", valore.IDOBJ_ASSEMBLEA);
				AddParameter(cmd, "VECCHIA_DENOMINAZIONE", valore.IsVECCHIA_DENOMINAZIONENull ? DBNull.Value : (object)valore.VECCHIA_DENOMINAZIONE);
				AddParameter(cmd, "NUOVA_DENOMINAZIONE", valore.IsNUOVA_DENOMINAZIONENull ? DBNull.Value : (object)valore.NUOVA_DENOMINAZIONE);
				AddParameter(cmd, "IDOBJ_VECCHIA_FG", valore.IsIDOBJ_VECCHIA_FGNull ? DBNull.Value : (object)valore.IDOBJ_VECCHIA_FG);
				AddParameter(cmd, "IDOBJ_NUOVA_FG", valore.IsIDOBJ_NUOVA_FGNull ? DBNull.Value : (object)valore.IDOBJ_NUOVA_FG);
				AddParameter(cmd, "NUOVA_DURATA", valore.IsNUOVA_DURATANull ? DBNull.Value : (object)valore.NUOVA_DURATA);
				AddParameter(cmd, "NUOVA_ILLIMITATA", valore.IsNUOVA_ILLIMITATANull ? DBNull.Value : (object)valore.NUOVA_ILLIMITATA);
				AddParameter(cmd, "VECCHIO_BILANCIO_AL", valore.IsVECCHIO_BILANCIO_ALNull ? DBNull.Value : (object)valore.VECCHIO_BILANCIO_AL);
				AddParameter(cmd, "NUOVO_BILANCIO_AL", valore.IsNUOVO_BILANCIO_ALNull ? DBNull.Value : (object)valore.NUOVO_BILANCIO_AL);
				AddParameter(cmd, "DATA_ATTO_FUSIONE", valore.IsDATA_ATTO_FUSIONENull ? DBNull.Value : (object)valore.DATA_ATTO_FUSIONE);
				AddParameter(cmd, "DATA_ISCRIZIONE_ATTO", valore.IsDATA_ISCRIZIONE_ATTONull ? DBNull.Value : (object)valore.DATA_ISCRIZIONE_ATTO);
				AddParameter(cmd, "DATA_EFFICACIA_ATTO", valore.IsDATA_EFFICACIA_ATTONull ? DBNull.Value : (object)valore.DATA_EFFICACIA_ATTO);
				AddParameter(cmd, "IDOBJ_VECCHIO_STATO", valore.IsIDOBJ_VECCHIO_STATONull ? DBNull.Value : (object)valore.IDOBJ_VECCHIO_STATO);
				AddParameter(cmd, "IDOBJ_NUOVO_STATO", valore.IsIDOBJ_NUOVO_STATONull ? DBNull.Value : (object)valore.IDOBJ_NUOVO_STATO);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_NOTAIO", valore.IsIDOBJ_NOTAIONull ? DBNull.Value : (object)valore.IDOBJ_NOTAIO);
				return cmd.ExecuteNonQuery() != 0;
			}
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTMODIFICHE_STATUTARIE</param>
		public void Update(DataTable table)
		{
			Update(table, true);
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTMODIFICHE_STATUTARIE</param>
		/// <param name="acceptChanges">true to accept the changes, otherwise false</param>
		public virtual void Update(DataTable table, bool acceptChanges)
		{
			DataRowCollection rows = table.Rows;
			for(int i = rows.Count - 1; i >= 0; i--)
			{
				DataRow row = rows[i];
				switch(row.RowState)
				{
					case DataRowState.Added:
						Insert(MapRow(row));
						if(acceptChanges)
							row.AcceptChanges();
						break;

					case DataRowState.Deleted:
						row.RejectChanges();
						try
						{
							DeleteByPrimaryKey((System.Int32)row["IDOBJ"]);
						}
						finally
						{
							row.Delete();
						}
						if(acceptChanges)
							row.AcceptChanges();
						break;

				case DataRowState.Modified:
					Update(MapRow(row));
					if(acceptChanges)
						row.AcceptChanges();
					break;
				}
			}
		}

		/// <summary>
		/// Deletes from the Database an object GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="valore">The object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public bool Delete(GVCTMODIFICHE_STATUTARIE valore)
		{
			return DeleteByPrimaryKey(valore.IDOBJ);
		}

		/// <summary>
		/// Deletes from the Database an object GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="iDOBJ">The primary key of the object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool DeleteByPrimaryKey(System.Int32 iDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateDeleteCommand(whereSql))
			{
				AddParameter(cmd, "IDOBJ" , iDOBJ);
				return cmd.ExecuteNonQuery() > 0;
			}
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTMODIFICHE_STATUTARIE selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>The number of the deleted objects</returns>
		public int Delete(System.String whereSql)
		{
			return CreateDeleteCommand(whereSql).ExecuteNonQuery();
		}

		/// <summary>
		/// Returns an IDbCommand to delete the objects GVCTMODIFICHE_STATUTARIE selected by 
		/// a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteCommand(string whereSql)
		{
			StringBuilder sql = new StringBuilder("DELETE FROM GVCTMODIFICHE_STATUTARIE");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format(" WHERE {0}", whereSql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Deletes all the objects GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteAll()
		{
			return Delete("");
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCTMODIFICHE_STATUTARIE</returns>
		protected GVCTMODIFICHE_STATUTARIE[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCTMODIFICHE_STATUTARIE</returns>
		protected GVCTMODIFICHE_STATUTARIE[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCTMODIFICHE_STATUTARIE</returns>
		protected virtual GVCTMODIFICHE_STATUTARIE[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int iDOBJColumnIndex = reader.GetOrdinal("IDOBJ");
			int dATA_INIZIOColumnIndex = reader.GetOrdinal("DATA_INIZIO");
			int iDOBJ_TIPO_MODIFICAColumnIndex = reader.GetOrdinal("IDOBJ_TIPO_MODIFICA");
			int iDOBJ_ASSEMBLEAColumnIndex = reader.GetOrdinal("IDOBJ_ASSEMBLEA");
			int vECCHIA_DENOMINAZIONEColumnIndex = reader.GetOrdinal("VECCHIA_DENOMINAZIONE");
			int nUOVA_DENOMINAZIONEColumnIndex = reader.GetOrdinal("NUOVA_DENOMINAZIONE");
			int iDOBJ_VECCHIA_FGColumnIndex = reader.GetOrdinal("IDOBJ_VECCHIA_FG");
			int iDOBJ_NUOVA_FGColumnIndex = reader.GetOrdinal("IDOBJ_NUOVA_FG");
			int nUOVA_DURATAColumnIndex = reader.GetOrdinal("NUOVA_DURATA");
			int nUOVA_ILLIMITATAColumnIndex = reader.GetOrdinal("NUOVA_ILLIMITATA");
			int vECCHIO_BILANCIO_ALColumnIndex = reader.GetOrdinal("VECCHIO_BILANCIO_AL");
			int nUOVO_BILANCIO_ALColumnIndex = reader.GetOrdinal("NUOVO_BILANCIO_AL");
			int dATA_ATTO_FUSIONEColumnIndex = reader.GetOrdinal("DATA_ATTO_FUSIONE");
			int dATA_ISCRIZIONE_ATTOColumnIndex = reader.GetOrdinal("DATA_ISCRIZIONE_ATTO");
			int dATA_EFFICACIA_ATTOColumnIndex = reader.GetOrdinal("DATA_EFFICACIA_ATTO");
			int iDOBJ_VECCHIO_STATOColumnIndex = reader.GetOrdinal("IDOBJ_VECCHIO_STATO");
			int iDOBJ_NUOVO_STATOColumnIndex = reader.GetOrdinal("IDOBJ_NUOVO_STATO");
			int nOTEColumnIndex = reader.GetOrdinal("NOTE");
			int oPERATOREULTMODColumnIndex = reader.GetOrdinal("OPERATOREULTMOD");
			int dATAORAULTMODColumnIndex = reader.GetOrdinal("DATAORAULTMOD");
			int iDOBJ_NOTAIOColumnIndex = reader.GetOrdinal("IDOBJ_NOTAIO");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCTMODIFICHE_STATUTARIE record = new GVCTMODIFICHE_STATUTARIE();
					recordList.Add(record);
					record.IDOBJ = Convert.ToInt32(reader.GetValue(iDOBJColumnIndex));
					if(!reader.IsDBNull(dATA_INIZIOColumnIndex))
						record.DATA_INIZIO = Convert.ToDateTime(reader.GetValue(dATA_INIZIOColumnIndex));
					record.IDOBJ_TIPO_MODIFICA = Convert.ToInt32(reader.GetValue(iDOBJ_TIPO_MODIFICAColumnIndex));
					record.IDOBJ_ASSEMBLEA = Convert.ToInt32(reader.GetValue(iDOBJ_ASSEMBLEAColumnIndex));
					if(!reader.IsDBNull(vECCHIA_DENOMINAZIONEColumnIndex))
						record.VECCHIA_DENOMINAZIONE = Convert.ToString(reader.GetValue(vECCHIA_DENOMINAZIONEColumnIndex));
					if(!reader.IsDBNull(nUOVA_DENOMINAZIONEColumnIndex))
						record.NUOVA_DENOMINAZIONE = Convert.ToString(reader.GetValue(nUOVA_DENOMINAZIONEColumnIndex));
					if(!reader.IsDBNull(iDOBJ_VECCHIA_FGColumnIndex))
						record.IDOBJ_VECCHIA_FG = Convert.ToInt32(reader.GetValue(iDOBJ_VECCHIA_FGColumnIndex));
					if(!reader.IsDBNull(iDOBJ_NUOVA_FGColumnIndex))
						record.IDOBJ_NUOVA_FG = Convert.ToInt32(reader.GetValue(iDOBJ_NUOVA_FGColumnIndex));
					if(!reader.IsDBNull(nUOVA_DURATAColumnIndex))
						record.NUOVA_DURATA = Convert.ToDateTime(reader.GetValue(nUOVA_DURATAColumnIndex));
					if(!reader.IsDBNull(nUOVA_ILLIMITATAColumnIndex))
						record.NUOVA_ILLIMITATA = Convert.ToInt32(reader.GetValue(nUOVA_ILLIMITATAColumnIndex));
					if(!reader.IsDBNull(vECCHIO_BILANCIO_ALColumnIndex))
						record.VECCHIO_BILANCIO_AL = Convert.ToDateTime(reader.GetValue(vECCHIO_BILANCIO_ALColumnIndex));
					if(!reader.IsDBNull(nUOVO_BILANCIO_ALColumnIndex))
						record.NUOVO_BILANCIO_AL = Convert.ToDateTime(reader.GetValue(nUOVO_BILANCIO_ALColumnIndex));
					if(!reader.IsDBNull(dATA_ATTO_FUSIONEColumnIndex))
						record.DATA_ATTO_FUSIONE = Convert.ToDateTime(reader.GetValue(dATA_ATTO_FUSIONEColumnIndex));
					if(!reader.IsDBNull(dATA_ISCRIZIONE_ATTOColumnIndex))
						record.DATA_ISCRIZIONE_ATTO = Convert.ToDateTime(reader.GetValue(dATA_ISCRIZIONE_ATTOColumnIndex));
					if(!reader.IsDBNull(dATA_EFFICACIA_ATTOColumnIndex))
						record.DATA_EFFICACIA_ATTO = Convert.ToDateTime(reader.GetValue(dATA_EFFICACIA_ATTOColumnIndex));
					if(!reader.IsDBNull(iDOBJ_VECCHIO_STATOColumnIndex))
						record.IDOBJ_VECCHIO_STATO = Convert.ToInt32(reader.GetValue(iDOBJ_VECCHIO_STATOColumnIndex));
					if(!reader.IsDBNull(iDOBJ_NUOVO_STATOColumnIndex))
						record.IDOBJ_NUOVO_STATO = Convert.ToInt32(reader.GetValue(iDOBJ_NUOVO_STATOColumnIndex));
					if(!reader.IsDBNull(nOTEColumnIndex))
						record.NOTE = Convert.ToString(reader.GetValue(nOTEColumnIndex));
					if(!reader.IsDBNull(oPERATOREULTMODColumnIndex))
						record.OPERATOREULTMOD = Convert.ToString(reader.GetValue(oPERATOREULTMODColumnIndex));
					if(!reader.IsDBNull(dATAORAULTMODColumnIndex))
						record.DATAORAULTMOD = Convert.ToDateTime(reader.GetValue(dATAORAULTMODColumnIndex));
					if(!reader.IsDBNull(iDOBJ_NOTAIOColumnIndex))
						record.IDOBJ_NOTAIO = Convert.ToInt32(reader.GetValue(iDOBJ_NOTAIOColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCTMODIFICHE_STATUTARIE[])(recordList.ToArray(typeof(GVCTMODIFICHE_STATUTARIE)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCTMODIFICHE_STATUTARIE</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCTMODIFICHE_STATUTARIE</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTMODIFICHE_STATUTARIE</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCTMODIFICHE_STATUTARIE</returns>
		protected virtual GVCTMODIFICHE_STATUTARIE MapRow(DataRow row)
		{
			GVCTMODIFICHE_STATUTARIE mappedObject = new GVCTMODIFICHE_STATUTARIE();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "IDOBJ"
			dataColumn = dataTable.Columns["IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ = (System.Int32)row[dataColumn];
			//Campo "DATA_INIZIO"
			dataColumn = dataTable.Columns["DATA_INIZIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_INIZIO = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_TIPO_MODIFICA"
			dataColumn = dataTable.Columns["IDOBJ_TIPO_MODIFICA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_TIPO_MODIFICA = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_ASSEMBLEA"
			dataColumn = dataTable.Columns["IDOBJ_ASSEMBLEA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_ASSEMBLEA = (System.Int32)row[dataColumn];
			//Campo "VECCHIA_DENOMINAZIONE"
			dataColumn = dataTable.Columns["VECCHIA_DENOMINAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.VECCHIA_DENOMINAZIONE = (System.String)row[dataColumn];
			//Campo "NUOVA_DENOMINAZIONE"
			dataColumn = dataTable.Columns["NUOVA_DENOMINAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUOVA_DENOMINAZIONE = (System.String)row[dataColumn];
			//Campo "IDOBJ_VECCHIA_FG"
			dataColumn = dataTable.Columns["IDOBJ_VECCHIA_FG"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_VECCHIA_FG = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_NUOVA_FG"
			dataColumn = dataTable.Columns["IDOBJ_NUOVA_FG"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_NUOVA_FG = (System.Int32)row[dataColumn];
			//Campo "NUOVA_DURATA"
			dataColumn = dataTable.Columns["NUOVA_DURATA"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUOVA_DURATA = (System.DateTime)row[dataColumn];
			//Campo "NUOVA_ILLIMITATA"
			dataColumn = dataTable.Columns["NUOVA_ILLIMITATA"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUOVA_ILLIMITATA = (System.Int32)row[dataColumn];
			//Campo "VECCHIO_BILANCIO_AL"
			dataColumn = dataTable.Columns["VECCHIO_BILANCIO_AL"];
			if(!row.IsNull(dataColumn))
				mappedObject.VECCHIO_BILANCIO_AL = (System.DateTime)row[dataColumn];
			//Campo "NUOVO_BILANCIO_AL"
			dataColumn = dataTable.Columns["NUOVO_BILANCIO_AL"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUOVO_BILANCIO_AL = (System.DateTime)row[dataColumn];
			//Campo "DATA_ATTO_FUSIONE"
			dataColumn = dataTable.Columns["DATA_ATTO_FUSIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_ATTO_FUSIONE = (System.DateTime)row[dataColumn];
			//Campo "DATA_ISCRIZIONE_ATTO"
			dataColumn = dataTable.Columns["DATA_ISCRIZIONE_ATTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_ISCRIZIONE_ATTO = (System.DateTime)row[dataColumn];
			//Campo "DATA_EFFICACIA_ATTO"
			dataColumn = dataTable.Columns["DATA_EFFICACIA_ATTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_EFFICACIA_ATTO = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_VECCHIO_STATO"
			dataColumn = dataTable.Columns["IDOBJ_VECCHIO_STATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_VECCHIO_STATO = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_NUOVO_STATO"
			dataColumn = dataTable.Columns["IDOBJ_NUOVO_STATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_NUOVO_STATO = (System.Int32)row[dataColumn];
			//Campo "NOTE"
			dataColumn = dataTable.Columns["NOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.NOTE = (System.String)row[dataColumn];
			//Campo "OPERATOREULTMOD"
			dataColumn = dataTable.Columns["OPERATOREULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.OPERATOREULTMOD = (System.String)row[dataColumn];
			//Campo "DATAORAULTMOD"
			dataColumn = dataTable.Columns["DATAORAULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORAULTMOD = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_NOTAIO"
			dataColumn = dataTable.Columns["IDOBJ_NOTAIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_NOTAIO = (System.Int32)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCTMODIFICHE_STATUTARIE
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCTMODIFICHE_STATUTARIE";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = true;
			dataColumn.Unique = true;
			dataColumn.AutoIncrement = true;
			dataColumn = dataTable.Columns.Add("DATA_INIZIO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_TIPO_MODIFICA", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_ASSEMBLEA", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("VECCHIA_DENOMINAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUOVA_DENOMINAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_VECCHIA_FG", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_NUOVA_FG", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUOVA_DURATA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUOVA_ILLIMITATA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("VECCHIO_BILANCIO_AL", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUOVO_BILANCIO_AL", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_ATTO_FUSIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_ISCRIZIONE_ATTO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_EFFICACIA_ATTO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_VECCHIO_STATO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_NUOVO_STATO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NOTE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("OPERATOREULTMOD", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORAULTMOD", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_NOTAIO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_INIZIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_TIPO_MODIFICA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_ASSEMBLEA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "VECCHIA_DENOMINAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "NUOVA_DENOMINAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IDOBJ_VECCHIA_FG":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_NUOVA_FG":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "NUOVA_DURATA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NUOVA_ILLIMITATA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "VECCHIO_BILANCIO_AL":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NUOVO_BILANCIO_AL":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_ATTO_FUSIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_ISCRIZIONE_ATTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_EFFICACIA_ATTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_VECCHIO_STATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_NUOVO_STATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "NOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "OPERATOREULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORAULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_NOTAIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
