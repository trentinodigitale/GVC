//
//Generated by DELTADATOR\GS0445 at 17/06/2009 9.25.06
//

using System;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Description of GVCVSEGDAAPPLICARE
	/// </summary>
	public partial class GVCVSEGDAAPPLICARE 
	{
		private System.Int32 _iDOBJ;
		private System.DateTime _dATA_SEGNALAZIONE;
		private System.Int32 _iDOBJ_REGISTRO;
		private System.Int32 _iDOBJ_TIPO_SEGNALAZIONE;
		private System.String _dESCRIZIONE;
		private System.Boolean _dESCRIZIONENull = true;
		private System.Int32 _vISIBILE;
		private System.Boolean _vISIBILENull = true;
		private System.String _oPERATOREULTMOD;
		private System.Boolean _oPERATOREULTMODNull = true;
		private System.DateTime _dATAORAULTMOD;
		private System.Boolean _dATAORAULTMODNull = true;
		private System.Int32 _aPPLICATO;
		private System.Boolean _aPPLICATONull = true;

		/// <summary>
		/// Default constructor
		/// </summary>
		public GVCVSEGDAAPPLICARE(){}

		/// <summary>
		/// Value of field IDOBJ
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ
		{
			get
			{
				return _iDOBJ;
			}
			set
			{
				_iDOBJ = value;
			}
		}

		/// <summary>
		/// Value of field DATA_SEGNALAZIONE
		/// The field is mandatory.
		/// </summary>
		public System.DateTime DATA_SEGNALAZIONE
		{
			get
			{
				return _dATA_SEGNALAZIONE;
			}
			set
			{
				_dATA_SEGNALAZIONE = value;
			}
		}

		/// <summary>
		/// Value of field IDOBJ_REGISTRO
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ_REGISTRO
		{
			get
			{
				return _iDOBJ_REGISTRO;
			}
			set
			{
				_iDOBJ_REGISTRO = value;
			}
		}

		/// <summary>
		/// Value of field IDOBJ_TIPO_SEGNALAZIONE
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ_TIPO_SEGNALAZIONE
		{
			get
			{
				return _iDOBJ_TIPO_SEGNALAZIONE;
			}
			set
			{
				_iDOBJ_TIPO_SEGNALAZIONE = value;
			}
		}

		/// <summary>
		/// Value of field DESCRIZIONE
		/// </summary>
		public System.String DESCRIZIONE
		{
			get
			{
				if(IsDESCRIZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dESCRIZIONE;
			}
			set
			{
				_dESCRIZIONENull = false;
				_dESCRIZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDESCRIZIONENull
		{
			get
			{
				return _dESCRIZIONENull;
			}
			set
			{
				_dESCRIZIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String DESCRIZIONESafe
		{
			get
			{
				if (IsDESCRIZIONENull)
					return System.String.Empty;
				return DESCRIZIONE;
			}
		}

		/// <summary>
		/// Value of field VISIBILE
		/// </summary>
		public System.Int32 VISIBILE
		{
			get
			{
				if(IsVISIBILENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _vISIBILE;
			}
			set
			{
				_vISIBILENull = false;
				_vISIBILE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsVISIBILENull
		{
			get
			{
				return _vISIBILENull;
			}
			set
			{
				_vISIBILENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 VISIBILESafe
		{
			get
			{
				if (IsVISIBILENull)
					return -1;
				return VISIBILE;
			}
		}

		/// <summary>
		/// Value of field OPERATOREULTMOD
		/// </summary>
		public System.String OPERATOREULTMOD
		{
			get
			{
				if(IsOPERATOREULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _oPERATOREULTMOD;
			}
			set
			{
				_oPERATOREULTMODNull = false;
				_oPERATOREULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsOPERATOREULTMODNull
		{
			get
			{
				return _oPERATOREULTMODNull;
			}
			set
			{
				_oPERATOREULTMODNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String OPERATOREULTMODSafe
		{
			get
			{
				if (IsOPERATOREULTMODNull)
					return System.String.Empty;
				return OPERATOREULTMOD;
			}
		}

		/// <summary>
		/// Value of field DATAORAULTMOD
		/// </summary>
		public System.DateTime DATAORAULTMOD
		{
			get
			{
				if(IsDATAORAULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATAORAULTMOD;
			}
			set
			{
				_dATAORAULTMODNull = false;
				_dATAORAULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATAORAULTMODNull
		{
			get
			{
				return _dATAORAULTMODNull;
			}
			set
			{
				_dATAORAULTMODNull = value;
			}
		}

		/// <summary>
		/// Value of field APPLICATO
		/// </summary>
		public System.Int32 APPLICATO
		{
			get
			{
				if(IsAPPLICATONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _aPPLICATO;
			}
			set
			{
				_aPPLICATONull = false;
				_aPPLICATO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsAPPLICATONull
		{
			get
			{
				return _aPPLICATONull;
			}
			set
			{
				_aPPLICATONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 APPLICATOSafe
		{
			get
			{
				if (IsAPPLICATONull)
					return -1;
				return APPLICATO;
			}
		}

	}
}