//
//Generated by gvc at 26/03/2009 9.03.14
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCTREGISTRI
	/// </summary>
	public partial class GVCTREGISTRICollection
	{
		/// <summary>
		/// Returns the Database Name of the field IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJColumnName = "IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_SOGGETTO.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_SOGGETTOColumnName = "IDOBJ_SOGGETTO";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_REA.
		/// </summary>
		public const string NUMERO_REAColumnName = "NUMERO_REA";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_RI.
		/// </summary>
		public const string NUMERO_RIColumnName = "NUMERO_RI";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_ALBO.
		/// </summary>
		public const string NUMERO_ALBOColumnName = "NUMERO_ALBO";
		/// <summary>
		/// Returns the Database Name of the field FORMA_GIURIDICA_CCIAA.
		/// </summary>
		public const string FORMA_GIURIDICA_CCIAAColumnName = "FORMA_GIURIDICA_CCIAA";
		/// <summary>
		/// Returns the Database Name of the field DATA_COSTITUZIONE.
		/// </summary>
		public const string DATA_COSTITUZIONEColumnName = "DATA_COSTITUZIONE";
		/// <summary>
		/// Returns the Database Name of the field DURATA.
		/// </summary>
		public const string DURATAColumnName = "DURATA";
		/// <summary>
		/// Returns the Database Name of the field DURATA_ILLIMITATA.
		/// </summary>
		public const string DURATA_ILLIMITATAColumnName = "DURATA_ILLIMITATA";
		/// <summary>
		/// Returns the Database Name of the field BILANCIO_ESERCIZIO_AL.
		/// </summary>
		public const string BILANCIO_ESERCIZIO_ALColumnName = "BILANCIO_ESERCIZIO_AL";
		/// <summary>
		/// Returns the Database Name of the field GRUPPO_PARITETICO.
		/// </summary>
		public const string GRUPPO_PARITETICOColumnName = "GRUPPO_PARITETICO";
		/// <summary>
		/// Returns the Database Name of the field DATA_BFL.
		/// </summary>
		public const string DATA_BFLColumnName = "DATA_BFL";
		/// <summary>
		/// Returns the Database Name of the field DATA_DEPOSITO_BFL.
		/// </summary>
		public const string DATA_DEPOSITO_BFLColumnName = "DATA_DEPOSITO_BFL";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_SCIOGLIMENTO.
		/// </summary>
		public const string NUMERO_SCIOGLIMENTOColumnName = "NUMERO_SCIOGLIMENTO";
		/// <summary>
		/// Returns the Database Name of the field ESENTE_VERSAMENTO_UTILI.
		/// </summary>
		public const string ESENTE_VERSAMENTO_UTILIColumnName = "ESENTE_VERSAMENTO_UTILI";
		/// <summary>
		/// Returns the Database Name of the field IMPORTO_VERSAMENTO.
		/// </summary>
		public const string IMPORTO_VERSAMENTOColumnName = "IMPORTO_VERSAMENTO";
		/// <summary>
		/// Returns the Database Name of the field CODICE_OPERATORE.
		/// </summary>
		public const string CODICE_OPERATOREColumnName = "CODICE_OPERATORE";
		/// <summary>
		/// Returns the Database Name of the field CODICE_UFFICIO.
		/// </summary>
		public const string CODICE_UFFICIOColumnName = "CODICE_UFFICIO";
		/// <summary>
		/// Returns the Database Name of the field OPERATOREULTMOD.
		/// </summary>
		public const string OPERATOREULTMODColumnName = "OPERATOREULTMOD";
		/// <summary>
		/// Returns the Database Name of the field DATAORAULTMOD.
		/// </summary>
		public const string DATAORAULTMODColumnName = "DATAORAULTMOD";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_STATO.
		/// </summary>
		public const string IDOBJ_STATOColumnName = "IDOBJ_STATO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_TIPO_COSTITUZIONE.
		/// </summary>
		public const string IDOBJ_TIPO_COSTITUZIONEColumnName = "IDOBJ_TIPO_COSTITUZIONE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_NOTAIO.
		/// </summary>
		public const string IDOBJ_NOTAIOColumnName = "IDOBJ_NOTAIO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_FORMA_AMMINISTRATIVA.
		/// </summary>
		public const string IDOBJ_FORMA_AMMINISTRATIVAColumnName = "IDOBJ_FORMA_AMMINISTRATIVA";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_FORMA_GIURIDICA.
		/// </summary>
		public const string IDOBJ_FORMA_GIURIDICAColumnName = "IDOBJ_FORMA_GIURIDICA";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_CADENZA_REVISIONE.
		/// </summary>
		public const string IDOBJ_CADENZA_REVISIONEColumnName = "IDOBJ_CADENZA_REVISIONE";
		/// <summary>
		/// Returns the Database Name of the field CODICE_COOPERATIVA.
		/// </summary>
		public const string CODICE_COOPERATIVAColumnName = "CODICE_COOPERATIVA";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_REPERTORIO_NOTAIO.
		/// </summary>
		public const string NUMERO_REPERTORIO_NOTAIOColumnName = "NUMERO_REPERTORIO_NOTAIO";
		/// <summary>
		/// Returns the Database Name of the field FORMA_AMM_CCIAA.
		/// </summary>
		public const string FORMA_AMM_CCIAAColumnName = "FORMA_AMM_CCIAA";
		/// <summary>
		/// Returns the Database Name of the field DATA_ACQUISIZIONE_ATTO.
		/// </summary>
		public const string DATA_ACQUISIZIONE_ATTOColumnName = "DATA_ACQUISIZIONE_ATTO";
		/// <summary>
		/// Returns the Database Name of the field DATA_DEPOSITO_ATTO.
		/// </summary>
		public const string DATA_DEPOSITO_ATTOColumnName = "DATA_DEPOSITO_ATTO";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_ESAME.
		/// </summary>
		public const string NUMERO_ESAMEColumnName = "NUMERO_ESAME";
		/// <summary>
		/// Returns the Database Name of the field DATA_ESAME.
		/// </summary>
		public const string DATA_ESAMEColumnName = "DATA_ESAME";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCTREGISTRICollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCTREGISTRI
		/// </summary>
		/// <returns>Array of objects GVCTREGISTRI</returns>
		public virtual GVCTREGISTRI[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCTREGISTRI
		/// </summary>
		/// <returns>DataTable of objects GVCTREGISTRI</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCTREGISTRI
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCTREGISTRI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCTREGISTRI</returns>
		public GVCTREGISTRI GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCTREGISTRI[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCTREGISTRI selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCTREGISTRI</returns>
		public GVCTREGISTRI[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCTREGISTRI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCTREGISTRI</returns>
		public virtual GVCTREGISTRI[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTREGISTRI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCTREGISTRI</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTREGISTRI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTREGISTRI</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCTREGISTRI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("IDOBJ, ");
			sql.Append("IDOBJ_SOGGETTO, ");
			sql.Append("NUMERO_REA, ");
			sql.Append("NUMERO_RI, ");
			sql.Append("NUMERO_ALBO, ");
			sql.Append("FORMA_GIURIDICA_CCIAA, ");
			sql.Append("DATA_COSTITUZIONE, ");
			sql.Append("DURATA, ");
			sql.Append("DURATA_ILLIMITATA, ");
			sql.Append("BILANCIO_ESERCIZIO_AL, ");
			sql.Append("GRUPPO_PARITETICO, ");
			sql.Append("DATA_BFL, ");
			sql.Append("DATA_DEPOSITO_BFL, ");
			sql.Append("NUMERO_SCIOGLIMENTO, ");
			sql.Append("ESENTE_VERSAMENTO_UTILI, ");
			sql.Append("IMPORTO_VERSAMENTO, ");
			sql.Append("CODICE_OPERATORE, ");
			sql.Append("CODICE_UFFICIO, ");
			sql.Append("OPERATOREULTMOD, ");
			sql.Append("DATAORAULTMOD, ");
			sql.Append("IDOBJ_STATO, ");
			sql.Append("IDOBJ_TIPO_COSTITUZIONE, ");
			sql.Append("IDOBJ_NOTAIO, ");
			sql.Append("IDOBJ_FORMA_AMMINISTRATIVA, ");
			sql.Append("IDOBJ_FORMA_GIURIDICA, ");
			sql.Append("IDOBJ_CADENZA_REVISIONE, ");
			sql.Append("CODICE_COOPERATIVA, ");
			sql.Append("NUMERO_REPERTORIO_NOTAIO, ");
			sql.Append("FORMA_AMM_CCIAA, ");
			sql.Append("DATA_ACQUISIZIONE_ATTO, ");
			sql.Append("DATA_DEPOSITO_ATTO, ");
			sql.Append("NUMERO_ESAME, ");
			sql.Append("DATA_ESAME ");
			sql.Append("FROM GVCTREGISTRI ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Returns an object GVCTREGISTRI selected by a primary key
		/// </summary>
		/// <param name="IDOBJ">The primary key of the object</param>
		/// <returns>Object of type GVCTREGISTRI</returns>
		public virtual GVCTREGISTRI GetByPrimaryKey(System.Int32 IDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateGetCommand(whereSql, null))
			{
				AddParameter(cmd, "IDOBJ", IDOBJ);
				GVCTREGISTRI[] tempArray = MapRecords(cmd);
				return tempArray.Length == 0 ? null : tempArray[0];
			}
		}


		/// <summary>
		/// Returns an object GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_CADENZA_REVISIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTREGISTRI</returns>
		public virtual GVCTREGISTRI[] GetByIDOBJ_CADENZA_REVISIONE(System.Int32 iDOBJ_CADENZA_REVISIONE)
		{
			return MapRecords(CreateGetByIDOBJ_CADENZA_REVISIONECommand(iDOBJ_CADENZA_REVISIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_CADENZA_REVISIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_CADENZA_REVISIONEAsDataTable(System.Int32 iDOBJ_CADENZA_REVISIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_CADENZA_REVISIONECommand(iDOBJ_CADENZA_REVISIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_CADENZA_REVISIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_CADENZA_REVISIONECommand(System.Int32 iDOBJ_CADENZA_REVISIONE)
		{
			string whereSql = "IDOBJ_CADENZA_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_CADENZA_REVISIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_CADENZA_REVISIONE", iDOBJ_CADENZA_REVISIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_CADENZA_REVISIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_CADENZA_REVISIONE(System.Int32 iDOBJ_CADENZA_REVISIONE)
		{
			return CreateDeleteByIDOBJ_CADENZA_REVISIONECommand(iDOBJ_CADENZA_REVISIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_CADENZA_REVISIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_CADENZA_REVISIONECommand(System.Int32 iDOBJ_CADENZA_REVISIONE)
		{
			string whereSql = "IDOBJ_CADENZA_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_CADENZA_REVISIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_CADENZA_REVISIONE", iDOBJ_CADENZA_REVISIONE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_FORMA_AMMINISTRATIVA">The foreign key of the object</param>
		/// <returns>Object of type GVCTREGISTRI</returns>
		public virtual GVCTREGISTRI[] GetByIDOBJ_FORMA_AMMINISTRATIVA(System.Int32 iDOBJ_FORMA_AMMINISTRATIVA)
		{
			return MapRecords(CreateGetByIDOBJ_FORMA_AMMINISTRATIVACommand(iDOBJ_FORMA_AMMINISTRATIVA));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_FORMA_AMMINISTRATIVA">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_FORMA_AMMINISTRATIVAAsDataTable(System.Int32 iDOBJ_FORMA_AMMINISTRATIVA)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_FORMA_AMMINISTRATIVACommand(iDOBJ_FORMA_AMMINISTRATIVA));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_FORMA_AMMINISTRATIVA">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_FORMA_AMMINISTRATIVACommand(System.Int32 iDOBJ_FORMA_AMMINISTRATIVA)
		{
			string whereSql = "IDOBJ_FORMA_AMMINISTRATIVA = " + _db.CreateSqlParameterName("IDOBJ_FORMA_AMMINISTRATIVA");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_FORMA_AMMINISTRATIVA", iDOBJ_FORMA_AMMINISTRATIVA);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_FORMA_AMMINISTRATIVA">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_FORMA_AMMINISTRATIVA(System.Int32 iDOBJ_FORMA_AMMINISTRATIVA)
		{
			return CreateDeleteByIDOBJ_FORMA_AMMINISTRATIVACommand(iDOBJ_FORMA_AMMINISTRATIVA).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_FORMA_AMMINISTRATIVA">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_FORMA_AMMINISTRATIVACommand(System.Int32 iDOBJ_FORMA_AMMINISTRATIVA)
		{
			string whereSql = "IDOBJ_FORMA_AMMINISTRATIVA = " + _db.CreateSqlParameterName("IDOBJ_FORMA_AMMINISTRATIVA");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_FORMA_AMMINISTRATIVA", iDOBJ_FORMA_AMMINISTRATIVA);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_FORMA_GIURIDICA">The foreign key of the object</param>
		/// <returns>Object of type GVCTREGISTRI</returns>
		public virtual GVCTREGISTRI[] GetByIDOBJ_FORMA_GIURIDICA(System.Int32 iDOBJ_FORMA_GIURIDICA)
		{
			return MapRecords(CreateGetByIDOBJ_FORMA_GIURIDICACommand(iDOBJ_FORMA_GIURIDICA));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_FORMA_GIURIDICA">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_FORMA_GIURIDICAAsDataTable(System.Int32 iDOBJ_FORMA_GIURIDICA)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_FORMA_GIURIDICACommand(iDOBJ_FORMA_GIURIDICA));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_FORMA_GIURIDICA">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_FORMA_GIURIDICACommand(System.Int32 iDOBJ_FORMA_GIURIDICA)
		{
			string whereSql = "IDOBJ_FORMA_GIURIDICA = " + _db.CreateSqlParameterName("IDOBJ_FORMA_GIURIDICA");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_FORMA_GIURIDICA", iDOBJ_FORMA_GIURIDICA);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_FORMA_GIURIDICA">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_FORMA_GIURIDICA(System.Int32 iDOBJ_FORMA_GIURIDICA)
		{
			return CreateDeleteByIDOBJ_FORMA_GIURIDICACommand(iDOBJ_FORMA_GIURIDICA).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_FORMA_GIURIDICA">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_FORMA_GIURIDICACommand(System.Int32 iDOBJ_FORMA_GIURIDICA)
		{
			string whereSql = "IDOBJ_FORMA_GIURIDICA = " + _db.CreateSqlParameterName("IDOBJ_FORMA_GIURIDICA");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_FORMA_GIURIDICA", iDOBJ_FORMA_GIURIDICA);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_STATO">The foreign key of the object</param>
		/// <returns>Object of type GVCTREGISTRI</returns>
		public virtual GVCTREGISTRI[] GetByIDOBJ_STATO(System.Int32 iDOBJ_STATO)
		{
			return MapRecords(CreateGetByIDOBJ_STATOCommand(iDOBJ_STATO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_STATO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_STATOAsDataTable(System.Int32 iDOBJ_STATO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_STATOCommand(iDOBJ_STATO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_STATO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_STATOCommand(System.Int32 iDOBJ_STATO)
		{
			string whereSql = "IDOBJ_STATO = " + _db.CreateSqlParameterName("IDOBJ_STATO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_STATO", iDOBJ_STATO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_STATO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_STATO(System.Int32 iDOBJ_STATO)
		{
			return CreateDeleteByIDOBJ_STATOCommand(iDOBJ_STATO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_STATO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_STATOCommand(System.Int32 iDOBJ_STATO)
		{
			string whereSql = "IDOBJ_STATO = " + _db.CreateSqlParameterName("IDOBJ_STATO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_STATO", iDOBJ_STATO);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_COSTITUZIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTREGISTRI</returns>
		public virtual GVCTREGISTRI[] GetByIDOBJ_TIPO_COSTITUZIONE(System.Int32 iDOBJ_TIPO_COSTITUZIONE)
		{
			return MapRecords(CreateGetByIDOBJ_TIPO_COSTITUZIONECommand(iDOBJ_TIPO_COSTITUZIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_COSTITUZIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_TIPO_COSTITUZIONEAsDataTable(System.Int32 iDOBJ_TIPO_COSTITUZIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_TIPO_COSTITUZIONECommand(iDOBJ_TIPO_COSTITUZIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_COSTITUZIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_TIPO_COSTITUZIONECommand(System.Int32 iDOBJ_TIPO_COSTITUZIONE)
		{
			string whereSql = "IDOBJ_TIPO_COSTITUZIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_COSTITUZIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_TIPO_COSTITUZIONE", iDOBJ_TIPO_COSTITUZIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_TIPO_COSTITUZIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_TIPO_COSTITUZIONE(System.Int32 iDOBJ_TIPO_COSTITUZIONE)
		{
			return CreateDeleteByIDOBJ_TIPO_COSTITUZIONECommand(iDOBJ_TIPO_COSTITUZIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_TIPO_COSTITUZIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_TIPO_COSTITUZIONECommand(System.Int32 iDOBJ_TIPO_COSTITUZIONE)
		{
			string whereSql = "IDOBJ_TIPO_COSTITUZIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_COSTITUZIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_TIPO_COSTITUZIONE", iDOBJ_TIPO_COSTITUZIONE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_NOTAIO">The foreign key of the object</param>
		/// <returns>Object of type GVCTREGISTRI</returns>
		public virtual GVCTREGISTRI[] GetByIDOBJ_NOTAIO(System.Int32 iDOBJ_NOTAIO)
		{
			return MapRecords(CreateGetByIDOBJ_NOTAIOCommand(iDOBJ_NOTAIO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_NOTAIO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_NOTAIOAsDataTable(System.Int32 iDOBJ_NOTAIO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_NOTAIOCommand(iDOBJ_NOTAIO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_NOTAIO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_NOTAIOCommand(System.Int32 iDOBJ_NOTAIO)
		{
			string whereSql = "IDOBJ_NOTAIO = " + _db.CreateSqlParameterName("IDOBJ_NOTAIO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_NOTAIO", iDOBJ_NOTAIO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_NOTAIO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_NOTAIO(System.Int32 iDOBJ_NOTAIO)
		{
			return CreateDeleteByIDOBJ_NOTAIOCommand(iDOBJ_NOTAIO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_NOTAIO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_NOTAIOCommand(System.Int32 iDOBJ_NOTAIO)
		{
			string whereSql = "IDOBJ_NOTAIO = " + _db.CreateSqlParameterName("IDOBJ_NOTAIO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_NOTAIO", iDOBJ_NOTAIO);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key of the object</param>
		/// <returns>Object of type GVCTREGISTRI</returns>
		public virtual GVCTREGISTRI[] GetByIDOBJ_SOGGETTO(System.Int32 iDOBJ_SOGGETTO)
		{
			return MapRecords(CreateGetByIDOBJ_SOGGETTOCommand(iDOBJ_SOGGETTO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTREGISTRI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_SOGGETTOAsDataTable(System.Int32 iDOBJ_SOGGETTO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_SOGGETTOCommand(iDOBJ_SOGGETTO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_SOGGETTOCommand(System.Int32 iDOBJ_SOGGETTO)
		{
			string whereSql = "IDOBJ_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_SOGGETTO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_SOGGETTO", iDOBJ_SOGGETTO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_SOGGETTO(System.Int32 iDOBJ_SOGGETTO)
		{
			return CreateDeleteByIDOBJ_SOGGETTOCommand(iDOBJ_SOGGETTO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_SOGGETTOCommand(System.Int32 iDOBJ_SOGGETTO)
		{
			string whereSql = "IDOBJ_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_SOGGETTO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_SOGGETTO", iDOBJ_SOGGETTO);
			return cmd;
		}

		/// <summary>
		/// Inserts in the Database an object GVCTREGISTRI
		/// </summary>
		/// <param name="valore">The object to insert</param>
		public virtual void Insert(GVCTREGISTRI valore)
		{
			System.Int32 id = -1;
			System.String sqlStr;

			sqlStr = "SELECT GVCTREGISTRI_SEQ.NEXTVAL FROM DUAL";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				id = Convert.ToInt32(cmd.ExecuteScalar());
			}

			sqlStr = "INSERT INTO GVCTREGISTRI (" +
			"IDOBJ, " +
			"IDOBJ_SOGGETTO, " +
			"NUMERO_REA, " +
			"NUMERO_RI, " +
			"NUMERO_ALBO, " +
			"FORMA_GIURIDICA_CCIAA, " +
			"DATA_COSTITUZIONE, " +
			"DURATA, " +
			"DURATA_ILLIMITATA, " +
			"BILANCIO_ESERCIZIO_AL, " +
			"GRUPPO_PARITETICO, " +
			"DATA_BFL, " +
			"DATA_DEPOSITO_BFL, " +
			"NUMERO_SCIOGLIMENTO, " +
			"ESENTE_VERSAMENTO_UTILI, " +
			"IMPORTO_VERSAMENTO, " +
			"CODICE_OPERATORE, " +
			"CODICE_UFFICIO, " +
			"OPERATOREULTMOD, " +
			"DATAORAULTMOD, " +
			"IDOBJ_STATO, " +
			"IDOBJ_TIPO_COSTITUZIONE, " +
			"IDOBJ_NOTAIO, " +
			"IDOBJ_FORMA_AMMINISTRATIVA, " +
			"IDOBJ_FORMA_GIURIDICA, " +
			"IDOBJ_CADENZA_REVISIONE, " +
			"CODICE_COOPERATIVA, " +
			"NUMERO_REPERTORIO_NOTAIO, " +
			"FORMA_AMM_CCIAA, " +
			"DATA_ACQUISIZIONE_ATTO, " +
			"DATA_DEPOSITO_ATTO, " +
			"NUMERO_ESAME, " +
			"DATA_ESAME) " +
			"VALUES (" + id.ToString() + ", " +
			_db.CreateSqlParameterName("IDOBJ_SOGGETTO") + ", " +
			_db.CreateSqlParameterName("NUMERO_REA") + ", " +
			_db.CreateSqlParameterName("NUMERO_RI") + ", " +
			_db.CreateSqlParameterName("NUMERO_ALBO") + ", " +
			_db.CreateSqlParameterName("FORMA_GIURIDICA_CCIAA") + ", " +
			_db.CreateSqlParameterName("DATA_COSTITUZIONE") + ", " +
			_db.CreateSqlParameterName("DURATA") + ", " +
			_db.CreateSqlParameterName("DURATA_ILLIMITATA") + ", " +
			_db.CreateSqlParameterName("BILANCIO_ESERCIZIO_AL") + ", " +
			_db.CreateSqlParameterName("GRUPPO_PARITETICO") + ", " +
			_db.CreateSqlParameterName("DATA_BFL") + ", " +
			_db.CreateSqlParameterName("DATA_DEPOSITO_BFL") + ", " +
			_db.CreateSqlParameterName("NUMERO_SCIOGLIMENTO") + ", " +
			_db.CreateSqlParameterName("ESENTE_VERSAMENTO_UTILI") + ", " +
			_db.CreateSqlParameterName("IMPORTO_VERSAMENTO") + ", " +
			_db.CreateSqlParameterName("CODICE_OPERATORE") + ", " +
			_db.CreateSqlParameterName("CODICE_UFFICIO") + ", " +
			_db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
			_db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
			_db.CreateSqlParameterName("IDOBJ_STATO") + ", " +
			_db.CreateSqlParameterName("IDOBJ_TIPO_COSTITUZIONE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_NOTAIO") + ", " +
			_db.CreateSqlParameterName("IDOBJ_FORMA_AMMINISTRATIVA") + ", " +
			_db.CreateSqlParameterName("IDOBJ_FORMA_GIURIDICA") + ", " +
			_db.CreateSqlParameterName("IDOBJ_CADENZA_REVISIONE") + ", " +
			_db.CreateSqlParameterName("CODICE_COOPERATIVA") + ", " +
			_db.CreateSqlParameterName("NUMERO_REPERTORIO_NOTAIO") + ", " +
			_db.CreateSqlParameterName("FORMA_AMM_CCIAA") + ", " +
			_db.CreateSqlParameterName("DATA_ACQUISIZIONE_ATTO") + ", " +
			_db.CreateSqlParameterName("DATA_DEPOSITO_ATTO") + ", " +
			_db.CreateSqlParameterName("NUMERO_ESAME") + ", " +
			_db.CreateSqlParameterName("DATA_ESAME") + ")";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ_SOGGETTO", valore.IDOBJ_SOGGETTO);
				AddParameter(cmd, "NUMERO_REA", valore.IsNUMERO_REANull ? DBNull.Value : (object)valore.NUMERO_REA);
				AddParameter(cmd, "NUMERO_RI", valore.IsNUMERO_RINull ? DBNull.Value : (object)valore.NUMERO_RI);
				AddParameter(cmd, "NUMERO_ALBO", valore.IsNUMERO_ALBONull ? DBNull.Value : (object)valore.NUMERO_ALBO);
				AddParameter(cmd, "FORMA_GIURIDICA_CCIAA", valore.IsFORMA_GIURIDICA_CCIAANull ? DBNull.Value : (object)valore.FORMA_GIURIDICA_CCIAA);
				AddParameter(cmd, "DATA_COSTITUZIONE", valore.IsDATA_COSTITUZIONENull ? DBNull.Value : (object)valore.DATA_COSTITUZIONE);
				AddParameter(cmd, "DURATA", valore.IsDURATANull ? DBNull.Value : (object)valore.DURATA);
				AddParameter(cmd, "DURATA_ILLIMITATA", valore.IsDURATA_ILLIMITATANull ? DBNull.Value : (object)valore.DURATA_ILLIMITATA);
				AddParameter(cmd, "BILANCIO_ESERCIZIO_AL", valore.IsBILANCIO_ESERCIZIO_ALNull ? DBNull.Value : (object)valore.BILANCIO_ESERCIZIO_AL);
				AddParameter(cmd, "GRUPPO_PARITETICO", valore.IsGRUPPO_PARITETICONull ? DBNull.Value : (object)valore.GRUPPO_PARITETICO);
				AddParameter(cmd, "DATA_BFL", valore.IsDATA_BFLNull ? DBNull.Value : (object)valore.DATA_BFL);
				AddParameter(cmd, "DATA_DEPOSITO_BFL", valore.IsDATA_DEPOSITO_BFLNull ? DBNull.Value : (object)valore.DATA_DEPOSITO_BFL);
				AddParameter(cmd, "NUMERO_SCIOGLIMENTO", valore.IsNUMERO_SCIOGLIMENTONull ? DBNull.Value : (object)valore.NUMERO_SCIOGLIMENTO);
				AddParameter(cmd, "ESENTE_VERSAMENTO_UTILI", valore.IsESENTE_VERSAMENTO_UTILINull ? DBNull.Value : (object)valore.ESENTE_VERSAMENTO_UTILI);
				AddParameter(cmd, "IMPORTO_VERSAMENTO", valore.IsIMPORTO_VERSAMENTONull ? DBNull.Value : (object)valore.IMPORTO_VERSAMENTO);
				AddParameter(cmd, "CODICE_OPERATORE", valore.IsCODICE_OPERATORENull ? DBNull.Value : (object)valore.CODICE_OPERATORE);
				AddParameter(cmd, "CODICE_UFFICIO", valore.IsCODICE_UFFICIONull ? DBNull.Value : (object)valore.CODICE_UFFICIO);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_STATO", valore.IsIDOBJ_STATONull ? DBNull.Value : (object)valore.IDOBJ_STATO);
				AddParameter(cmd, "IDOBJ_TIPO_COSTITUZIONE", valore.IsIDOBJ_TIPO_COSTITUZIONENull ? DBNull.Value : (object)valore.IDOBJ_TIPO_COSTITUZIONE);
				AddParameter(cmd, "IDOBJ_NOTAIO", valore.IsIDOBJ_NOTAIONull ? DBNull.Value : (object)valore.IDOBJ_NOTAIO);
				AddParameter(cmd, "IDOBJ_FORMA_AMMINISTRATIVA", valore.IsIDOBJ_FORMA_AMMINISTRATIVANull ? DBNull.Value : (object)valore.IDOBJ_FORMA_AMMINISTRATIVA);
				AddParameter(cmd, "IDOBJ_FORMA_GIURIDICA", valore.IsIDOBJ_FORMA_GIURIDICANull ? DBNull.Value : (object)valore.IDOBJ_FORMA_GIURIDICA);
				AddParameter(cmd, "IDOBJ_CADENZA_REVISIONE", valore.IsIDOBJ_CADENZA_REVISIONENull ? DBNull.Value : (object)valore.IDOBJ_CADENZA_REVISIONE);
				AddParameter(cmd, "CODICE_COOPERATIVA", valore.IsCODICE_COOPERATIVANull ? DBNull.Value : (object)valore.CODICE_COOPERATIVA);
				AddParameter(cmd, "NUMERO_REPERTORIO_NOTAIO", valore.IsNUMERO_REPERTORIO_NOTAIONull ? DBNull.Value : (object)valore.NUMERO_REPERTORIO_NOTAIO);
				AddParameter(cmd, "FORMA_AMM_CCIAA", valore.IsFORMA_AMM_CCIAANull ? DBNull.Value : (object)valore.FORMA_AMM_CCIAA);
				AddParameter(cmd, "DATA_ACQUISIZIONE_ATTO", valore.IsDATA_ACQUISIZIONE_ATTONull ? DBNull.Value : (object)valore.DATA_ACQUISIZIONE_ATTO);
				AddParameter(cmd, "DATA_DEPOSITO_ATTO", valore.IsDATA_DEPOSITO_ATTONull ? DBNull.Value : (object)valore.DATA_DEPOSITO_ATTO);
				AddParameter(cmd, "NUMERO_ESAME", valore.IsNUMERO_ESAMENull ? DBNull.Value : (object)valore.NUMERO_ESAME);
				AddParameter(cmd, "DATA_ESAME", valore.IsDATA_ESAMENull ? DBNull.Value : (object)valore.DATA_ESAME);
				cmd.ExecuteScalar();
				valore.IDOBJ = id;
			}
		}

		/// <summary>
		/// Updates in the Database an object GVCTREGISTRI
		/// </summary>
		/// <param name="valore">The object to update</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool Update(GVCTREGISTRI valore)
		{
			System.String sqlStr = "UPDATE GVCTREGISTRI SET " +
				"IDOBJ_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_SOGGETTO") + ", " +
				"NUMERO_REA = " + _db.CreateSqlParameterName("NUMERO_REA") + ", " +
				"NUMERO_RI = " + _db.CreateSqlParameterName("NUMERO_RI") + ", " +
				"NUMERO_ALBO = " + _db.CreateSqlParameterName("NUMERO_ALBO") + ", " +
				"FORMA_GIURIDICA_CCIAA = " + _db.CreateSqlParameterName("FORMA_GIURIDICA_CCIAA") + ", " +
				"DATA_COSTITUZIONE = " + _db.CreateSqlParameterName("DATA_COSTITUZIONE") + ", " +
				"DURATA = " + _db.CreateSqlParameterName("DURATA") + ", " +
				"DURATA_ILLIMITATA = " + _db.CreateSqlParameterName("DURATA_ILLIMITATA") + ", " +
				"BILANCIO_ESERCIZIO_AL = " + _db.CreateSqlParameterName("BILANCIO_ESERCIZIO_AL") + ", " +
				"GRUPPO_PARITETICO = " + _db.CreateSqlParameterName("GRUPPO_PARITETICO") + ", " +
				"DATA_BFL = " + _db.CreateSqlParameterName("DATA_BFL") + ", " +
				"DATA_DEPOSITO_BFL = " + _db.CreateSqlParameterName("DATA_DEPOSITO_BFL") + ", " +
				"NUMERO_SCIOGLIMENTO = " + _db.CreateSqlParameterName("NUMERO_SCIOGLIMENTO") + ", " +
				"ESENTE_VERSAMENTO_UTILI = " + _db.CreateSqlParameterName("ESENTE_VERSAMENTO_UTILI") + ", " +
				"IMPORTO_VERSAMENTO = " + _db.CreateSqlParameterName("IMPORTO_VERSAMENTO") + ", " +
				"CODICE_OPERATORE = " + _db.CreateSqlParameterName("CODICE_OPERATORE") + ", " +
				"CODICE_UFFICIO = " + _db.CreateSqlParameterName("CODICE_UFFICIO") + ", " +
				"OPERATOREULTMOD = " + _db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
				"DATAORAULTMOD = " + _db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
				"IDOBJ_STATO = " + _db.CreateSqlParameterName("IDOBJ_STATO") + ", " +
				"IDOBJ_TIPO_COSTITUZIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_COSTITUZIONE") + ", " +
				"IDOBJ_NOTAIO = " + _db.CreateSqlParameterName("IDOBJ_NOTAIO") + ", " +
				"IDOBJ_FORMA_AMMINISTRATIVA = " + _db.CreateSqlParameterName("IDOBJ_FORMA_AMMINISTRATIVA") + ", " +
				"IDOBJ_FORMA_GIURIDICA = " + _db.CreateSqlParameterName("IDOBJ_FORMA_GIURIDICA") + ", " +
				"IDOBJ_CADENZA_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_CADENZA_REVISIONE") + ", " +
				"CODICE_COOPERATIVA = " + _db.CreateSqlParameterName("CODICE_COOPERATIVA") + ", " +
				"NUMERO_REPERTORIO_NOTAIO = " + _db.CreateSqlParameterName("NUMERO_REPERTORIO_NOTAIO") + ", " +
				"FORMA_AMM_CCIAA = " + _db.CreateSqlParameterName("FORMA_AMM_CCIAA") + ", " +
				"DATA_ACQUISIZIONE_ATTO = " + _db.CreateSqlParameterName("DATA_ACQUISIZIONE_ATTO") + ", " +
				"DATA_DEPOSITO_ATTO = " + _db.CreateSqlParameterName("DATA_DEPOSITO_ATTO") + ", " +
				"NUMERO_ESAME = " + _db.CreateSqlParameterName("NUMERO_ESAME") + ", " +
				"DATA_ESAME = " + _db.CreateSqlParameterName("DATA_ESAME") +
				" WHERE " +
				"IDOBJ = " + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ", valore.IDOBJ);
				AddParameter(cmd, "IDOBJ_SOGGETTO", valore.IDOBJ_SOGGETTO);
				AddParameter(cmd, "NUMERO_REA", valore.IsNUMERO_REANull ? DBNull.Value : (object)valore.NUMERO_REA);
				AddParameter(cmd, "NUMERO_RI", valore.IsNUMERO_RINull ? DBNull.Value : (object)valore.NUMERO_RI);
				AddParameter(cmd, "NUMERO_ALBO", valore.IsNUMERO_ALBONull ? DBNull.Value : (object)valore.NUMERO_ALBO);
				AddParameter(cmd, "FORMA_GIURIDICA_CCIAA", valore.IsFORMA_GIURIDICA_CCIAANull ? DBNull.Value : (object)valore.FORMA_GIURIDICA_CCIAA);
				AddParameter(cmd, "DATA_COSTITUZIONE", valore.IsDATA_COSTITUZIONENull ? DBNull.Value : (object)valore.DATA_COSTITUZIONE);
				AddParameter(cmd, "DURATA", valore.IsDURATANull ? DBNull.Value : (object)valore.DURATA);
				AddParameter(cmd, "DURATA_ILLIMITATA", valore.IsDURATA_ILLIMITATANull ? DBNull.Value : (object)valore.DURATA_ILLIMITATA);
				AddParameter(cmd, "BILANCIO_ESERCIZIO_AL", valore.IsBILANCIO_ESERCIZIO_ALNull ? DBNull.Value : (object)valore.BILANCIO_ESERCIZIO_AL);
				AddParameter(cmd, "GRUPPO_PARITETICO", valore.IsGRUPPO_PARITETICONull ? DBNull.Value : (object)valore.GRUPPO_PARITETICO);
				AddParameter(cmd, "DATA_BFL", valore.IsDATA_BFLNull ? DBNull.Value : (object)valore.DATA_BFL);
				AddParameter(cmd, "DATA_DEPOSITO_BFL", valore.IsDATA_DEPOSITO_BFLNull ? DBNull.Value : (object)valore.DATA_DEPOSITO_BFL);
				AddParameter(cmd, "NUMERO_SCIOGLIMENTO", valore.IsNUMERO_SCIOGLIMENTONull ? DBNull.Value : (object)valore.NUMERO_SCIOGLIMENTO);
				AddParameter(cmd, "ESENTE_VERSAMENTO_UTILI", valore.IsESENTE_VERSAMENTO_UTILINull ? DBNull.Value : (object)valore.ESENTE_VERSAMENTO_UTILI);
				AddParameter(cmd, "IMPORTO_VERSAMENTO", valore.IsIMPORTO_VERSAMENTONull ? DBNull.Value : (object)valore.IMPORTO_VERSAMENTO);
				AddParameter(cmd, "CODICE_OPERATORE", valore.IsCODICE_OPERATORENull ? DBNull.Value : (object)valore.CODICE_OPERATORE);
				AddParameter(cmd, "CODICE_UFFICIO", valore.IsCODICE_UFFICIONull ? DBNull.Value : (object)valore.CODICE_UFFICIO);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_STATO", valore.IsIDOBJ_STATONull ? DBNull.Value : (object)valore.IDOBJ_STATO);
				AddParameter(cmd, "IDOBJ_TIPO_COSTITUZIONE", valore.IsIDOBJ_TIPO_COSTITUZIONENull ? DBNull.Value : (object)valore.IDOBJ_TIPO_COSTITUZIONE);
				AddParameter(cmd, "IDOBJ_NOTAIO", valore.IsIDOBJ_NOTAIONull ? DBNull.Value : (object)valore.IDOBJ_NOTAIO);
				AddParameter(cmd, "IDOBJ_FORMA_AMMINISTRATIVA", valore.IsIDOBJ_FORMA_AMMINISTRATIVANull ? DBNull.Value : (object)valore.IDOBJ_FORMA_AMMINISTRATIVA);
				AddParameter(cmd, "IDOBJ_FORMA_GIURIDICA", valore.IsIDOBJ_FORMA_GIURIDICANull ? DBNull.Value : (object)valore.IDOBJ_FORMA_GIURIDICA);
				AddParameter(cmd, "IDOBJ_CADENZA_REVISIONE", valore.IsIDOBJ_CADENZA_REVISIONENull ? DBNull.Value : (object)valore.IDOBJ_CADENZA_REVISIONE);
				AddParameter(cmd, "CODICE_COOPERATIVA", valore.IsCODICE_COOPERATIVANull ? DBNull.Value : (object)valore.CODICE_COOPERATIVA);
				AddParameter(cmd, "NUMERO_REPERTORIO_NOTAIO", valore.IsNUMERO_REPERTORIO_NOTAIONull ? DBNull.Value : (object)valore.NUMERO_REPERTORIO_NOTAIO);
				AddParameter(cmd, "FORMA_AMM_CCIAA", valore.IsFORMA_AMM_CCIAANull ? DBNull.Value : (object)valore.FORMA_AMM_CCIAA);
				AddParameter(cmd, "DATA_ACQUISIZIONE_ATTO", valore.IsDATA_ACQUISIZIONE_ATTONull ? DBNull.Value : (object)valore.DATA_ACQUISIZIONE_ATTO);
				AddParameter(cmd, "DATA_DEPOSITO_ATTO", valore.IsDATA_DEPOSITO_ATTONull ? DBNull.Value : (object)valore.DATA_DEPOSITO_ATTO);
				AddParameter(cmd, "NUMERO_ESAME", valore.IsNUMERO_ESAMENull ? DBNull.Value : (object)valore.NUMERO_ESAME);
				AddParameter(cmd, "DATA_ESAME", valore.IsDATA_ESAMENull ? DBNull.Value : (object)valore.DATA_ESAME);
				return cmd.ExecuteNonQuery() != 0;
			}
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTREGISTRI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTREGISTRI</param>
		public void Update(DataTable table)
		{
			Update(table, true);
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTREGISTRI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTREGISTRI</param>
		/// <param name="acceptChanges">true to accept the changes, otherwise false</param>
		public virtual void Update(DataTable table, bool acceptChanges)
		{
			DataRowCollection rows = table.Rows;
			for(int i = rows.Count - 1; i >= 0; i--)
			{
				DataRow row = rows[i];
				switch(row.RowState)
				{
					case DataRowState.Added:
						Insert(MapRow(row));
						if(acceptChanges)
							row.AcceptChanges();
						break;

					case DataRowState.Deleted:
						row.RejectChanges();
						try
						{
							DeleteByPrimaryKey((System.Int32)row["IDOBJ"]);
						}
						finally
						{
							row.Delete();
						}
						if(acceptChanges)
							row.AcceptChanges();
						break;

				case DataRowState.Modified:
					Update(MapRow(row));
					if(acceptChanges)
						row.AcceptChanges();
					break;
				}
			}
		}

		/// <summary>
		/// Deletes from the Database an object GVCTREGISTRI
		/// </summary>
		/// <param name="valore">The object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public bool Delete(GVCTREGISTRI valore)
		{
			return DeleteByPrimaryKey(valore.IDOBJ);
		}

		/// <summary>
		/// Deletes from the Database an object GVCTREGISTRI
		/// </summary>
		/// <param name="iDOBJ">The primary key of the object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool DeleteByPrimaryKey(System.Int32 iDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateDeleteCommand(whereSql))
			{
				AddParameter(cmd, "IDOBJ" , iDOBJ);
				return cmd.ExecuteNonQuery() > 0;
			}
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTREGISTRI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>The number of the deleted objects</returns>
		public int Delete(System.String whereSql)
		{
			return CreateDeleteCommand(whereSql).ExecuteNonQuery();
		}

		/// <summary>
		/// Returns an IDbCommand to delete the objects GVCTREGISTRI selected by 
		/// a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteCommand(string whereSql)
		{
			StringBuilder sql = new StringBuilder("DELETE FROM GVCTREGISTRI");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format(" WHERE {0}", whereSql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Deletes all the objects GVCTREGISTRI
		/// </summary>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteAll()
		{
			return Delete("");
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTREGISTRI
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCTREGISTRI</returns>
		protected GVCTREGISTRI[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTREGISTRI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCTREGISTRI</returns>
		protected GVCTREGISTRI[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCTREGISTRI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCTREGISTRI</returns>
		protected virtual GVCTREGISTRI[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int iDOBJColumnIndex = reader.GetOrdinal("IDOBJ");
			int iDOBJ_SOGGETTOColumnIndex = reader.GetOrdinal("IDOBJ_SOGGETTO");
			int nUMERO_REAColumnIndex = reader.GetOrdinal("NUMERO_REA");
			int nUMERO_RIColumnIndex = reader.GetOrdinal("NUMERO_RI");
			int nUMERO_ALBOColumnIndex = reader.GetOrdinal("NUMERO_ALBO");
			int fORMA_GIURIDICA_CCIAAColumnIndex = reader.GetOrdinal("FORMA_GIURIDICA_CCIAA");
			int dATA_COSTITUZIONEColumnIndex = reader.GetOrdinal("DATA_COSTITUZIONE");
			int dURATAColumnIndex = reader.GetOrdinal("DURATA");
			int dURATA_ILLIMITATAColumnIndex = reader.GetOrdinal("DURATA_ILLIMITATA");
			int bILANCIO_ESERCIZIO_ALColumnIndex = reader.GetOrdinal("BILANCIO_ESERCIZIO_AL");
			int gRUPPO_PARITETICOColumnIndex = reader.GetOrdinal("GRUPPO_PARITETICO");
			int dATA_BFLColumnIndex = reader.GetOrdinal("DATA_BFL");
			int dATA_DEPOSITO_BFLColumnIndex = reader.GetOrdinal("DATA_DEPOSITO_BFL");
			int nUMERO_SCIOGLIMENTOColumnIndex = reader.GetOrdinal("NUMERO_SCIOGLIMENTO");
			int eSENTE_VERSAMENTO_UTILIColumnIndex = reader.GetOrdinal("ESENTE_VERSAMENTO_UTILI");
			int iMPORTO_VERSAMENTOColumnIndex = reader.GetOrdinal("IMPORTO_VERSAMENTO");
			int cODICE_OPERATOREColumnIndex = reader.GetOrdinal("CODICE_OPERATORE");
			int cODICE_UFFICIOColumnIndex = reader.GetOrdinal("CODICE_UFFICIO");
			int oPERATOREULTMODColumnIndex = reader.GetOrdinal("OPERATOREULTMOD");
			int dATAORAULTMODColumnIndex = reader.GetOrdinal("DATAORAULTMOD");
			int iDOBJ_STATOColumnIndex = reader.GetOrdinal("IDOBJ_STATO");
			int iDOBJ_TIPO_COSTITUZIONEColumnIndex = reader.GetOrdinal("IDOBJ_TIPO_COSTITUZIONE");
			int iDOBJ_NOTAIOColumnIndex = reader.GetOrdinal("IDOBJ_NOTAIO");
			int iDOBJ_FORMA_AMMINISTRATIVAColumnIndex = reader.GetOrdinal("IDOBJ_FORMA_AMMINISTRATIVA");
			int iDOBJ_FORMA_GIURIDICAColumnIndex = reader.GetOrdinal("IDOBJ_FORMA_GIURIDICA");
			int iDOBJ_CADENZA_REVISIONEColumnIndex = reader.GetOrdinal("IDOBJ_CADENZA_REVISIONE");
			int cODICE_COOPERATIVAColumnIndex = reader.GetOrdinal("CODICE_COOPERATIVA");
			int nUMERO_REPERTORIO_NOTAIOColumnIndex = reader.GetOrdinal("NUMERO_REPERTORIO_NOTAIO");
			int fORMA_AMM_CCIAAColumnIndex = reader.GetOrdinal("FORMA_AMM_CCIAA");
			int dATA_ACQUISIZIONE_ATTOColumnIndex = reader.GetOrdinal("DATA_ACQUISIZIONE_ATTO");
			int dATA_DEPOSITO_ATTOColumnIndex = reader.GetOrdinal("DATA_DEPOSITO_ATTO");
			int nUMERO_ESAMEColumnIndex = reader.GetOrdinal("NUMERO_ESAME");
			int dATA_ESAMEColumnIndex = reader.GetOrdinal("DATA_ESAME");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCTREGISTRI record = new GVCTREGISTRI();
					recordList.Add(record);
					record.IDOBJ = Convert.ToInt32(reader.GetValue(iDOBJColumnIndex));
					record.IDOBJ_SOGGETTO = Convert.ToInt32(reader.GetValue(iDOBJ_SOGGETTOColumnIndex));
					if(!reader.IsDBNull(nUMERO_REAColumnIndex))
						record.NUMERO_REA = Convert.ToString(reader.GetValue(nUMERO_REAColumnIndex));
					if(!reader.IsDBNull(nUMERO_RIColumnIndex))
						record.NUMERO_RI = Convert.ToString(reader.GetValue(nUMERO_RIColumnIndex));
					if(!reader.IsDBNull(nUMERO_ALBOColumnIndex))
						record.NUMERO_ALBO = Convert.ToString(reader.GetValue(nUMERO_ALBOColumnIndex));
					if(!reader.IsDBNull(fORMA_GIURIDICA_CCIAAColumnIndex))
						record.FORMA_GIURIDICA_CCIAA = Convert.ToString(reader.GetValue(fORMA_GIURIDICA_CCIAAColumnIndex));
					if(!reader.IsDBNull(dATA_COSTITUZIONEColumnIndex))
						record.DATA_COSTITUZIONE = Convert.ToDateTime(reader.GetValue(dATA_COSTITUZIONEColumnIndex));
					if(!reader.IsDBNull(dURATAColumnIndex))
						record.DURATA = Convert.ToDateTime(reader.GetValue(dURATAColumnIndex));
					if(!reader.IsDBNull(dURATA_ILLIMITATAColumnIndex))
						record.DURATA_ILLIMITATA = Convert.ToInt32(reader.GetValue(dURATA_ILLIMITATAColumnIndex));
					if(!reader.IsDBNull(bILANCIO_ESERCIZIO_ALColumnIndex))
						record.BILANCIO_ESERCIZIO_AL = Convert.ToDateTime(reader.GetValue(bILANCIO_ESERCIZIO_ALColumnIndex));
					if(!reader.IsDBNull(gRUPPO_PARITETICOColumnIndex))
						record.GRUPPO_PARITETICO = Convert.ToInt32(reader.GetValue(gRUPPO_PARITETICOColumnIndex));
					if(!reader.IsDBNull(dATA_BFLColumnIndex))
						record.DATA_BFL = Convert.ToDateTime(reader.GetValue(dATA_BFLColumnIndex));
					if(!reader.IsDBNull(dATA_DEPOSITO_BFLColumnIndex))
						record.DATA_DEPOSITO_BFL = Convert.ToDateTime(reader.GetValue(dATA_DEPOSITO_BFLColumnIndex));
					if(!reader.IsDBNull(nUMERO_SCIOGLIMENTOColumnIndex))
						record.NUMERO_SCIOGLIMENTO = Convert.ToInt32(reader.GetValue(nUMERO_SCIOGLIMENTOColumnIndex));
					if(!reader.IsDBNull(eSENTE_VERSAMENTO_UTILIColumnIndex))
						record.ESENTE_VERSAMENTO_UTILI = Convert.ToInt32(reader.GetValue(eSENTE_VERSAMENTO_UTILIColumnIndex));
					if(!reader.IsDBNull(iMPORTO_VERSAMENTOColumnIndex))
						record.IMPORTO_VERSAMENTO = Convert.ToDouble(reader.GetValue(iMPORTO_VERSAMENTOColumnIndex));
					if(!reader.IsDBNull(cODICE_OPERATOREColumnIndex))
						record.CODICE_OPERATORE = Convert.ToString(reader.GetValue(cODICE_OPERATOREColumnIndex));
					if(!reader.IsDBNull(cODICE_UFFICIOColumnIndex))
						record.CODICE_UFFICIO = Convert.ToString(reader.GetValue(cODICE_UFFICIOColumnIndex));
					if(!reader.IsDBNull(oPERATOREULTMODColumnIndex))
						record.OPERATOREULTMOD = Convert.ToString(reader.GetValue(oPERATOREULTMODColumnIndex));
					if(!reader.IsDBNull(dATAORAULTMODColumnIndex))
						record.DATAORAULTMOD = Convert.ToDateTime(reader.GetValue(dATAORAULTMODColumnIndex));
					if(!reader.IsDBNull(iDOBJ_STATOColumnIndex))
						record.IDOBJ_STATO = Convert.ToInt32(reader.GetValue(iDOBJ_STATOColumnIndex));
					if(!reader.IsDBNull(iDOBJ_TIPO_COSTITUZIONEColumnIndex))
						record.IDOBJ_TIPO_COSTITUZIONE = Convert.ToInt32(reader.GetValue(iDOBJ_TIPO_COSTITUZIONEColumnIndex));
					if(!reader.IsDBNull(iDOBJ_NOTAIOColumnIndex))
						record.IDOBJ_NOTAIO = Convert.ToInt32(reader.GetValue(iDOBJ_NOTAIOColumnIndex));
					if(!reader.IsDBNull(iDOBJ_FORMA_AMMINISTRATIVAColumnIndex))
						record.IDOBJ_FORMA_AMMINISTRATIVA = Convert.ToInt32(reader.GetValue(iDOBJ_FORMA_AMMINISTRATIVAColumnIndex));
					if(!reader.IsDBNull(iDOBJ_FORMA_GIURIDICAColumnIndex))
						record.IDOBJ_FORMA_GIURIDICA = Convert.ToInt32(reader.GetValue(iDOBJ_FORMA_GIURIDICAColumnIndex));
					if(!reader.IsDBNull(iDOBJ_CADENZA_REVISIONEColumnIndex))
						record.IDOBJ_CADENZA_REVISIONE = Convert.ToInt32(reader.GetValue(iDOBJ_CADENZA_REVISIONEColumnIndex));
					if(!reader.IsDBNull(cODICE_COOPERATIVAColumnIndex))
						record.CODICE_COOPERATIVA = Convert.ToInt32(reader.GetValue(cODICE_COOPERATIVAColumnIndex));
					if(!reader.IsDBNull(nUMERO_REPERTORIO_NOTAIOColumnIndex))
						record.NUMERO_REPERTORIO_NOTAIO = Convert.ToString(reader.GetValue(nUMERO_REPERTORIO_NOTAIOColumnIndex));
					if(!reader.IsDBNull(fORMA_AMM_CCIAAColumnIndex))
						record.FORMA_AMM_CCIAA = Convert.ToString(reader.GetValue(fORMA_AMM_CCIAAColumnIndex));
					if(!reader.IsDBNull(dATA_ACQUISIZIONE_ATTOColumnIndex))
						record.DATA_ACQUISIZIONE_ATTO = Convert.ToDateTime(reader.GetValue(dATA_ACQUISIZIONE_ATTOColumnIndex));
					if(!reader.IsDBNull(dATA_DEPOSITO_ATTOColumnIndex))
						record.DATA_DEPOSITO_ATTO = Convert.ToDateTime(reader.GetValue(dATA_DEPOSITO_ATTOColumnIndex));
					if(!reader.IsDBNull(nUMERO_ESAMEColumnIndex))
						record.NUMERO_ESAME = Convert.ToString(reader.GetValue(nUMERO_ESAMEColumnIndex));
					if(!reader.IsDBNull(dATA_ESAMEColumnIndex))
						record.DATA_ESAME = Convert.ToDateTime(reader.GetValue(dATA_ESAMEColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCTREGISTRI[])(recordList.ToArray(typeof(GVCTREGISTRI)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCTREGISTRI</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCTREGISTRI</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTREGISTRI</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCTREGISTRI
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCTREGISTRI</returns>
		protected virtual GVCTREGISTRI MapRow(DataRow row)
		{
			GVCTREGISTRI mappedObject = new GVCTREGISTRI();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "IDOBJ"
			dataColumn = dataTable.Columns["IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_SOGGETTO"
			dataColumn = dataTable.Columns["IDOBJ_SOGGETTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_SOGGETTO = (System.Int32)row[dataColumn];
			//Campo "NUMERO_REA"
			dataColumn = dataTable.Columns["NUMERO_REA"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_REA = (System.String)row[dataColumn];
			//Campo "NUMERO_RI"
			dataColumn = dataTable.Columns["NUMERO_RI"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_RI = (System.String)row[dataColumn];
			//Campo "NUMERO_ALBO"
			dataColumn = dataTable.Columns["NUMERO_ALBO"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_ALBO = (System.String)row[dataColumn];
			//Campo "FORMA_GIURIDICA_CCIAA"
			dataColumn = dataTable.Columns["FORMA_GIURIDICA_CCIAA"];
			if(!row.IsNull(dataColumn))
				mappedObject.FORMA_GIURIDICA_CCIAA = (System.String)row[dataColumn];
			//Campo "DATA_COSTITUZIONE"
			dataColumn = dataTable.Columns["DATA_COSTITUZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_COSTITUZIONE = (System.DateTime)row[dataColumn];
			//Campo "DURATA"
			dataColumn = dataTable.Columns["DURATA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DURATA = (System.DateTime)row[dataColumn];
			//Campo "DURATA_ILLIMITATA"
			dataColumn = dataTable.Columns["DURATA_ILLIMITATA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DURATA_ILLIMITATA = (System.Int32)row[dataColumn];
			//Campo "BILANCIO_ESERCIZIO_AL"
			dataColumn = dataTable.Columns["BILANCIO_ESERCIZIO_AL"];
			if(!row.IsNull(dataColumn))
				mappedObject.BILANCIO_ESERCIZIO_AL = (System.DateTime)row[dataColumn];
			//Campo "GRUPPO_PARITETICO"
			dataColumn = dataTable.Columns["GRUPPO_PARITETICO"];
			if(!row.IsNull(dataColumn))
				mappedObject.GRUPPO_PARITETICO = (System.Int32)row[dataColumn];
			//Campo "DATA_BFL"
			dataColumn = dataTable.Columns["DATA_BFL"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_BFL = (System.DateTime)row[dataColumn];
			//Campo "DATA_DEPOSITO_BFL"
			dataColumn = dataTable.Columns["DATA_DEPOSITO_BFL"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_DEPOSITO_BFL = (System.DateTime)row[dataColumn];
			//Campo "NUMERO_SCIOGLIMENTO"
			dataColumn = dataTable.Columns["NUMERO_SCIOGLIMENTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_SCIOGLIMENTO = (System.Int32)row[dataColumn];
			//Campo "ESENTE_VERSAMENTO_UTILI"
			dataColumn = dataTable.Columns["ESENTE_VERSAMENTO_UTILI"];
			if(!row.IsNull(dataColumn))
				mappedObject.ESENTE_VERSAMENTO_UTILI = (System.Int32)row[dataColumn];
			//Campo "IMPORTO_VERSAMENTO"
			dataColumn = dataTable.Columns["IMPORTO_VERSAMENTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IMPORTO_VERSAMENTO = (System.Double)row[dataColumn];
			//Campo "CODICE_OPERATORE"
			dataColumn = dataTable.Columns["CODICE_OPERATORE"];
			if(!row.IsNull(dataColumn))
				mappedObject.CODICE_OPERATORE = (System.String)row[dataColumn];
			//Campo "CODICE_UFFICIO"
			dataColumn = dataTable.Columns["CODICE_UFFICIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.CODICE_UFFICIO = (System.String)row[dataColumn];
			//Campo "OPERATOREULTMOD"
			dataColumn = dataTable.Columns["OPERATOREULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.OPERATOREULTMOD = (System.String)row[dataColumn];
			//Campo "DATAORAULTMOD"
			dataColumn = dataTable.Columns["DATAORAULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORAULTMOD = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_STATO"
			dataColumn = dataTable.Columns["IDOBJ_STATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_STATO = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_TIPO_COSTITUZIONE"
			dataColumn = dataTable.Columns["IDOBJ_TIPO_COSTITUZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_TIPO_COSTITUZIONE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_NOTAIO"
			dataColumn = dataTable.Columns["IDOBJ_NOTAIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_NOTAIO = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_FORMA_AMMINISTRATIVA"
			dataColumn = dataTable.Columns["IDOBJ_FORMA_AMMINISTRATIVA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_FORMA_AMMINISTRATIVA = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_FORMA_GIURIDICA"
			dataColumn = dataTable.Columns["IDOBJ_FORMA_GIURIDICA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_FORMA_GIURIDICA = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_CADENZA_REVISIONE"
			dataColumn = dataTable.Columns["IDOBJ_CADENZA_REVISIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_CADENZA_REVISIONE = (System.Int32)row[dataColumn];
			//Campo "CODICE_COOPERATIVA"
			dataColumn = dataTable.Columns["CODICE_COOPERATIVA"];
			if(!row.IsNull(dataColumn))
				mappedObject.CODICE_COOPERATIVA = (System.Int32)row[dataColumn];
			//Campo "NUMERO_REPERTORIO_NOTAIO"
			dataColumn = dataTable.Columns["NUMERO_REPERTORIO_NOTAIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_REPERTORIO_NOTAIO = (System.String)row[dataColumn];
			//Campo "FORMA_AMM_CCIAA"
			dataColumn = dataTable.Columns["FORMA_AMM_CCIAA"];
			if(!row.IsNull(dataColumn))
				mappedObject.FORMA_AMM_CCIAA = (System.String)row[dataColumn];
			//Campo "DATA_ACQUISIZIONE_ATTO"
			dataColumn = dataTable.Columns["DATA_ACQUISIZIONE_ATTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_ACQUISIZIONE_ATTO = (System.DateTime)row[dataColumn];
			//Campo "DATA_DEPOSITO_ATTO"
			dataColumn = dataTable.Columns["DATA_DEPOSITO_ATTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_DEPOSITO_ATTO = (System.DateTime)row[dataColumn];
			//Campo "NUMERO_ESAME"
			dataColumn = dataTable.Columns["NUMERO_ESAME"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_ESAME = (System.String)row[dataColumn];
			//Campo "DATA_ESAME"
			dataColumn = dataTable.Columns["DATA_ESAME"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_ESAME = (System.DateTime)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCTREGISTRI
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCTREGISTRI";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = true;
			dataColumn.Unique = true;
			dataColumn.AutoIncrement = true;
			dataColumn = dataTable.Columns.Add("IDOBJ_SOGGETTO", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_REA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_RI", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_ALBO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("FORMA_GIURIDICA_CCIAA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_COSTITUZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DURATA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DURATA_ILLIMITATA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("BILANCIO_ESERCIZIO_AL", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("GRUPPO_PARITETICO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_BFL", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_DEPOSITO_BFL", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_SCIOGLIMENTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ESENTE_VERSAMENTO_UTILI", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IMPORTO_VERSAMENTO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CODICE_OPERATORE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CODICE_UFFICIO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("OPERATOREULTMOD", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORAULTMOD", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_STATO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_TIPO_COSTITUZIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_NOTAIO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_FORMA_AMMINISTRATIVA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_FORMA_GIURIDICA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_CADENZA_REVISIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CODICE_COOPERATIVA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_REPERTORIO_NOTAIO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("FORMA_AMM_CCIAA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_ACQUISIZIONE_ATTO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_DEPOSITO_ATTO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_ESAME", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_ESAME", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_SOGGETTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "NUMERO_REA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "NUMERO_RI":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "NUMERO_ALBO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "FORMA_GIURIDICA_CCIAA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_COSTITUZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DURATA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DURATA_ILLIMITATA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "BILANCIO_ESERCIZIO_AL":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "GRUPPO_PARITETICO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_BFL":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_DEPOSITO_BFL":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NUMERO_SCIOGLIMENTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "ESENTE_VERSAMENTO_UTILI":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IMPORTO_VERSAMENTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "CODICE_OPERATORE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "CODICE_UFFICIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "OPERATOREULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORAULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_STATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_TIPO_COSTITUZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_NOTAIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_FORMA_AMMINISTRATIVA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_FORMA_GIURIDICA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_CADENZA_REVISIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "CODICE_COOPERATIVA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "NUMERO_REPERTORIO_NOTAIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "FORMA_AMM_CCIAA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_ACQUISIZIONE_ATTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_DEPOSITO_ATTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NUMERO_ESAME":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_ESAME":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
