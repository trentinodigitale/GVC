//
//Generated by gvc at 06/04/2010 11.51.23
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCVRICERCAMODIFICHE_STAT
	/// </summary>
	public partial class GVCVRICERCAMODIFICHE_STATCollection
	{
		/// <summary>
		/// Returns the Database Name of the field S_DENOMINAZIONE.
		/// </summary>
		public const string S_DENOMINAZIONEColumnName = "S_DENOMINAZIONE";
		/// <summary>
		/// Returns the Database Name of the field S_IDOBJ.
		/// </summary>
		public const string S_IDOBJColumnName = "S_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ.
		/// </summary>
		public const string R_IDOBJColumnName = "R_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field R_NUMERO_REA.
		/// </summary>
		public const string R_NUMERO_REAColumnName = "R_NUMERO_REA";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ_STATO.
		/// </summary>
		public const string R_IDOBJ_STATOColumnName = "R_IDOBJ_STATO";
		/// <summary>
		/// Returns the Database Name of the field R_BILANCIO_ESERCIZIO_AL.
		/// </summary>
		public const string R_BILANCIO_ESERCIZIO_ALColumnName = "R_BILANCIO_ESERCIZIO_AL";
		/// <summary>
		/// Returns the Database Name of the field ASS_IDOBJ.
		/// </summary>
		public const string ASS_IDOBJColumnName = "ASS_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field ASS_IDOBJ_TIPO_ASSEMBLEA.
		/// </summary>
		public const string ASS_IDOBJ_TIPO_ASSEMBLEAColumnName = "ASS_IDOBJ_TIPO_ASSEMBLEA";
		/// <summary>
		/// Returns the Database Name of the field ASS_DATA_ASSEMBLEA.
		/// </summary>
		public const string ASS_DATA_ASSEMBLEAColumnName = "ASS_DATA_ASSEMBLEA";
		/// <summary>
		/// Returns the Database Name of the field ASS_CONTENUTO.
		/// </summary>
		public const string ASS_CONTENUTOColumnName = "ASS_CONTENUTO";
		/// <summary>
		/// Returns the Database Name of the field MODSTAT_IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string MODSTAT_IDOBJColumnName = "MODSTAT_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field MODSTAT_IDOBJ_TIPO_MODIFICA.
		///The field is mandatory.
		/// </summary>
		public const string MODSTAT_IDOBJ_TIPO_MODIFICAColumnName = "MODSTAT_IDOBJ_TIPO_MODIFICA";
		/// <summary>
		/// Returns the Database Name of the field MODSTAT_VECCHIA_DENOMINAZIONE.
		/// </summary>
		public const string MODSTAT_VECCHIA_DENOMINAZIONEColumnName = "MODSTAT_VECCHIA_DENOMINAZIONE";
		/// <summary>
		/// Returns the Database Name of the field COLL_IDOBJ_SOGGETTO.
		/// </summary>
		public const string COLL_IDOBJ_SOGGETTOColumnName = "COLL_IDOBJ_SOGGETTO";
		/// <summary>
		/// Returns the Database Name of the field ADESIONE_ASSOCIAZIONE.
		/// </summary>
		public const string ADESIONE_ASSOCIAZIONEColumnName = "ADESIONE_ASSOCIAZIONE";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCVRICERCAMODIFICHE_STATCollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCVRICERCAMODIFICHE_STAT
		/// </summary>
		/// <returns>Array of objects GVCVRICERCAMODIFICHE_STAT</returns>
		public virtual GVCVRICERCAMODIFICHE_STAT[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCVRICERCAMODIFICHE_STAT
		/// </summary>
		/// <returns>DataTable of objects GVCVRICERCAMODIFICHE_STAT</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCVRICERCAMODIFICHE_STAT
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCVRICERCAMODIFICHE_STAT selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCVRICERCAMODIFICHE_STAT</returns>
		public GVCVRICERCAMODIFICHE_STAT GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCVRICERCAMODIFICHE_STAT[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCVRICERCAMODIFICHE_STAT selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCVRICERCAMODIFICHE_STAT</returns>
		public GVCVRICERCAMODIFICHE_STAT[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCVRICERCAMODIFICHE_STAT selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCVRICERCAMODIFICHE_STAT</returns>
		public virtual GVCVRICERCAMODIFICHE_STAT[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCAMODIFICHE_STAT selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCVRICERCAMODIFICHE_STAT</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCAMODIFICHE_STAT selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCAMODIFICHE_STAT</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCVRICERCAMODIFICHE_STAT selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("S_DENOMINAZIONE, ");
			sql.Append("S_IDOBJ, ");
			sql.Append("R_IDOBJ, ");
			sql.Append("R_NUMERO_REA, ");
			sql.Append("R_IDOBJ_STATO, ");
			sql.Append("R_BILANCIO_ESERCIZIO_AL, ");
			sql.Append("ASS_IDOBJ, ");
			sql.Append("ASS_IDOBJ_TIPO_ASSEMBLEA, ");
			sql.Append("ASS_DATA_ASSEMBLEA, ");
			sql.Append("ASS_CONTENUTO, ");
			sql.Append("MODSTAT_IDOBJ, ");
			sql.Append("MODSTAT_IDOBJ_TIPO_MODIFICA, ");
			sql.Append("MODSTAT_VECCHIA_DENOMINAZIONE, ");
			sql.Append("COLL_IDOBJ_SOGGETTO, ");
			sql.Append("ADESIONE_ASSOCIAZIONE ");
			sql.Append("FROM GVCVRICERCAMODIFICHE_STAT ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}


		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCAMODIFICHE_STAT
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCVRICERCAMODIFICHE_STAT</returns>
		protected GVCVRICERCAMODIFICHE_STAT[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCAMODIFICHE_STAT
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCVRICERCAMODIFICHE_STAT</returns>
		protected GVCVRICERCAMODIFICHE_STAT[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCVRICERCAMODIFICHE_STAT
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCVRICERCAMODIFICHE_STAT</returns>
		protected virtual GVCVRICERCAMODIFICHE_STAT[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int s_DENOMINAZIONEColumnIndex = reader.GetOrdinal("S_DENOMINAZIONE");
			int s_IDOBJColumnIndex = reader.GetOrdinal("S_IDOBJ");
			int r_IDOBJColumnIndex = reader.GetOrdinal("R_IDOBJ");
			int r_NUMERO_REAColumnIndex = reader.GetOrdinal("R_NUMERO_REA");
			int r_IDOBJ_STATOColumnIndex = reader.GetOrdinal("R_IDOBJ_STATO");
			int r_BILANCIO_ESERCIZIO_ALColumnIndex = reader.GetOrdinal("R_BILANCIO_ESERCIZIO_AL");
			int aSS_IDOBJColumnIndex = reader.GetOrdinal("ASS_IDOBJ");
			int aSS_IDOBJ_TIPO_ASSEMBLEAColumnIndex = reader.GetOrdinal("ASS_IDOBJ_TIPO_ASSEMBLEA");
			int aSS_DATA_ASSEMBLEAColumnIndex = reader.GetOrdinal("ASS_DATA_ASSEMBLEA");
			int aSS_CONTENUTOColumnIndex = reader.GetOrdinal("ASS_CONTENUTO");
			int mODSTAT_IDOBJColumnIndex = reader.GetOrdinal("MODSTAT_IDOBJ");
			int mODSTAT_IDOBJ_TIPO_MODIFICAColumnIndex = reader.GetOrdinal("MODSTAT_IDOBJ_TIPO_MODIFICA");
			int mODSTAT_VECCHIA_DENOMINAZIONEColumnIndex = reader.GetOrdinal("MODSTAT_VECCHIA_DENOMINAZIONE");
			int cOLL_IDOBJ_SOGGETTOColumnIndex = reader.GetOrdinal("COLL_IDOBJ_SOGGETTO");
			int aDESIONE_ASSOCIAZIONEColumnIndex = reader.GetOrdinal("ADESIONE_ASSOCIAZIONE");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCVRICERCAMODIFICHE_STAT record = new GVCVRICERCAMODIFICHE_STAT();
					recordList.Add(record);
					if(!reader.IsDBNull(s_DENOMINAZIONEColumnIndex))
						record.S_DENOMINAZIONE = Convert.ToString(reader.GetValue(s_DENOMINAZIONEColumnIndex));
					if(!reader.IsDBNull(s_IDOBJColumnIndex))
						record.S_IDOBJ = Convert.ToInt32(reader.GetValue(s_IDOBJColumnIndex));
					if(!reader.IsDBNull(r_IDOBJColumnIndex))
						record.R_IDOBJ = Convert.ToInt32(reader.GetValue(r_IDOBJColumnIndex));
					if(!reader.IsDBNull(r_NUMERO_REAColumnIndex))
						record.R_NUMERO_REA = Convert.ToString(reader.GetValue(r_NUMERO_REAColumnIndex));
					if(!reader.IsDBNull(r_IDOBJ_STATOColumnIndex))
						record.R_IDOBJ_STATO = Convert.ToInt32(reader.GetValue(r_IDOBJ_STATOColumnIndex));
					if(!reader.IsDBNull(r_BILANCIO_ESERCIZIO_ALColumnIndex))
						record.R_BILANCIO_ESERCIZIO_AL = Convert.ToDateTime(reader.GetValue(r_BILANCIO_ESERCIZIO_ALColumnIndex));
					if(!reader.IsDBNull(aSS_IDOBJColumnIndex))
						record.ASS_IDOBJ = Convert.ToInt32(reader.GetValue(aSS_IDOBJColumnIndex));
					if(!reader.IsDBNull(aSS_IDOBJ_TIPO_ASSEMBLEAColumnIndex))
						record.ASS_IDOBJ_TIPO_ASSEMBLEA = Convert.ToInt32(reader.GetValue(aSS_IDOBJ_TIPO_ASSEMBLEAColumnIndex));
					if(!reader.IsDBNull(aSS_DATA_ASSEMBLEAColumnIndex))
						record.ASS_DATA_ASSEMBLEA = Convert.ToDateTime(reader.GetValue(aSS_DATA_ASSEMBLEAColumnIndex));
					if(!reader.IsDBNull(aSS_CONTENUTOColumnIndex))
						record.ASS_CONTENUTO = Convert.ToString(reader.GetValue(aSS_CONTENUTOColumnIndex));
					record.MODSTAT_IDOBJ = Convert.ToInt32(reader.GetValue(mODSTAT_IDOBJColumnIndex));
					record.MODSTAT_IDOBJ_TIPO_MODIFICA = Convert.ToInt32(reader.GetValue(mODSTAT_IDOBJ_TIPO_MODIFICAColumnIndex));
					if(!reader.IsDBNull(mODSTAT_VECCHIA_DENOMINAZIONEColumnIndex))
						record.MODSTAT_VECCHIA_DENOMINAZIONE = Convert.ToString(reader.GetValue(mODSTAT_VECCHIA_DENOMINAZIONEColumnIndex));
					if(!reader.IsDBNull(cOLL_IDOBJ_SOGGETTOColumnIndex))
						record.COLL_IDOBJ_SOGGETTO = Convert.ToInt32(reader.GetValue(cOLL_IDOBJ_SOGGETTOColumnIndex));
					if(!reader.IsDBNull(aDESIONE_ASSOCIAZIONEColumnIndex))
						record.ADESIONE_ASSOCIAZIONE = Convert.ToString(reader.GetValue(aDESIONE_ASSOCIAZIONEColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCVRICERCAMODIFICHE_STAT[])(recordList.ToArray(typeof(GVCVRICERCAMODIFICHE_STAT)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCVRICERCAMODIFICHE_STAT</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCVRICERCAMODIFICHE_STAT</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCAMODIFICHE_STAT</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCVRICERCAMODIFICHE_STAT
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCVRICERCAMODIFICHE_STAT</returns>
		protected virtual GVCVRICERCAMODIFICHE_STAT MapRow(DataRow row)
		{
			GVCVRICERCAMODIFICHE_STAT mappedObject = new GVCVRICERCAMODIFICHE_STAT();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "S_DENOMINAZIONE"
			dataColumn = dataTable.Columns["S_DENOMINAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_DENOMINAZIONE = (System.String)row[dataColumn];
			//Campo "S_IDOBJ"
			dataColumn = dataTable.Columns["S_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "R_IDOBJ"
			dataColumn = dataTable.Columns["R_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "R_NUMERO_REA"
			dataColumn = dataTable.Columns["R_NUMERO_REA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_NUMERO_REA = (System.String)row[dataColumn];
			//Campo "R_IDOBJ_STATO"
			dataColumn = dataTable.Columns["R_IDOBJ_STATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ_STATO = (System.Int32)row[dataColumn];
			//Campo "R_BILANCIO_ESERCIZIO_AL"
			dataColumn = dataTable.Columns["R_BILANCIO_ESERCIZIO_AL"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_BILANCIO_ESERCIZIO_AL = (System.DateTime)row[dataColumn];
			//Campo "ASS_IDOBJ"
			dataColumn = dataTable.Columns["ASS_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.ASS_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "ASS_IDOBJ_TIPO_ASSEMBLEA"
			dataColumn = dataTable.Columns["ASS_IDOBJ_TIPO_ASSEMBLEA"];
			if(!row.IsNull(dataColumn))
				mappedObject.ASS_IDOBJ_TIPO_ASSEMBLEA = (System.Int32)row[dataColumn];
			//Campo "ASS_DATA_ASSEMBLEA"
			dataColumn = dataTable.Columns["ASS_DATA_ASSEMBLEA"];
			if(!row.IsNull(dataColumn))
				mappedObject.ASS_DATA_ASSEMBLEA = (System.DateTime)row[dataColumn];
			//Campo "ASS_CONTENUTO"
			dataColumn = dataTable.Columns["ASS_CONTENUTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.ASS_CONTENUTO = (System.String)row[dataColumn];
			//Campo "MODSTAT_IDOBJ"
			dataColumn = dataTable.Columns["MODSTAT_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.MODSTAT_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "MODSTAT_IDOBJ_TIPO_MODIFICA"
			dataColumn = dataTable.Columns["MODSTAT_IDOBJ_TIPO_MODIFICA"];
			if(!row.IsNull(dataColumn))
				mappedObject.MODSTAT_IDOBJ_TIPO_MODIFICA = (System.Int32)row[dataColumn];
			//Campo "MODSTAT_VECCHIA_DENOMINAZIONE"
			dataColumn = dataTable.Columns["MODSTAT_VECCHIA_DENOMINAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.MODSTAT_VECCHIA_DENOMINAZIONE = (System.String)row[dataColumn];
			//Campo "COLL_IDOBJ_SOGGETTO"
			dataColumn = dataTable.Columns["COLL_IDOBJ_SOGGETTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.COLL_IDOBJ_SOGGETTO = (System.Int32)row[dataColumn];
			//Campo "ADESIONE_ASSOCIAZIONE"
			dataColumn = dataTable.Columns["ADESIONE_ASSOCIAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.ADESIONE_ASSOCIAZIONE = (System.String)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCVRICERCAMODIFICHE_STAT
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCVRICERCAMODIFICHE_STAT";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("S_DENOMINAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("S_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_NUMERO_REA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ_STATO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_BILANCIO_ESERCIZIO_AL", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ASS_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ASS_IDOBJ_TIPO_ASSEMBLEA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ASS_DATA_ASSEMBLEA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ASS_CONTENUTO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("MODSTAT_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("MODSTAT_IDOBJ_TIPO_MODIFICA", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("MODSTAT_VECCHIA_DENOMINAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COLL_IDOBJ_SOGGETTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ADESIONE_ASSOCIAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "S_DENOMINAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "S_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_NUMERO_REA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_IDOBJ_STATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_BILANCIO_ESERCIZIO_AL":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "ASS_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "ASS_IDOBJ_TIPO_ASSEMBLEA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "ASS_DATA_ASSEMBLEA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "ASS_CONTENUTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "MODSTAT_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "MODSTAT_IDOBJ_TIPO_MODIFICA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "MODSTAT_VECCHIA_DENOMINAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "COLL_IDOBJ_SOGGETTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "ADESIONE_ASSOCIAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
