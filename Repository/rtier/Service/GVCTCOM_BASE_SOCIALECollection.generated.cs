//
//Generated by gvc at 26/03/2009 9.03.13
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCTCOM_BASE_SOCIALE
	/// </summary>
	public partial class GVCTCOM_BASE_SOCIALECollection
	{
		/// <summary>
		/// Returns the Database Name of the field IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJColumnName = "IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_REGISTRO.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_REGISTROColumnName = "IDOBJ_REGISTRO";
		/// <summary>
		/// Returns the Database Name of the field DATA_COMUNICAZIONE.
		/// </summary>
		public const string DATA_COMUNICAZIONEColumnName = "DATA_COMUNICAZIONE";
		/// <summary>
		/// Returns the Database Name of the field DATA_SITUAZIONE.
		///The field is mandatory.
		/// </summary>
		public const string DATA_SITUAZIONEColumnName = "DATA_SITUAZIONE";
		/// <summary>
		/// Returns the Database Name of the field SOCI_COOPERATORI.
		/// </summary>
		public const string SOCI_COOPERATORIColumnName = "SOCI_COOPERATORI";
		/// <summary>
		/// Returns the Database Name of the field SOCI_SOVVENTORI.
		/// </summary>
		public const string SOCI_SOVVENTORIColumnName = "SOCI_SOVVENTORI";
		/// <summary>
		/// Returns the Database Name of the field ALTRI_SOCI.
		/// </summary>
		public const string ALTRI_SOCIColumnName = "ALTRI_SOCI";
		/// <summary>
		/// Returns the Database Name of the field LAVORATORI.
		/// </summary>
		public const string LAVORATORIColumnName = "LAVORATORI";
		/// <summary>
		/// Returns the Database Name of the field LAVORATORI_SOCI.
		/// </summary>
		public const string LAVORATORI_SOCIColumnName = "LAVORATORI_SOCI";
		/// <summary>
		/// Returns the Database Name of the field LAVORATORI_REMUNERATI.
		/// </summary>
		public const string LAVORATORI_REMUNERATIColumnName = "LAVORATORI_REMUNERATI";
		/// <summary>
		/// Returns the Database Name of the field SOCI_UTENTI.
		/// </summary>
		public const string SOCI_UTENTIColumnName = "SOCI_UTENTI";
		/// <summary>
		/// Returns the Database Name of the field SOCI_VOLONTARI.
		/// </summary>
		public const string SOCI_VOLONTARIColumnName = "SOCI_VOLONTARI";
		/// <summary>
		/// Returns the Database Name of the field SOCI_PG.
		/// </summary>
		public const string SOCI_PGColumnName = "SOCI_PG";
		/// <summary>
		/// Returns the Database Name of the field LAVORATORI_TUTTI.
		/// </summary>
		public const string LAVORATORI_TUTTIColumnName = "LAVORATORI_TUTTI";
		/// <summary>
		/// Returns the Database Name of the field PERSONE_SVANTAGGIATE.
		/// </summary>
		public const string PERSONE_SVANTAGGIATEColumnName = "PERSONE_SVANTAGGIATE";
		/// <summary>
		/// Returns the Database Name of the field CONFERIMENTO_CAPITALE.
		/// </summary>
		public const string CONFERIMENTO_CAPITALEColumnName = "CONFERIMENTO_CAPITALE";
		/// <summary>
		/// Returns the Database Name of the field VALORE_QUOTE.
		/// </summary>
		public const string VALORE_QUOTEColumnName = "VALORE_QUOTE";
		/// <summary>
		/// Returns the Database Name of the field VALORE_AZIONE.
		/// </summary>
		public const string VALORE_AZIONEColumnName = "VALORE_AZIONE";
		/// <summary>
		/// Returns the Database Name of the field CAPITALE_SOTTOSCRITTO.
		/// </summary>
		public const string CAPITALE_SOTTOSCRITTOColumnName = "CAPITALE_SOTTOSCRITTO";
		/// <summary>
		/// Returns the Database Name of the field CAPITALE_VERSATO.
		/// </summary>
		public const string CAPITALE_VERSATOColumnName = "CAPITALE_VERSATO";
		/// <summary>
		/// Returns the Database Name of the field NOTE.
		/// </summary>
		public const string NOTEColumnName = "NOTE";
		/// <summary>
		/// Returns the Database Name of the field OPERATOREULTMOD.
		/// </summary>
		public const string OPERATOREULTMODColumnName = "OPERATOREULTMOD";
		/// <summary>
		/// Returns the Database Name of the field DATAORAULTMOD.
		/// </summary>
		public const string DATAORAULTMODColumnName = "DATAORAULTMOD";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCTCOM_BASE_SOCIALECollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <returns>Array of objects GVCTCOM_BASE_SOCIALE</returns>
		public virtual GVCTCOM_BASE_SOCIALE[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <returns>DataTable of objects GVCTCOM_BASE_SOCIALE</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCTCOM_BASE_SOCIALE selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCTCOM_BASE_SOCIALE</returns>
		public GVCTCOM_BASE_SOCIALE GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCTCOM_BASE_SOCIALE[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCTCOM_BASE_SOCIALE selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCTCOM_BASE_SOCIALE</returns>
		public GVCTCOM_BASE_SOCIALE[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCTCOM_BASE_SOCIALE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCTCOM_BASE_SOCIALE</returns>
		public virtual GVCTCOM_BASE_SOCIALE[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTCOM_BASE_SOCIALE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCTCOM_BASE_SOCIALE</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTCOM_BASE_SOCIALE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTCOM_BASE_SOCIALE</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCTCOM_BASE_SOCIALE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("IDOBJ, ");
			sql.Append("IDOBJ_REGISTRO, ");
			sql.Append("DATA_COMUNICAZIONE, ");
			sql.Append("DATA_SITUAZIONE, ");
			sql.Append("SOCI_COOPERATORI, ");
			sql.Append("SOCI_SOVVENTORI, ");
			sql.Append("ALTRI_SOCI, ");
			sql.Append("LAVORATORI, ");
			sql.Append("LAVORATORI_SOCI, ");
			sql.Append("LAVORATORI_REMUNERATI, ");
			sql.Append("SOCI_UTENTI, ");
			sql.Append("SOCI_VOLONTARI, ");
			sql.Append("SOCI_PG, ");
			sql.Append("LAVORATORI_TUTTI, ");
			sql.Append("PERSONE_SVANTAGGIATE, ");
			sql.Append("CONFERIMENTO_CAPITALE, ");
			sql.Append("VALORE_QUOTE, ");
			sql.Append("VALORE_AZIONE, ");
			sql.Append("CAPITALE_SOTTOSCRITTO, ");
			sql.Append("CAPITALE_VERSATO, ");
			sql.Append("NOTE, ");
			sql.Append("OPERATOREULTMOD, ");
			sql.Append("DATAORAULTMOD ");
			sql.Append("FROM GVCTCOM_BASE_SOCIALE ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Returns an object GVCTCOM_BASE_SOCIALE selected by a primary key
		/// </summary>
		/// <param name="IDOBJ">The primary key of the object</param>
		/// <returns>Object of type GVCTCOM_BASE_SOCIALE</returns>
		public virtual GVCTCOM_BASE_SOCIALE GetByPrimaryKey(System.Int32 IDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateGetCommand(whereSql, null))
			{
				AddParameter(cmd, "IDOBJ", IDOBJ);
				GVCTCOM_BASE_SOCIALE[] tempArray = MapRecords(cmd);
				return tempArray.Length == 0 ? null : tempArray[0];
			}
		}


		/// <summary>
		/// Returns an object GVCTCOM_BASE_SOCIALE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key of the object</param>
		/// <returns>Object of type GVCTCOM_BASE_SOCIALE</returns>
		public virtual GVCTCOM_BASE_SOCIALE[] GetByIDOBJ_REGISTRO(System.Int32 iDOBJ_REGISTRO)
		{
			return MapRecords(CreateGetByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTCOM_BASE_SOCIALE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_REGISTROAsDataTable(System.Int32 iDOBJ_REGISTRO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_REGISTROCommand(System.Int32 iDOBJ_REGISTRO)
		{
			string whereSql = "IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_REGISTRO", iDOBJ_REGISTRO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_REGISTRO(System.Int32 iDOBJ_REGISTRO)
		{
			return CreateDeleteByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_REGISTROCommand(System.Int32 iDOBJ_REGISTRO)
		{
			string whereSql = "IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_REGISTRO", iDOBJ_REGISTRO);
			return cmd;
		}

		/// <summary>
		/// Inserts in the Database an object GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <param name="valore">The object to insert</param>
		public virtual void Insert(GVCTCOM_BASE_SOCIALE valore)
		{
			System.Int32 id = -1;
			System.String sqlStr;

			sqlStr = "SELECT GVCTCOM_BASE_SOCIALE_SEQ.NEXTVAL FROM DUAL";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				id = Convert.ToInt32(cmd.ExecuteScalar());
			}

			sqlStr = "INSERT INTO GVCTCOM_BASE_SOCIALE (" +
			"IDOBJ, " +
			"IDOBJ_REGISTRO, " +
			"DATA_COMUNICAZIONE, " +
			"DATA_SITUAZIONE, " +
			"SOCI_COOPERATORI, " +
			"SOCI_SOVVENTORI, " +
			"ALTRI_SOCI, " +
			"LAVORATORI, " +
			"LAVORATORI_SOCI, " +
			"LAVORATORI_REMUNERATI, " +
			"SOCI_UTENTI, " +
			"SOCI_VOLONTARI, " +
			"SOCI_PG, " +
			"LAVORATORI_TUTTI, " +
			"PERSONE_SVANTAGGIATE, " +
			"CONFERIMENTO_CAPITALE, " +
			"VALORE_QUOTE, " +
			"VALORE_AZIONE, " +
			"CAPITALE_SOTTOSCRITTO, " +
			"CAPITALE_VERSATO, " +
			"NOTE, " +
			"OPERATOREULTMOD, " +
			"DATAORAULTMOD) " +
			"VALUES (" + id.ToString() + ", " +
			_db.CreateSqlParameterName("IDOBJ_REGISTRO") + ", " +
			_db.CreateSqlParameterName("DATA_COMUNICAZIONE") + ", " +
			_db.CreateSqlParameterName("DATA_SITUAZIONE") + ", " +
			_db.CreateSqlParameterName("SOCI_COOPERATORI") + ", " +
			_db.CreateSqlParameterName("SOCI_SOVVENTORI") + ", " +
			_db.CreateSqlParameterName("ALTRI_SOCI") + ", " +
			_db.CreateSqlParameterName("LAVORATORI") + ", " +
			_db.CreateSqlParameterName("LAVORATORI_SOCI") + ", " +
			_db.CreateSqlParameterName("LAVORATORI_REMUNERATI") + ", " +
			_db.CreateSqlParameterName("SOCI_UTENTI") + ", " +
			_db.CreateSqlParameterName("SOCI_VOLONTARI") + ", " +
			_db.CreateSqlParameterName("SOCI_PG") + ", " +
			_db.CreateSqlParameterName("LAVORATORI_TUTTI") + ", " +
			_db.CreateSqlParameterName("PERSONE_SVANTAGGIATE") + ", " +
			_db.CreateSqlParameterName("CONFERIMENTO_CAPITALE") + ", " +
			_db.CreateSqlParameterName("VALORE_QUOTE") + ", " +
			_db.CreateSqlParameterName("VALORE_AZIONE") + ", " +
			_db.CreateSqlParameterName("CAPITALE_SOTTOSCRITTO") + ", " +
			_db.CreateSqlParameterName("CAPITALE_VERSATO") + ", " +
			_db.CreateSqlParameterName("NOTE") + ", " +
			_db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
			_db.CreateSqlParameterName("DATAORAULTMOD") + ")";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ_REGISTRO", valore.IDOBJ_REGISTRO);
				AddParameter(cmd, "DATA_COMUNICAZIONE", valore.IsDATA_COMUNICAZIONENull ? DBNull.Value : (object)valore.DATA_COMUNICAZIONE);
				AddParameter(cmd, "DATA_SITUAZIONE", valore.DATA_SITUAZIONE);
				AddParameter(cmd, "SOCI_COOPERATORI", valore.IsSOCI_COOPERATORINull ? DBNull.Value : (object)valore.SOCI_COOPERATORI);
				AddParameter(cmd, "SOCI_SOVVENTORI", valore.IsSOCI_SOVVENTORINull ? DBNull.Value : (object)valore.SOCI_SOVVENTORI);
				AddParameter(cmd, "ALTRI_SOCI", valore.IsALTRI_SOCINull ? DBNull.Value : (object)valore.ALTRI_SOCI);
				AddParameter(cmd, "LAVORATORI", valore.IsLAVORATORINull ? DBNull.Value : (object)valore.LAVORATORI);
				AddParameter(cmd, "LAVORATORI_SOCI", valore.IsLAVORATORI_SOCINull ? DBNull.Value : (object)valore.LAVORATORI_SOCI);
				AddParameter(cmd, "LAVORATORI_REMUNERATI", valore.IsLAVORATORI_REMUNERATINull ? DBNull.Value : (object)valore.LAVORATORI_REMUNERATI);
				AddParameter(cmd, "SOCI_UTENTI", valore.IsSOCI_UTENTINull ? DBNull.Value : (object)valore.SOCI_UTENTI);
				AddParameter(cmd, "SOCI_VOLONTARI", valore.IsSOCI_VOLONTARINull ? DBNull.Value : (object)valore.SOCI_VOLONTARI);
				AddParameter(cmd, "SOCI_PG", valore.IsSOCI_PGNull ? DBNull.Value : (object)valore.SOCI_PG);
				AddParameter(cmd, "LAVORATORI_TUTTI", valore.IsLAVORATORI_TUTTINull ? DBNull.Value : (object)valore.LAVORATORI_TUTTI);
				AddParameter(cmd, "PERSONE_SVANTAGGIATE", valore.IsPERSONE_SVANTAGGIATENull ? DBNull.Value : (object)valore.PERSONE_SVANTAGGIATE);
				AddParameter(cmd, "CONFERIMENTO_CAPITALE", valore.IsCONFERIMENTO_CAPITALENull ? DBNull.Value : (object)valore.CONFERIMENTO_CAPITALE);
				AddParameter(cmd, "VALORE_QUOTE", valore.IsVALORE_QUOTENull ? DBNull.Value : (object)valore.VALORE_QUOTE);
				AddParameter(cmd, "VALORE_AZIONE", valore.IsVALORE_AZIONENull ? DBNull.Value : (object)valore.VALORE_AZIONE);
				AddParameter(cmd, "CAPITALE_SOTTOSCRITTO", valore.IsCAPITALE_SOTTOSCRITTONull ? DBNull.Value : (object)valore.CAPITALE_SOTTOSCRITTO);
				AddParameter(cmd, "CAPITALE_VERSATO", valore.IsCAPITALE_VERSATONull ? DBNull.Value : (object)valore.CAPITALE_VERSATO);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				cmd.ExecuteScalar();
				valore.IDOBJ = id;
			}
		}

		/// <summary>
		/// Updates in the Database an object GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <param name="valore">The object to update</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool Update(GVCTCOM_BASE_SOCIALE valore)
		{
			System.String sqlStr = "UPDATE GVCTCOM_BASE_SOCIALE SET " +
				"IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO") + ", " +
				"DATA_COMUNICAZIONE = " + _db.CreateSqlParameterName("DATA_COMUNICAZIONE") + ", " +
				"DATA_SITUAZIONE = " + _db.CreateSqlParameterName("DATA_SITUAZIONE") + ", " +
				"SOCI_COOPERATORI = " + _db.CreateSqlParameterName("SOCI_COOPERATORI") + ", " +
				"SOCI_SOVVENTORI = " + _db.CreateSqlParameterName("SOCI_SOVVENTORI") + ", " +
				"ALTRI_SOCI = " + _db.CreateSqlParameterName("ALTRI_SOCI") + ", " +
				"LAVORATORI = " + _db.CreateSqlParameterName("LAVORATORI") + ", " +
				"LAVORATORI_SOCI = " + _db.CreateSqlParameterName("LAVORATORI_SOCI") + ", " +
				"LAVORATORI_REMUNERATI = " + _db.CreateSqlParameterName("LAVORATORI_REMUNERATI") + ", " +
				"SOCI_UTENTI = " + _db.CreateSqlParameterName("SOCI_UTENTI") + ", " +
				"SOCI_VOLONTARI = " + _db.CreateSqlParameterName("SOCI_VOLONTARI") + ", " +
				"SOCI_PG = " + _db.CreateSqlParameterName("SOCI_PG") + ", " +
				"LAVORATORI_TUTTI = " + _db.CreateSqlParameterName("LAVORATORI_TUTTI") + ", " +
				"PERSONE_SVANTAGGIATE = " + _db.CreateSqlParameterName("PERSONE_SVANTAGGIATE") + ", " +
				"CONFERIMENTO_CAPITALE = " + _db.CreateSqlParameterName("CONFERIMENTO_CAPITALE") + ", " +
				"VALORE_QUOTE = " + _db.CreateSqlParameterName("VALORE_QUOTE") + ", " +
				"VALORE_AZIONE = " + _db.CreateSqlParameterName("VALORE_AZIONE") + ", " +
				"CAPITALE_SOTTOSCRITTO = " + _db.CreateSqlParameterName("CAPITALE_SOTTOSCRITTO") + ", " +
				"CAPITALE_VERSATO = " + _db.CreateSqlParameterName("CAPITALE_VERSATO") + ", " +
				"NOTE = " + _db.CreateSqlParameterName("NOTE") + ", " +
				"OPERATOREULTMOD = " + _db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
				"DATAORAULTMOD = " + _db.CreateSqlParameterName("DATAORAULTMOD") +
				" WHERE " +
				"IDOBJ = " + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ", valore.IDOBJ);
				AddParameter(cmd, "IDOBJ_REGISTRO", valore.IDOBJ_REGISTRO);
				AddParameter(cmd, "DATA_COMUNICAZIONE", valore.IsDATA_COMUNICAZIONENull ? DBNull.Value : (object)valore.DATA_COMUNICAZIONE);
				AddParameter(cmd, "DATA_SITUAZIONE", valore.DATA_SITUAZIONE);
				AddParameter(cmd, "SOCI_COOPERATORI", valore.IsSOCI_COOPERATORINull ? DBNull.Value : (object)valore.SOCI_COOPERATORI);
				AddParameter(cmd, "SOCI_SOVVENTORI", valore.IsSOCI_SOVVENTORINull ? DBNull.Value : (object)valore.SOCI_SOVVENTORI);
				AddParameter(cmd, "ALTRI_SOCI", valore.IsALTRI_SOCINull ? DBNull.Value : (object)valore.ALTRI_SOCI);
				AddParameter(cmd, "LAVORATORI", valore.IsLAVORATORINull ? DBNull.Value : (object)valore.LAVORATORI);
				AddParameter(cmd, "LAVORATORI_SOCI", valore.IsLAVORATORI_SOCINull ? DBNull.Value : (object)valore.LAVORATORI_SOCI);
				AddParameter(cmd, "LAVORATORI_REMUNERATI", valore.IsLAVORATORI_REMUNERATINull ? DBNull.Value : (object)valore.LAVORATORI_REMUNERATI);
				AddParameter(cmd, "SOCI_UTENTI", valore.IsSOCI_UTENTINull ? DBNull.Value : (object)valore.SOCI_UTENTI);
				AddParameter(cmd, "SOCI_VOLONTARI", valore.IsSOCI_VOLONTARINull ? DBNull.Value : (object)valore.SOCI_VOLONTARI);
				AddParameter(cmd, "SOCI_PG", valore.IsSOCI_PGNull ? DBNull.Value : (object)valore.SOCI_PG);
				AddParameter(cmd, "LAVORATORI_TUTTI", valore.IsLAVORATORI_TUTTINull ? DBNull.Value : (object)valore.LAVORATORI_TUTTI);
				AddParameter(cmd, "PERSONE_SVANTAGGIATE", valore.IsPERSONE_SVANTAGGIATENull ? DBNull.Value : (object)valore.PERSONE_SVANTAGGIATE);
				AddParameter(cmd, "CONFERIMENTO_CAPITALE", valore.IsCONFERIMENTO_CAPITALENull ? DBNull.Value : (object)valore.CONFERIMENTO_CAPITALE);
				AddParameter(cmd, "VALORE_QUOTE", valore.IsVALORE_QUOTENull ? DBNull.Value : (object)valore.VALORE_QUOTE);
				AddParameter(cmd, "VALORE_AZIONE", valore.IsVALORE_AZIONENull ? DBNull.Value : (object)valore.VALORE_AZIONE);
				AddParameter(cmd, "CAPITALE_SOTTOSCRITTO", valore.IsCAPITALE_SOTTOSCRITTONull ? DBNull.Value : (object)valore.CAPITALE_SOTTOSCRITTO);
				AddParameter(cmd, "CAPITALE_VERSATO", valore.IsCAPITALE_VERSATONull ? DBNull.Value : (object)valore.CAPITALE_VERSATO);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				return cmd.ExecuteNonQuery() != 0;
			}
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTCOM_BASE_SOCIALE</param>
		public void Update(DataTable table)
		{
			Update(table, true);
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTCOM_BASE_SOCIALE</param>
		/// <param name="acceptChanges">true to accept the changes, otherwise false</param>
		public virtual void Update(DataTable table, bool acceptChanges)
		{
			DataRowCollection rows = table.Rows;
			for(int i = rows.Count - 1; i >= 0; i--)
			{
				DataRow row = rows[i];
				switch(row.RowState)
				{
					case DataRowState.Added:
						Insert(MapRow(row));
						if(acceptChanges)
							row.AcceptChanges();
						break;

					case DataRowState.Deleted:
						row.RejectChanges();
						try
						{
							DeleteByPrimaryKey((System.Int32)row["IDOBJ"]);
						}
						finally
						{
							row.Delete();
						}
						if(acceptChanges)
							row.AcceptChanges();
						break;

				case DataRowState.Modified:
					Update(MapRow(row));
					if(acceptChanges)
						row.AcceptChanges();
					break;
				}
			}
		}

		/// <summary>
		/// Deletes from the Database an object GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <param name="valore">The object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public bool Delete(GVCTCOM_BASE_SOCIALE valore)
		{
			return DeleteByPrimaryKey(valore.IDOBJ);
		}

		/// <summary>
		/// Deletes from the Database an object GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <param name="iDOBJ">The primary key of the object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool DeleteByPrimaryKey(System.Int32 iDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateDeleteCommand(whereSql))
			{
				AddParameter(cmd, "IDOBJ" , iDOBJ);
				return cmd.ExecuteNonQuery() > 0;
			}
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTCOM_BASE_SOCIALE selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>The number of the deleted objects</returns>
		public int Delete(System.String whereSql)
		{
			return CreateDeleteCommand(whereSql).ExecuteNonQuery();
		}

		/// <summary>
		/// Returns an IDbCommand to delete the objects GVCTCOM_BASE_SOCIALE selected by 
		/// a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteCommand(string whereSql)
		{
			StringBuilder sql = new StringBuilder("DELETE FROM GVCTCOM_BASE_SOCIALE");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format(" WHERE {0}", whereSql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Deletes all the objects GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteAll()
		{
			return Delete("");
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCTCOM_BASE_SOCIALE</returns>
		protected GVCTCOM_BASE_SOCIALE[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCTCOM_BASE_SOCIALE</returns>
		protected GVCTCOM_BASE_SOCIALE[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCTCOM_BASE_SOCIALE</returns>
		protected virtual GVCTCOM_BASE_SOCIALE[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int iDOBJColumnIndex = reader.GetOrdinal("IDOBJ");
			int iDOBJ_REGISTROColumnIndex = reader.GetOrdinal("IDOBJ_REGISTRO");
			int dATA_COMUNICAZIONEColumnIndex = reader.GetOrdinal("DATA_COMUNICAZIONE");
			int dATA_SITUAZIONEColumnIndex = reader.GetOrdinal("DATA_SITUAZIONE");
			int sOCI_COOPERATORIColumnIndex = reader.GetOrdinal("SOCI_COOPERATORI");
			int sOCI_SOVVENTORIColumnIndex = reader.GetOrdinal("SOCI_SOVVENTORI");
			int aLTRI_SOCIColumnIndex = reader.GetOrdinal("ALTRI_SOCI");
			int lAVORATORIColumnIndex = reader.GetOrdinal("LAVORATORI");
			int lAVORATORI_SOCIColumnIndex = reader.GetOrdinal("LAVORATORI_SOCI");
			int lAVORATORI_REMUNERATIColumnIndex = reader.GetOrdinal("LAVORATORI_REMUNERATI");
			int sOCI_UTENTIColumnIndex = reader.GetOrdinal("SOCI_UTENTI");
			int sOCI_VOLONTARIColumnIndex = reader.GetOrdinal("SOCI_VOLONTARI");
			int sOCI_PGColumnIndex = reader.GetOrdinal("SOCI_PG");
			int lAVORATORI_TUTTIColumnIndex = reader.GetOrdinal("LAVORATORI_TUTTI");
			int pERSONE_SVANTAGGIATEColumnIndex = reader.GetOrdinal("PERSONE_SVANTAGGIATE");
			int cONFERIMENTO_CAPITALEColumnIndex = reader.GetOrdinal("CONFERIMENTO_CAPITALE");
			int vALORE_QUOTEColumnIndex = reader.GetOrdinal("VALORE_QUOTE");
			int vALORE_AZIONEColumnIndex = reader.GetOrdinal("VALORE_AZIONE");
			int cAPITALE_SOTTOSCRITTOColumnIndex = reader.GetOrdinal("CAPITALE_SOTTOSCRITTO");
			int cAPITALE_VERSATOColumnIndex = reader.GetOrdinal("CAPITALE_VERSATO");
			int nOTEColumnIndex = reader.GetOrdinal("NOTE");
			int oPERATOREULTMODColumnIndex = reader.GetOrdinal("OPERATOREULTMOD");
			int dATAORAULTMODColumnIndex = reader.GetOrdinal("DATAORAULTMOD");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCTCOM_BASE_SOCIALE record = new GVCTCOM_BASE_SOCIALE();
					recordList.Add(record);
					record.IDOBJ = Convert.ToInt32(reader.GetValue(iDOBJColumnIndex));
					record.IDOBJ_REGISTRO = Convert.ToInt32(reader.GetValue(iDOBJ_REGISTROColumnIndex));
					if(!reader.IsDBNull(dATA_COMUNICAZIONEColumnIndex))
						record.DATA_COMUNICAZIONE = Convert.ToDateTime(reader.GetValue(dATA_COMUNICAZIONEColumnIndex));
					record.DATA_SITUAZIONE = Convert.ToDateTime(reader.GetValue(dATA_SITUAZIONEColumnIndex));
					if(!reader.IsDBNull(sOCI_COOPERATORIColumnIndex))
						record.SOCI_COOPERATORI = Convert.ToInt32(reader.GetValue(sOCI_COOPERATORIColumnIndex));
					if(!reader.IsDBNull(sOCI_SOVVENTORIColumnIndex))
						record.SOCI_SOVVENTORI = Convert.ToInt32(reader.GetValue(sOCI_SOVVENTORIColumnIndex));
					if(!reader.IsDBNull(aLTRI_SOCIColumnIndex))
						record.ALTRI_SOCI = Convert.ToInt32(reader.GetValue(aLTRI_SOCIColumnIndex));
					if(!reader.IsDBNull(lAVORATORIColumnIndex))
						record.LAVORATORI = Convert.ToInt32(reader.GetValue(lAVORATORIColumnIndex));
					if(!reader.IsDBNull(lAVORATORI_SOCIColumnIndex))
						record.LAVORATORI_SOCI = Convert.ToInt32(reader.GetValue(lAVORATORI_SOCIColumnIndex));
					if(!reader.IsDBNull(lAVORATORI_REMUNERATIColumnIndex))
						record.LAVORATORI_REMUNERATI = Convert.ToInt32(reader.GetValue(lAVORATORI_REMUNERATIColumnIndex));
					if(!reader.IsDBNull(sOCI_UTENTIColumnIndex))
						record.SOCI_UTENTI = Convert.ToInt32(reader.GetValue(sOCI_UTENTIColumnIndex));
					if(!reader.IsDBNull(sOCI_VOLONTARIColumnIndex))
						record.SOCI_VOLONTARI = Convert.ToInt32(reader.GetValue(sOCI_VOLONTARIColumnIndex));
					if(!reader.IsDBNull(sOCI_PGColumnIndex))
						record.SOCI_PG = Convert.ToInt32(reader.GetValue(sOCI_PGColumnIndex));
					if(!reader.IsDBNull(lAVORATORI_TUTTIColumnIndex))
						record.LAVORATORI_TUTTI = Convert.ToInt32(reader.GetValue(lAVORATORI_TUTTIColumnIndex));
					if(!reader.IsDBNull(pERSONE_SVANTAGGIATEColumnIndex))
						record.PERSONE_SVANTAGGIATE = Convert.ToInt32(reader.GetValue(pERSONE_SVANTAGGIATEColumnIndex));
					if(!reader.IsDBNull(cONFERIMENTO_CAPITALEColumnIndex))
						record.CONFERIMENTO_CAPITALE = Convert.ToInt32(reader.GetValue(cONFERIMENTO_CAPITALEColumnIndex));
					if(!reader.IsDBNull(vALORE_QUOTEColumnIndex))
						record.VALORE_QUOTE = Convert.ToDouble(reader.GetValue(vALORE_QUOTEColumnIndex));
					if(!reader.IsDBNull(vALORE_AZIONEColumnIndex))
						record.VALORE_AZIONE = Convert.ToDouble(reader.GetValue(vALORE_AZIONEColumnIndex));
					if(!reader.IsDBNull(cAPITALE_SOTTOSCRITTOColumnIndex))
						record.CAPITALE_SOTTOSCRITTO = Convert.ToDouble(reader.GetValue(cAPITALE_SOTTOSCRITTOColumnIndex));
					if(!reader.IsDBNull(cAPITALE_VERSATOColumnIndex))
						record.CAPITALE_VERSATO = Convert.ToDouble(reader.GetValue(cAPITALE_VERSATOColumnIndex));
					if(!reader.IsDBNull(nOTEColumnIndex))
						record.NOTE = Convert.ToString(reader.GetValue(nOTEColumnIndex));
					if(!reader.IsDBNull(oPERATOREULTMODColumnIndex))
						record.OPERATOREULTMOD = Convert.ToString(reader.GetValue(oPERATOREULTMODColumnIndex));
					if(!reader.IsDBNull(dATAORAULTMODColumnIndex))
						record.DATAORAULTMOD = Convert.ToDateTime(reader.GetValue(dATAORAULTMODColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCTCOM_BASE_SOCIALE[])(recordList.ToArray(typeof(GVCTCOM_BASE_SOCIALE)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCTCOM_BASE_SOCIALE</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCTCOM_BASE_SOCIALE</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTCOM_BASE_SOCIALE</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCTCOM_BASE_SOCIALE</returns>
		protected virtual GVCTCOM_BASE_SOCIALE MapRow(DataRow row)
		{
			GVCTCOM_BASE_SOCIALE mappedObject = new GVCTCOM_BASE_SOCIALE();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "IDOBJ"
			dataColumn = dataTable.Columns["IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_REGISTRO"
			dataColumn = dataTable.Columns["IDOBJ_REGISTRO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_REGISTRO = (System.Int32)row[dataColumn];
			//Campo "DATA_COMUNICAZIONE"
			dataColumn = dataTable.Columns["DATA_COMUNICAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_COMUNICAZIONE = (System.DateTime)row[dataColumn];
			//Campo "DATA_SITUAZIONE"
			dataColumn = dataTable.Columns["DATA_SITUAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_SITUAZIONE = (System.DateTime)row[dataColumn];
			//Campo "SOCI_COOPERATORI"
			dataColumn = dataTable.Columns["SOCI_COOPERATORI"];
			if(!row.IsNull(dataColumn))
				mappedObject.SOCI_COOPERATORI = (System.Int32)row[dataColumn];
			//Campo "SOCI_SOVVENTORI"
			dataColumn = dataTable.Columns["SOCI_SOVVENTORI"];
			if(!row.IsNull(dataColumn))
				mappedObject.SOCI_SOVVENTORI = (System.Int32)row[dataColumn];
			//Campo "ALTRI_SOCI"
			dataColumn = dataTable.Columns["ALTRI_SOCI"];
			if(!row.IsNull(dataColumn))
				mappedObject.ALTRI_SOCI = (System.Int32)row[dataColumn];
			//Campo "LAVORATORI"
			dataColumn = dataTable.Columns["LAVORATORI"];
			if(!row.IsNull(dataColumn))
				mappedObject.LAVORATORI = (System.Int32)row[dataColumn];
			//Campo "LAVORATORI_SOCI"
			dataColumn = dataTable.Columns["LAVORATORI_SOCI"];
			if(!row.IsNull(dataColumn))
				mappedObject.LAVORATORI_SOCI = (System.Int32)row[dataColumn];
			//Campo "LAVORATORI_REMUNERATI"
			dataColumn = dataTable.Columns["LAVORATORI_REMUNERATI"];
			if(!row.IsNull(dataColumn))
				mappedObject.LAVORATORI_REMUNERATI = (System.Int32)row[dataColumn];
			//Campo "SOCI_UTENTI"
			dataColumn = dataTable.Columns["SOCI_UTENTI"];
			if(!row.IsNull(dataColumn))
				mappedObject.SOCI_UTENTI = (System.Int32)row[dataColumn];
			//Campo "SOCI_VOLONTARI"
			dataColumn = dataTable.Columns["SOCI_VOLONTARI"];
			if(!row.IsNull(dataColumn))
				mappedObject.SOCI_VOLONTARI = (System.Int32)row[dataColumn];
			//Campo "SOCI_PG"
			dataColumn = dataTable.Columns["SOCI_PG"];
			if(!row.IsNull(dataColumn))
				mappedObject.SOCI_PG = (System.Int32)row[dataColumn];
			//Campo "LAVORATORI_TUTTI"
			dataColumn = dataTable.Columns["LAVORATORI_TUTTI"];
			if(!row.IsNull(dataColumn))
				mappedObject.LAVORATORI_TUTTI = (System.Int32)row[dataColumn];
			//Campo "PERSONE_SVANTAGGIATE"
			dataColumn = dataTable.Columns["PERSONE_SVANTAGGIATE"];
			if(!row.IsNull(dataColumn))
				mappedObject.PERSONE_SVANTAGGIATE = (System.Int32)row[dataColumn];
			//Campo "CONFERIMENTO_CAPITALE"
			dataColumn = dataTable.Columns["CONFERIMENTO_CAPITALE"];
			if(!row.IsNull(dataColumn))
				mappedObject.CONFERIMENTO_CAPITALE = (System.Int32)row[dataColumn];
			//Campo "VALORE_QUOTE"
			dataColumn = dataTable.Columns["VALORE_QUOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.VALORE_QUOTE = (System.Double)row[dataColumn];
			//Campo "VALORE_AZIONE"
			dataColumn = dataTable.Columns["VALORE_AZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.VALORE_AZIONE = (System.Double)row[dataColumn];
			//Campo "CAPITALE_SOTTOSCRITTO"
			dataColumn = dataTable.Columns["CAPITALE_SOTTOSCRITTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.CAPITALE_SOTTOSCRITTO = (System.Double)row[dataColumn];
			//Campo "CAPITALE_VERSATO"
			dataColumn = dataTable.Columns["CAPITALE_VERSATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.CAPITALE_VERSATO = (System.Double)row[dataColumn];
			//Campo "NOTE"
			dataColumn = dataTable.Columns["NOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.NOTE = (System.String)row[dataColumn];
			//Campo "OPERATOREULTMOD"
			dataColumn = dataTable.Columns["OPERATOREULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.OPERATOREULTMOD = (System.String)row[dataColumn];
			//Campo "DATAORAULTMOD"
			dataColumn = dataTable.Columns["DATAORAULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORAULTMOD = (System.DateTime)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCTCOM_BASE_SOCIALE
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCTCOM_BASE_SOCIALE";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = true;
			dataColumn.Unique = true;
			dataColumn.AutoIncrement = true;
			dataColumn = dataTable.Columns.Add("IDOBJ_REGISTRO", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_COMUNICAZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_SITUAZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("SOCI_COOPERATORI", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("SOCI_SOVVENTORI", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ALTRI_SOCI", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LAVORATORI", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LAVORATORI_SOCI", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LAVORATORI_REMUNERATI", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("SOCI_UTENTI", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("SOCI_VOLONTARI", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("SOCI_PG", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LAVORATORI_TUTTI", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("PERSONE_SVANTAGGIATE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CONFERIMENTO_CAPITALE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("VALORE_QUOTE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("VALORE_AZIONE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CAPITALE_SOTTOSCRITTO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CAPITALE_VERSATO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NOTE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("OPERATOREULTMOD", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORAULTMOD", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_REGISTRO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_COMUNICAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_SITUAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "SOCI_COOPERATORI":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "SOCI_SOVVENTORI":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "ALTRI_SOCI":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "LAVORATORI":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "LAVORATORI_SOCI":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "LAVORATORI_REMUNERATI":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "SOCI_UTENTI":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "SOCI_VOLONTARI":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "SOCI_PG":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "LAVORATORI_TUTTI":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "PERSONE_SVANTAGGIATE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "CONFERIMENTO_CAPITALE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "VALORE_QUOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "VALORE_AZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "CAPITALE_SOTTOSCRITTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "CAPITALE_VERSATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "NOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "OPERATOREULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORAULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
