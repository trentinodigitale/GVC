//
//Generated by gvc at 26/03/2009 9.03.13
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCTCOMPENSI
	/// </summary>
	public partial class GVCTCOMPENSICollection
	{
		/// <summary>
		/// Returns the Database Name of the field IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJColumnName = "IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_SOGGETTO.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_SOGGETTOColumnName = "IDOBJ_SOGGETTO";
		/// <summary>
		/// Returns the Database Name of the field PERCENTUALE_CNP.
		/// </summary>
		public const string PERCENTUALE_CNPColumnName = "PERCENTUALE_CNP";
		/// <summary>
		/// Returns the Database Name of the field PERCENTUALE_IVA.
		/// </summary>
		public const string PERCENTUALE_IVAColumnName = "PERCENTUALE_IVA";
		/// <summary>
		/// Returns the Database Name of the field VALUTA.
		/// </summary>
		public const string VALUTAColumnName = "VALUTA";
		/// <summary>
		/// Returns the Database Name of the field COMPENSO.
		/// </summary>
		public const string COMPENSOColumnName = "COMPENSO";
		/// <summary>
		/// Returns the Database Name of the field SPESE.
		/// </summary>
		public const string SPESEColumnName = "SPESE";
		/// <summary>
		/// Returns the Database Name of the field CASSA.
		/// </summary>
		public const string CASSAColumnName = "CASSA";
		/// <summary>
		/// Returns the Database Name of the field IVA.
		/// </summary>
		public const string IVAColumnName = "IVA";
		/// <summary>
		/// Returns the Database Name of the field TOTALE.
		/// </summary>
		public const string TOTALEColumnName = "TOTALE";
		/// <summary>
		/// Returns the Database Name of the field OPERATOREULTMOD.
		/// </summary>
		public const string OPERATOREULTMODColumnName = "OPERATOREULTMOD";
		/// <summary>
		/// Returns the Database Name of the field DATAORAULTMOD.
		/// </summary>
		public const string DATAORAULTMODColumnName = "DATAORAULTMOD";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_LIQUIDAZIONE.
		/// </summary>
		public const string IDOBJ_LIQUIDAZIONEColumnName = "IDOBJ_LIQUIDAZIONE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_PROCEDURA.
		/// </summary>
		public const string IDOBJ_PROCEDURAColumnName = "IDOBJ_PROCEDURA";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_INCARICO.
		/// </summary>
		public const string IDOBJ_INCARICOColumnName = "IDOBJ_INCARICO";
		/// <summary>
		/// Returns the Database Name of the field TIPO_CONTRIBUTO.
		/// </summary>
		public const string TIPO_CONTRIBUTOColumnName = "TIPO_CONTRIBUTO";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_DETERMINA.
		/// </summary>
		public const string NUMERO_DETERMINAColumnName = "NUMERO_DETERMINA";
		/// <summary>
		/// Returns the Database Name of the field DATA_DETERMINA.
		/// </summary>
		public const string DATA_DETERMINAColumnName = "DATA_DETERMINA";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCTCOMPENSICollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCTCOMPENSI
		/// </summary>
		/// <returns>Array of objects GVCTCOMPENSI</returns>
		public virtual GVCTCOMPENSI[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCTCOMPENSI
		/// </summary>
		/// <returns>DataTable of objects GVCTCOMPENSI</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCTCOMPENSI
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCTCOMPENSI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCTCOMPENSI</returns>
		public GVCTCOMPENSI GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCTCOMPENSI[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCTCOMPENSI selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCTCOMPENSI</returns>
		public GVCTCOMPENSI[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCTCOMPENSI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCTCOMPENSI</returns>
		public virtual GVCTCOMPENSI[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTCOMPENSI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCTCOMPENSI</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTCOMPENSI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTCOMPENSI</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCTCOMPENSI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("IDOBJ, ");
			sql.Append("IDOBJ_SOGGETTO, ");
			sql.Append("PERCENTUALE_CNP, ");
			sql.Append("PERCENTUALE_IVA, ");
			sql.Append("VALUTA, ");
			sql.Append("COMPENSO, ");
			sql.Append("SPESE, ");
			sql.Append("CASSA, ");
			sql.Append("IVA, ");
			sql.Append("TOTALE, ");
			sql.Append("OPERATOREULTMOD, ");
			sql.Append("DATAORAULTMOD, ");
			sql.Append("IDOBJ_LIQUIDAZIONE, ");
			sql.Append("IDOBJ_PROCEDURA, ");
			sql.Append("IDOBJ_INCARICO, ");
			sql.Append("TIPO_CONTRIBUTO, ");
			sql.Append("NUMERO_DETERMINA, ");
			sql.Append("DATA_DETERMINA ");
			sql.Append("FROM GVCTCOMPENSI ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Returns an object GVCTCOMPENSI selected by a primary key
		/// </summary>
		/// <param name="IDOBJ">The primary key of the object</param>
		/// <returns>Object of type GVCTCOMPENSI</returns>
		public virtual GVCTCOMPENSI GetByPrimaryKey(System.Int32 IDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateGetCommand(whereSql, null))
			{
				AddParameter(cmd, "IDOBJ", IDOBJ);
				GVCTCOMPENSI[] tempArray = MapRecords(cmd);
				return tempArray.Length == 0 ? null : tempArray[0];
			}
		}


		/// <summary>
		/// Returns an object GVCTCOMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_INCARICO">The foreign key of the object</param>
		/// <returns>Object of type GVCTCOMPENSI</returns>
		public virtual GVCTCOMPENSI[] GetByIDOBJ_INCARICO(System.Int32 iDOBJ_INCARICO)
		{
			return MapRecords(CreateGetByIDOBJ_INCARICOCommand(iDOBJ_INCARICO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTCOMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_INCARICO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_INCARICOAsDataTable(System.Int32 iDOBJ_INCARICO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_INCARICOCommand(iDOBJ_INCARICO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_INCARICO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_INCARICOCommand(System.Int32 iDOBJ_INCARICO)
		{
			string whereSql = "IDOBJ_INCARICO = " + _db.CreateSqlParameterName("IDOBJ_INCARICO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_INCARICO", iDOBJ_INCARICO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTCOMPENSI
		/// </summary>
		/// <param name="iDOBJ_INCARICO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_INCARICO(System.Int32 iDOBJ_INCARICO)
		{
			return CreateDeleteByIDOBJ_INCARICOCommand(iDOBJ_INCARICO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTCOMPENSI
		/// </summary>
		/// <param name="iDOBJ_INCARICO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_INCARICOCommand(System.Int32 iDOBJ_INCARICO)
		{
			string whereSql = "IDOBJ_INCARICO = " + _db.CreateSqlParameterName("IDOBJ_INCARICO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_INCARICO", iDOBJ_INCARICO);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTCOMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTCOMPENSI</returns>
		public virtual GVCTCOMPENSI[] GetByIDOBJ_LIQUIDAZIONE(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			return MapRecords(CreateGetByIDOBJ_LIQUIDAZIONECommand(iDOBJ_LIQUIDAZIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTCOMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_LIQUIDAZIONEAsDataTable(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_LIQUIDAZIONECommand(iDOBJ_LIQUIDAZIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_LIQUIDAZIONECommand(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			string whereSql = "IDOBJ_LIQUIDAZIONE = " + _db.CreateSqlParameterName("IDOBJ_LIQUIDAZIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_LIQUIDAZIONE", iDOBJ_LIQUIDAZIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTCOMPENSI
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_LIQUIDAZIONE(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			return CreateDeleteByIDOBJ_LIQUIDAZIONECommand(iDOBJ_LIQUIDAZIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTCOMPENSI
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_LIQUIDAZIONECommand(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			string whereSql = "IDOBJ_LIQUIDAZIONE = " + _db.CreateSqlParameterName("IDOBJ_LIQUIDAZIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_LIQUIDAZIONE", iDOBJ_LIQUIDAZIONE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTCOMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key of the object</param>
		/// <returns>Object of type GVCTCOMPENSI</returns>
		public virtual GVCTCOMPENSI[] GetByIDOBJ_PROCEDURA(System.Int32 iDOBJ_PROCEDURA)
		{
			return MapRecords(CreateGetByIDOBJ_PROCEDURACommand(iDOBJ_PROCEDURA));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTCOMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_PROCEDURAAsDataTable(System.Int32 iDOBJ_PROCEDURA)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_PROCEDURACommand(iDOBJ_PROCEDURA));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_PROCEDURACommand(System.Int32 iDOBJ_PROCEDURA)
		{
			string whereSql = "IDOBJ_PROCEDURA = " + _db.CreateSqlParameterName("IDOBJ_PROCEDURA");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_PROCEDURA", iDOBJ_PROCEDURA);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTCOMPENSI
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_PROCEDURA(System.Int32 iDOBJ_PROCEDURA)
		{
			return CreateDeleteByIDOBJ_PROCEDURACommand(iDOBJ_PROCEDURA).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTCOMPENSI
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_PROCEDURACommand(System.Int32 iDOBJ_PROCEDURA)
		{
			string whereSql = "IDOBJ_PROCEDURA = " + _db.CreateSqlParameterName("IDOBJ_PROCEDURA");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_PROCEDURA", iDOBJ_PROCEDURA);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTCOMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key of the object</param>
		/// <returns>Object of type GVCTCOMPENSI</returns>
		public virtual GVCTCOMPENSI[] GetByIDOBJ_SOGGETTO(System.Int32 iDOBJ_SOGGETTO)
		{
			return MapRecords(CreateGetByIDOBJ_SOGGETTOCommand(iDOBJ_SOGGETTO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTCOMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_SOGGETTOAsDataTable(System.Int32 iDOBJ_SOGGETTO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_SOGGETTOCommand(iDOBJ_SOGGETTO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_SOGGETTOCommand(System.Int32 iDOBJ_SOGGETTO)
		{
			string whereSql = "IDOBJ_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_SOGGETTO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_SOGGETTO", iDOBJ_SOGGETTO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTCOMPENSI
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_SOGGETTO(System.Int32 iDOBJ_SOGGETTO)
		{
			return CreateDeleteByIDOBJ_SOGGETTOCommand(iDOBJ_SOGGETTO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTCOMPENSI
		/// </summary>
		/// <param name="iDOBJ_SOGGETTO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_SOGGETTOCommand(System.Int32 iDOBJ_SOGGETTO)
		{
			string whereSql = "IDOBJ_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_SOGGETTO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_SOGGETTO", iDOBJ_SOGGETTO);
			return cmd;
		}

		/// <summary>
		/// Inserts in the Database an object GVCTCOMPENSI
		/// </summary>
		/// <param name="valore">The object to insert</param>
		public virtual void Insert(GVCTCOMPENSI valore)
		{
			System.Int32 id = -1;
			System.String sqlStr;

			sqlStr = "SELECT GVCTCOMPENSI_SEQ.NEXTVAL FROM DUAL";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				id = Convert.ToInt32(cmd.ExecuteScalar());
			}

			sqlStr = "INSERT INTO GVCTCOMPENSI (" +
			"IDOBJ, " +
			"IDOBJ_SOGGETTO, " +
			"PERCENTUALE_CNP, " +
			"PERCENTUALE_IVA, " +
			"VALUTA, " +
			"COMPENSO, " +
			"SPESE, " +
			"CASSA, " +
			"IVA, " +
			"TOTALE, " +
			"OPERATOREULTMOD, " +
			"DATAORAULTMOD, " +
			"IDOBJ_LIQUIDAZIONE, " +
			"IDOBJ_PROCEDURA, " +
			"IDOBJ_INCARICO, " +
			"TIPO_CONTRIBUTO, " +
			"NUMERO_DETERMINA, " +
			"DATA_DETERMINA) " +
			"VALUES (" + id.ToString() + ", " +
			_db.CreateSqlParameterName("IDOBJ_SOGGETTO") + ", " +
			_db.CreateSqlParameterName("PERCENTUALE_CNP") + ", " +
			_db.CreateSqlParameterName("PERCENTUALE_IVA") + ", " +
			_db.CreateSqlParameterName("VALUTA") + ", " +
			_db.CreateSqlParameterName("COMPENSO") + ", " +
			_db.CreateSqlParameterName("SPESE") + ", " +
			_db.CreateSqlParameterName("CASSA") + ", " +
			_db.CreateSqlParameterName("IVA") + ", " +
			_db.CreateSqlParameterName("TOTALE") + ", " +
			_db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
			_db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
			_db.CreateSqlParameterName("IDOBJ_LIQUIDAZIONE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_PROCEDURA") + ", " +
			_db.CreateSqlParameterName("IDOBJ_INCARICO") + ", " +
			_db.CreateSqlParameterName("TIPO_CONTRIBUTO") + ", " +
			_db.CreateSqlParameterName("NUMERO_DETERMINA") + ", " +
			_db.CreateSqlParameterName("DATA_DETERMINA") + ")";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ_SOGGETTO", valore.IDOBJ_SOGGETTO);
				AddParameter(cmd, "PERCENTUALE_CNP", valore.IsPERCENTUALE_CNPNull ? DBNull.Value : (object)valore.PERCENTUALE_CNP);
				AddParameter(cmd, "PERCENTUALE_IVA", valore.IsPERCENTUALE_IVANull ? DBNull.Value : (object)valore.PERCENTUALE_IVA);
				AddParameter(cmd, "VALUTA", valore.IsVALUTANull ? DBNull.Value : (object)valore.VALUTA);
				AddParameter(cmd, "COMPENSO", valore.IsCOMPENSONull ? DBNull.Value : (object)valore.COMPENSO);
				AddParameter(cmd, "SPESE", valore.IsSPESENull ? DBNull.Value : (object)valore.SPESE);
				AddParameter(cmd, "CASSA", valore.IsCASSANull ? DBNull.Value : (object)valore.CASSA);
				AddParameter(cmd, "IVA", valore.IsIVANull ? DBNull.Value : (object)valore.IVA);
				AddParameter(cmd, "TOTALE", valore.IsTOTALENull ? DBNull.Value : (object)valore.TOTALE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_LIQUIDAZIONE", valore.IsIDOBJ_LIQUIDAZIONENull ? DBNull.Value : (object)valore.IDOBJ_LIQUIDAZIONE);
				AddParameter(cmd, "IDOBJ_PROCEDURA", valore.IsIDOBJ_PROCEDURANull ? DBNull.Value : (object)valore.IDOBJ_PROCEDURA);
				AddParameter(cmd, "IDOBJ_INCARICO", valore.IsIDOBJ_INCARICONull ? DBNull.Value : (object)valore.IDOBJ_INCARICO);
				AddParameter(cmd, "TIPO_CONTRIBUTO", valore.IsTIPO_CONTRIBUTONull ? DBNull.Value : (object)valore.TIPO_CONTRIBUTO);
				AddParameter(cmd, "NUMERO_DETERMINA", valore.IsNUMERO_DETERMINANull ? DBNull.Value : (object)valore.NUMERO_DETERMINA);
				AddParameter(cmd, "DATA_DETERMINA", valore.IsDATA_DETERMINANull ? DBNull.Value : (object)valore.DATA_DETERMINA);
				cmd.ExecuteScalar();
				valore.IDOBJ = id;
			}
		}

		/// <summary>
		/// Updates in the Database an object GVCTCOMPENSI
		/// </summary>
		/// <param name="valore">The object to update</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool Update(GVCTCOMPENSI valore)
		{
			System.String sqlStr = "UPDATE GVCTCOMPENSI SET " +
				"IDOBJ_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_SOGGETTO") + ", " +
				"PERCENTUALE_CNP = " + _db.CreateSqlParameterName("PERCENTUALE_CNP") + ", " +
				"PERCENTUALE_IVA = " + _db.CreateSqlParameterName("PERCENTUALE_IVA") + ", " +
				"VALUTA = " + _db.CreateSqlParameterName("VALUTA") + ", " +
				"COMPENSO = " + _db.CreateSqlParameterName("COMPENSO") + ", " +
				"SPESE = " + _db.CreateSqlParameterName("SPESE") + ", " +
				"CASSA = " + _db.CreateSqlParameterName("CASSA") + ", " +
				"IVA = " + _db.CreateSqlParameterName("IVA") + ", " +
				"TOTALE = " + _db.CreateSqlParameterName("TOTALE") + ", " +
				"OPERATOREULTMOD = " + _db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
				"DATAORAULTMOD = " + _db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
				"IDOBJ_LIQUIDAZIONE = " + _db.CreateSqlParameterName("IDOBJ_LIQUIDAZIONE") + ", " +
				"IDOBJ_PROCEDURA = " + _db.CreateSqlParameterName("IDOBJ_PROCEDURA") + ", " +
				"IDOBJ_INCARICO = " + _db.CreateSqlParameterName("IDOBJ_INCARICO") + ", " +
				"TIPO_CONTRIBUTO = " + _db.CreateSqlParameterName("TIPO_CONTRIBUTO") + ", " +
				"NUMERO_DETERMINA = " + _db.CreateSqlParameterName("NUMERO_DETERMINA") + ", " +
				"DATA_DETERMINA = " + _db.CreateSqlParameterName("DATA_DETERMINA") +
				" WHERE " +
				"IDOBJ = " + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ", valore.IDOBJ);
				AddParameter(cmd, "IDOBJ_SOGGETTO", valore.IDOBJ_SOGGETTO);
				AddParameter(cmd, "PERCENTUALE_CNP", valore.IsPERCENTUALE_CNPNull ? DBNull.Value : (object)valore.PERCENTUALE_CNP);
				AddParameter(cmd, "PERCENTUALE_IVA", valore.IsPERCENTUALE_IVANull ? DBNull.Value : (object)valore.PERCENTUALE_IVA);
				AddParameter(cmd, "VALUTA", valore.IsVALUTANull ? DBNull.Value : (object)valore.VALUTA);
				AddParameter(cmd, "COMPENSO", valore.IsCOMPENSONull ? DBNull.Value : (object)valore.COMPENSO);
				AddParameter(cmd, "SPESE", valore.IsSPESENull ? DBNull.Value : (object)valore.SPESE);
				AddParameter(cmd, "CASSA", valore.IsCASSANull ? DBNull.Value : (object)valore.CASSA);
				AddParameter(cmd, "IVA", valore.IsIVANull ? DBNull.Value : (object)valore.IVA);
				AddParameter(cmd, "TOTALE", valore.IsTOTALENull ? DBNull.Value : (object)valore.TOTALE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_LIQUIDAZIONE", valore.IsIDOBJ_LIQUIDAZIONENull ? DBNull.Value : (object)valore.IDOBJ_LIQUIDAZIONE);
				AddParameter(cmd, "IDOBJ_PROCEDURA", valore.IsIDOBJ_PROCEDURANull ? DBNull.Value : (object)valore.IDOBJ_PROCEDURA);
				AddParameter(cmd, "IDOBJ_INCARICO", valore.IsIDOBJ_INCARICONull ? DBNull.Value : (object)valore.IDOBJ_INCARICO);
				AddParameter(cmd, "TIPO_CONTRIBUTO", valore.IsTIPO_CONTRIBUTONull ? DBNull.Value : (object)valore.TIPO_CONTRIBUTO);
				AddParameter(cmd, "NUMERO_DETERMINA", valore.IsNUMERO_DETERMINANull ? DBNull.Value : (object)valore.NUMERO_DETERMINA);
				AddParameter(cmd, "DATA_DETERMINA", valore.IsDATA_DETERMINANull ? DBNull.Value : (object)valore.DATA_DETERMINA);
				return cmd.ExecuteNonQuery() != 0;
			}
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTCOMPENSI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTCOMPENSI</param>
		public void Update(DataTable table)
		{
			Update(table, true);
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTCOMPENSI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTCOMPENSI</param>
		/// <param name="acceptChanges">true to accept the changes, otherwise false</param>
		public virtual void Update(DataTable table, bool acceptChanges)
		{
			DataRowCollection rows = table.Rows;
			for(int i = rows.Count - 1; i >= 0; i--)
			{
				DataRow row = rows[i];
				switch(row.RowState)
				{
					case DataRowState.Added:
						Insert(MapRow(row));
						if(acceptChanges)
							row.AcceptChanges();
						break;

					case DataRowState.Deleted:
						row.RejectChanges();
						try
						{
							DeleteByPrimaryKey((System.Int32)row["IDOBJ"]);
						}
						finally
						{
							row.Delete();
						}
						if(acceptChanges)
							row.AcceptChanges();
						break;

				case DataRowState.Modified:
					Update(MapRow(row));
					if(acceptChanges)
						row.AcceptChanges();
					break;
				}
			}
		}

		/// <summary>
		/// Deletes from the Database an object GVCTCOMPENSI
		/// </summary>
		/// <param name="valore">The object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public bool Delete(GVCTCOMPENSI valore)
		{
			return DeleteByPrimaryKey(valore.IDOBJ);
		}

		/// <summary>
		/// Deletes from the Database an object GVCTCOMPENSI
		/// </summary>
		/// <param name="iDOBJ">The primary key of the object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool DeleteByPrimaryKey(System.Int32 iDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateDeleteCommand(whereSql))
			{
				AddParameter(cmd, "IDOBJ" , iDOBJ);
				return cmd.ExecuteNonQuery() > 0;
			}
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTCOMPENSI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>The number of the deleted objects</returns>
		public int Delete(System.String whereSql)
		{
			return CreateDeleteCommand(whereSql).ExecuteNonQuery();
		}

		/// <summary>
		/// Returns an IDbCommand to delete the objects GVCTCOMPENSI selected by 
		/// a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteCommand(string whereSql)
		{
			StringBuilder sql = new StringBuilder("DELETE FROM GVCTCOMPENSI");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format(" WHERE {0}", whereSql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Deletes all the objects GVCTCOMPENSI
		/// </summary>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteAll()
		{
			return Delete("");
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTCOMPENSI
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCTCOMPENSI</returns>
		protected GVCTCOMPENSI[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTCOMPENSI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCTCOMPENSI</returns>
		protected GVCTCOMPENSI[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCTCOMPENSI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCTCOMPENSI</returns>
		protected virtual GVCTCOMPENSI[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int iDOBJColumnIndex = reader.GetOrdinal("IDOBJ");
			int iDOBJ_SOGGETTOColumnIndex = reader.GetOrdinal("IDOBJ_SOGGETTO");
			int pERCENTUALE_CNPColumnIndex = reader.GetOrdinal("PERCENTUALE_CNP");
			int pERCENTUALE_IVAColumnIndex = reader.GetOrdinal("PERCENTUALE_IVA");
			int vALUTAColumnIndex = reader.GetOrdinal("VALUTA");
			int cOMPENSOColumnIndex = reader.GetOrdinal("COMPENSO");
			int sPESEColumnIndex = reader.GetOrdinal("SPESE");
			int cASSAColumnIndex = reader.GetOrdinal("CASSA");
			int iVAColumnIndex = reader.GetOrdinal("IVA");
			int tOTALEColumnIndex = reader.GetOrdinal("TOTALE");
			int oPERATOREULTMODColumnIndex = reader.GetOrdinal("OPERATOREULTMOD");
			int dATAORAULTMODColumnIndex = reader.GetOrdinal("DATAORAULTMOD");
			int iDOBJ_LIQUIDAZIONEColumnIndex = reader.GetOrdinal("IDOBJ_LIQUIDAZIONE");
			int iDOBJ_PROCEDURAColumnIndex = reader.GetOrdinal("IDOBJ_PROCEDURA");
			int iDOBJ_INCARICOColumnIndex = reader.GetOrdinal("IDOBJ_INCARICO");
			int tIPO_CONTRIBUTOColumnIndex = reader.GetOrdinal("TIPO_CONTRIBUTO");
			int nUMERO_DETERMINAColumnIndex = reader.GetOrdinal("NUMERO_DETERMINA");
			int dATA_DETERMINAColumnIndex = reader.GetOrdinal("DATA_DETERMINA");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCTCOMPENSI record = new GVCTCOMPENSI();
					recordList.Add(record);
					record.IDOBJ = Convert.ToInt32(reader.GetValue(iDOBJColumnIndex));
					record.IDOBJ_SOGGETTO = Convert.ToInt32(reader.GetValue(iDOBJ_SOGGETTOColumnIndex));
					if(!reader.IsDBNull(pERCENTUALE_CNPColumnIndex))
						record.PERCENTUALE_CNP = Convert.ToDouble(reader.GetValue(pERCENTUALE_CNPColumnIndex));
					if(!reader.IsDBNull(pERCENTUALE_IVAColumnIndex))
						record.PERCENTUALE_IVA = Convert.ToDouble(reader.GetValue(pERCENTUALE_IVAColumnIndex));
					if(!reader.IsDBNull(vALUTAColumnIndex))
						record.VALUTA = Convert.ToInt32(reader.GetValue(vALUTAColumnIndex));
					if(!reader.IsDBNull(cOMPENSOColumnIndex))
						record.COMPENSO = Convert.ToDouble(reader.GetValue(cOMPENSOColumnIndex));
					if(!reader.IsDBNull(sPESEColumnIndex))
						record.SPESE = Convert.ToDouble(reader.GetValue(sPESEColumnIndex));
					if(!reader.IsDBNull(cASSAColumnIndex))
						record.CASSA = Convert.ToDouble(reader.GetValue(cASSAColumnIndex));
					if(!reader.IsDBNull(iVAColumnIndex))
						record.IVA = Convert.ToDouble(reader.GetValue(iVAColumnIndex));
					if(!reader.IsDBNull(tOTALEColumnIndex))
						record.TOTALE = Convert.ToDouble(reader.GetValue(tOTALEColumnIndex));
					if(!reader.IsDBNull(oPERATOREULTMODColumnIndex))
						record.OPERATOREULTMOD = Convert.ToString(reader.GetValue(oPERATOREULTMODColumnIndex));
					if(!reader.IsDBNull(dATAORAULTMODColumnIndex))
						record.DATAORAULTMOD = Convert.ToDateTime(reader.GetValue(dATAORAULTMODColumnIndex));
					if(!reader.IsDBNull(iDOBJ_LIQUIDAZIONEColumnIndex))
						record.IDOBJ_LIQUIDAZIONE = Convert.ToInt32(reader.GetValue(iDOBJ_LIQUIDAZIONEColumnIndex));
					if(!reader.IsDBNull(iDOBJ_PROCEDURAColumnIndex))
						record.IDOBJ_PROCEDURA = Convert.ToInt32(reader.GetValue(iDOBJ_PROCEDURAColumnIndex));
					if(!reader.IsDBNull(iDOBJ_INCARICOColumnIndex))
						record.IDOBJ_INCARICO = Convert.ToInt32(reader.GetValue(iDOBJ_INCARICOColumnIndex));
					if(!reader.IsDBNull(tIPO_CONTRIBUTOColumnIndex))
						record.TIPO_CONTRIBUTO = Convert.ToInt32(reader.GetValue(tIPO_CONTRIBUTOColumnIndex));
					if(!reader.IsDBNull(nUMERO_DETERMINAColumnIndex))
						record.NUMERO_DETERMINA = Convert.ToString(reader.GetValue(nUMERO_DETERMINAColumnIndex));
					if(!reader.IsDBNull(dATA_DETERMINAColumnIndex))
						record.DATA_DETERMINA = Convert.ToDateTime(reader.GetValue(dATA_DETERMINAColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCTCOMPENSI[])(recordList.ToArray(typeof(GVCTCOMPENSI)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCTCOMPENSI</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCTCOMPENSI</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTCOMPENSI</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCTCOMPENSI
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCTCOMPENSI</returns>
		protected virtual GVCTCOMPENSI MapRow(DataRow row)
		{
			GVCTCOMPENSI mappedObject = new GVCTCOMPENSI();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "IDOBJ"
			dataColumn = dataTable.Columns["IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_SOGGETTO"
			dataColumn = dataTable.Columns["IDOBJ_SOGGETTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_SOGGETTO = (System.Int32)row[dataColumn];
			//Campo "PERCENTUALE_CNP"
			dataColumn = dataTable.Columns["PERCENTUALE_CNP"];
			if(!row.IsNull(dataColumn))
				mappedObject.PERCENTUALE_CNP = (System.Double)row[dataColumn];
			//Campo "PERCENTUALE_IVA"
			dataColumn = dataTable.Columns["PERCENTUALE_IVA"];
			if(!row.IsNull(dataColumn))
				mappedObject.PERCENTUALE_IVA = (System.Double)row[dataColumn];
			//Campo "VALUTA"
			dataColumn = dataTable.Columns["VALUTA"];
			if(!row.IsNull(dataColumn))
				mappedObject.VALUTA = (System.Int32)row[dataColumn];
			//Campo "COMPENSO"
			dataColumn = dataTable.Columns["COMPENSO"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPENSO = (System.Double)row[dataColumn];
			//Campo "SPESE"
			dataColumn = dataTable.Columns["SPESE"];
			if(!row.IsNull(dataColumn))
				mappedObject.SPESE = (System.Double)row[dataColumn];
			//Campo "CASSA"
			dataColumn = dataTable.Columns["CASSA"];
			if(!row.IsNull(dataColumn))
				mappedObject.CASSA = (System.Double)row[dataColumn];
			//Campo "IVA"
			dataColumn = dataTable.Columns["IVA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IVA = (System.Double)row[dataColumn];
			//Campo "TOTALE"
			dataColumn = dataTable.Columns["TOTALE"];
			if(!row.IsNull(dataColumn))
				mappedObject.TOTALE = (System.Double)row[dataColumn];
			//Campo "OPERATOREULTMOD"
			dataColumn = dataTable.Columns["OPERATOREULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.OPERATOREULTMOD = (System.String)row[dataColumn];
			//Campo "DATAORAULTMOD"
			dataColumn = dataTable.Columns["DATAORAULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORAULTMOD = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_LIQUIDAZIONE"
			dataColumn = dataTable.Columns["IDOBJ_LIQUIDAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_LIQUIDAZIONE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_PROCEDURA"
			dataColumn = dataTable.Columns["IDOBJ_PROCEDURA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_PROCEDURA = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_INCARICO"
			dataColumn = dataTable.Columns["IDOBJ_INCARICO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_INCARICO = (System.Int32)row[dataColumn];
			//Campo "TIPO_CONTRIBUTO"
			dataColumn = dataTable.Columns["TIPO_CONTRIBUTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.TIPO_CONTRIBUTO = (System.Int32)row[dataColumn];
			//Campo "NUMERO_DETERMINA"
			dataColumn = dataTable.Columns["NUMERO_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_DETERMINA = (System.String)row[dataColumn];
			//Campo "DATA_DETERMINA"
			dataColumn = dataTable.Columns["DATA_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_DETERMINA = (System.DateTime)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCTCOMPENSI
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCTCOMPENSI";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = true;
			dataColumn.Unique = true;
			dataColumn.AutoIncrement = true;
			dataColumn = dataTable.Columns.Add("IDOBJ_SOGGETTO", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("PERCENTUALE_CNP", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("PERCENTUALE_IVA", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("VALUTA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPENSO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("SPESE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CASSA", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IVA", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("TOTALE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("OPERATOREULTMOD", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORAULTMOD", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_LIQUIDAZIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_PROCEDURA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_INCARICO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("TIPO_CONTRIBUTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_DETERMINA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_DETERMINA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_SOGGETTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "PERCENTUALE_CNP":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "PERCENTUALE_IVA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "VALUTA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "COMPENSO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "SPESE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "CASSA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "IVA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "TOTALE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "OPERATOREULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORAULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_LIQUIDAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_PROCEDURA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_INCARICO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "TIPO_CONTRIBUTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "NUMERO_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
