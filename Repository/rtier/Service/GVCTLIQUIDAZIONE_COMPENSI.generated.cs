//
//Generated by DELTADATOR\GS0445 at 26/03/2009 9.03.13
//

using System;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Description of GVCTLIQUIDAZIONE_COMPENSI
	/// </summary>
	public partial class GVCTLIQUIDAZIONE_COMPENSI
	{
		private System.Int32 _iDOBJ;
		private System.DateTime _dATA_DOMANDA;
		private System.Boolean _dATA_DOMANDANull = true;
		private System.Double _pERCENTUALE_CONTRIBUTO;
		private System.Boolean _pERCENTUALE_CONTRIBUTONull = true;
		private System.Int32 _vALUTA;
		private System.Boolean _vALUTANull = true;
		private System.Double _iMPORTO_DETERMINATO;
		private System.Boolean _iMPORTO_DETERMINATONull = true;
		private System.Double _iMPORTO_RICHIESTO;
		private System.Boolean _iMPORTO_RICHIESTONull = true;
		private System.Double _iMPORTO_CONTRIBUTO;
		private System.Boolean _iMPORTO_CONTRIBUTONull = true;
		private System.Double _iMPORTO_SPESE;
		private System.Boolean _iMPORTO_SPESENull = true;
		private System.Int32 _tIPO_CONTRIBUTO;
		private System.Boolean _tIPO_CONTRIBUTONull = true;
		private System.String _nUMERO_DETERMINA;
		private System.Boolean _nUMERO_DETERMINANull = true;
		private System.DateTime _dATA_DETERMINA;
		private System.Boolean _dATA_DETERMINANull = true;
		private System.Int32 _lIQUIDATO;
		private System.Boolean _lIQUIDATONull = true;
		private System.String _nUMERO_MANDATO;
		private System.Boolean _nUMERO_MANDATONull = true;
		private System.DateTime _dATA_MANDATO;
		private System.Boolean _dATA_MANDATONull = true;
		private System.String _nOTE;
		private System.Boolean _nOTENull = true;
		private System.String _oPERATOREULTMOD;
		private System.Boolean _oPERATOREULTMODNull = true;
		private System.DateTime _dATAORAULTMOD;
		private System.Boolean _dATAORAULTMODNull = true;
		private System.Int32 _iDOBJ_LIQUIDAZIONE;
		private System.Boolean _iDOBJ_LIQUIDAZIONENull = true;
		private System.Int32 _iDOBJ_PROCEDURA;
		private System.Boolean _iDOBJ_PROCEDURANull = true;
		private System.Int32 _iDOBJ_REVISIONE;
		private System.Boolean _iDOBJ_REVISIONENull = true;

		/// <summary>
		/// Default constructor
		/// </summary>
		public GVCTLIQUIDAZIONE_COMPENSI(){}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ
		{
			get
			{
				return _iDOBJ;
			}
			set
			{
				_iDOBJ = value;
			}
		}

		/// <summary>
		/// Data ricevimento domanda
		/// </summary>
		public System.DateTime DATA_DOMANDA
		{
			get
			{
				if(IsDATA_DOMANDANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_DOMANDA;
			}
			set
			{
				_dATA_DOMANDANull = false;
				_dATA_DOMANDA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_DOMANDANull
		{
			get
			{
				return _dATA_DOMANDANull;
			}
			set
			{
				_dATA_DOMANDANull = value;
			}
		}

		/// <summary>
		/// Percentuale contributo PAT
		/// </summary>
		public System.Double PERCENTUALE_CONTRIBUTO
		{
			get
			{
				if(IsPERCENTUALE_CONTRIBUTONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _pERCENTUALE_CONTRIBUTO;
			}
			set
			{
				_pERCENTUALE_CONTRIBUTONull = false;
				_pERCENTUALE_CONTRIBUTO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsPERCENTUALE_CONTRIBUTONull
		{
			get
			{
				return _pERCENTUALE_CONTRIBUTONull;
			}
			set
			{
				_pERCENTUALE_CONTRIBUTONull = value;
			}
		}

		/// <summary>
		/// Euro/Lire
		/// </summary>
		public System.Int32 VALUTA
		{
			get
			{
				if(IsVALUTANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _vALUTA;
			}
			set
			{
				_vALUTANull = false;
				_vALUTA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsVALUTANull
		{
			get
			{
				return _vALUTANull;
			}
			set
			{
				_vALUTANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 VALUTASafe
		{
			get
			{
				if (IsVALUTANull)
					return -1;
				return VALUTA;
			}
		}

		/// <summary>
		/// Importo determinato
		/// </summary>
		public System.Double IMPORTO_DETERMINATO
		{
			get
			{
				if(IsIMPORTO_DETERMINATONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iMPORTO_DETERMINATO;
			}
			set
			{
				_iMPORTO_DETERMINATONull = false;
				_iMPORTO_DETERMINATO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIMPORTO_DETERMINATONull
		{
			get
			{
				return _iMPORTO_DETERMINATONull;
			}
			set
			{
				_iMPORTO_DETERMINATONull = value;
			}
		}

		/// <summary>
		/// Importo richiesto
		/// </summary>
		public System.Double IMPORTO_RICHIESTO
		{
			get
			{
				if(IsIMPORTO_RICHIESTONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iMPORTO_RICHIESTO;
			}
			set
			{
				_iMPORTO_RICHIESTONull = false;
				_iMPORTO_RICHIESTO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIMPORTO_RICHIESTONull
		{
			get
			{
				return _iMPORTO_RICHIESTONull;
			}
			set
			{
				_iMPORTO_RICHIESTONull = value;
			}
		}

		/// <summary>
		/// Importo contributo
		/// </summary>
		public System.Double IMPORTO_CONTRIBUTO
		{
			get
			{
				if(IsIMPORTO_CONTRIBUTONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iMPORTO_CONTRIBUTO;
			}
			set
			{
				_iMPORTO_CONTRIBUTONull = false;
				_iMPORTO_CONTRIBUTO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIMPORTO_CONTRIBUTONull
		{
			get
			{
				return _iMPORTO_CONTRIBUTONull;
			}
			set
			{
				_iMPORTO_CONTRIBUTONull = value;
			}
		}

		/// <summary>
		/// Importo spese
		/// </summary>
		public System.Double IMPORTO_SPESE
		{
			get
			{
				if(IsIMPORTO_SPESENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iMPORTO_SPESE;
			}
			set
			{
				_iMPORTO_SPESENull = false;
				_iMPORTO_SPESE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIMPORTO_SPESENull
		{
			get
			{
				return _iMPORTO_SPESENull;
			}
			set
			{
				_iMPORTO_SPESENull = value;
			}
		}

		/// <summary>
		/// 1=Acconto 2=Saldo
		/// </summary>
		public System.Int32 TIPO_CONTRIBUTO
		{
			get
			{
				if(IsTIPO_CONTRIBUTONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _tIPO_CONTRIBUTO;
			}
			set
			{
				_tIPO_CONTRIBUTONull = false;
				_tIPO_CONTRIBUTO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsTIPO_CONTRIBUTONull
		{
			get
			{
				return _tIPO_CONTRIBUTONull;
			}
			set
			{
				_tIPO_CONTRIBUTONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 TIPO_CONTRIBUTOSafe
		{
			get
			{
				if (IsTIPO_CONTRIBUTONull)
					return -1;
				return TIPO_CONTRIBUTO;
			}
		}

		/// <summary>
		/// Numero determina
		/// </summary>
		public System.String NUMERO_DETERMINA
		{
			get
			{
				if(IsNUMERO_DETERMINANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _nUMERO_DETERMINA;
			}
			set
			{
				_nUMERO_DETERMINANull = false;
				_nUMERO_DETERMINA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsNUMERO_DETERMINANull
		{
			get
			{
				return _nUMERO_DETERMINANull;
			}
			set
			{
				_nUMERO_DETERMINANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String NUMERO_DETERMINASafe
		{
			get
			{
				if (IsNUMERO_DETERMINANull)
					return System.String.Empty;
				return NUMERO_DETERMINA;
			}
		}

		/// <summary>
		/// Data determina
		/// </summary>
		public System.DateTime DATA_DETERMINA
		{
			get
			{
				if(IsDATA_DETERMINANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_DETERMINA;
			}
			set
			{
				_dATA_DETERMINANull = false;
				_dATA_DETERMINA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_DETERMINANull
		{
			get
			{
				return _dATA_DETERMINANull;
			}
			set
			{
				_dATA_DETERMINANull = value;
			}
		}

		/// <summary>
		/// 1=Liquidato
		/// </summary>
		public System.Int32 LIQUIDATO
		{
			get
			{
				if(IsLIQUIDATONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _lIQUIDATO;
			}
			set
			{
				_lIQUIDATONull = false;
				_lIQUIDATO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsLIQUIDATONull
		{
			get
			{
				return _lIQUIDATONull;
			}
			set
			{
				_lIQUIDATONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 LIQUIDATOSafe
		{
			get
			{
				if (IsLIQUIDATONull)
					return -1;
				return LIQUIDATO;
			}
		}

		/// <summary>
		/// Numero mandato
		/// </summary>
		public System.String NUMERO_MANDATO
		{
			get
			{
				if(IsNUMERO_MANDATONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _nUMERO_MANDATO;
			}
			set
			{
				_nUMERO_MANDATONull = false;
				_nUMERO_MANDATO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsNUMERO_MANDATONull
		{
			get
			{
				return _nUMERO_MANDATONull;
			}
			set
			{
				_nUMERO_MANDATONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String NUMERO_MANDATOSafe
		{
			get
			{
				if (IsNUMERO_MANDATONull)
					return System.String.Empty;
				return NUMERO_MANDATO;
			}
		}

		/// <summary>
		/// Data mandato
		/// </summary>
		public System.DateTime DATA_MANDATO
		{
			get
			{
				if(IsDATA_MANDATONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_MANDATO;
			}
			set
			{
				_dATA_MANDATONull = false;
				_dATA_MANDATO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_MANDATONull
		{
			get
			{
				return _dATA_MANDATONull;
			}
			set
			{
				_dATA_MANDATONull = value;
			}
		}

		/// <summary>
		/// Note
		/// </summary>
		public System.String NOTE
		{
			get
			{
				if(IsNOTENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _nOTE;
			}
			set
			{
				_nOTENull = false;
				_nOTE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsNOTENull
		{
			get
			{
				return _nOTENull;
			}
			set
			{
				_nOTENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String NOTESafe
		{
			get
			{
				if (IsNOTENull)
					return System.String.Empty;
				return NOTE;
			}
		}

		/// <summary>
		/// Value of field OPERATOREULTMOD
		/// </summary>
		public System.String OPERATOREULTMOD
		{
			get
			{
				if(IsOPERATOREULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _oPERATOREULTMOD;
			}
			set
			{
				_oPERATOREULTMODNull = false;
				_oPERATOREULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsOPERATOREULTMODNull
		{
			get
			{
				return _oPERATOREULTMODNull;
			}
			set
			{
				_oPERATOREULTMODNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String OPERATOREULTMODSafe
		{
			get
			{
				if (IsOPERATOREULTMODNull)
					return System.String.Empty;
				return OPERATOREULTMOD;
			}
		}

		/// <summary>
		/// Value of field DATAORAULTMOD
		/// </summary>
		public System.DateTime DATAORAULTMOD
		{
			get
			{
				if(IsDATAORAULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATAORAULTMOD;
			}
			set
			{
				_dATAORAULTMODNull = false;
				_dATAORAULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATAORAULTMODNull
		{
			get
			{
				return _dATAORAULTMODNull;
			}
			set
			{
				_dATAORAULTMODNull = value;
			}
		}

		/// <summary>
		/// Identificativo del record
		/// </summary>
		public System.Int32 IDOBJ_LIQUIDAZIONE
		{
			get
			{
				if(IsIDOBJ_LIQUIDAZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iDOBJ_LIQUIDAZIONE;
			}
			set
			{
				_iDOBJ_LIQUIDAZIONENull = false;
				_iDOBJ_LIQUIDAZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIDOBJ_LIQUIDAZIONENull
		{
			get
			{
				return _iDOBJ_LIQUIDAZIONENull;
			}
			set
			{
				_iDOBJ_LIQUIDAZIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 IDOBJ_LIQUIDAZIONESafe
		{
			get
			{
				if (IsIDOBJ_LIQUIDAZIONENull)
					return -1;
				return IDOBJ_LIQUIDAZIONE;
			}
		}

		/// <summary>
		/// Identificativo del record
		/// </summary>
		public System.Int32 IDOBJ_PROCEDURA
		{
			get
			{
				if(IsIDOBJ_PROCEDURANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iDOBJ_PROCEDURA;
			}
			set
			{
				_iDOBJ_PROCEDURANull = false;
				_iDOBJ_PROCEDURA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIDOBJ_PROCEDURANull
		{
			get
			{
				return _iDOBJ_PROCEDURANull;
			}
			set
			{
				_iDOBJ_PROCEDURANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 IDOBJ_PROCEDURASafe
		{
			get
			{
				if (IsIDOBJ_PROCEDURANull)
					return -1;
				return IDOBJ_PROCEDURA;
			}
		}

		/// <summary>
		/// Identificativo del record
		/// </summary>
		public System.Int32 IDOBJ_REVISIONE
		{
			get
			{
				if(IsIDOBJ_REVISIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iDOBJ_REVISIONE;
			}
			set
			{
				_iDOBJ_REVISIONENull = false;
				_iDOBJ_REVISIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIDOBJ_REVISIONENull
		{
			get
			{
				return _iDOBJ_REVISIONENull;
			}
			set
			{
				_iDOBJ_REVISIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 IDOBJ_REVISIONESafe
		{
			get
			{
				if (IsIDOBJ_REVISIONENull)
					return -1;
				return IDOBJ_REVISIONE;
			}
		}

	}
}