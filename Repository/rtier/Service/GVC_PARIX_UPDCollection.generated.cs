//
//Generated by gvc at 26/03/2009 9.03.13
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVC_PARIX_UPD
	/// </summary>
	public partial class GVC_PARIX_UPDCollection
	{
		/// <summary>
		/// Returns the Database Name of the field ID.
		///The field is mandatory.
		/// </summary>
		public const string IDColumnName = "ID";
		/// <summary>
		/// Returns the Database Name of the field TRACKINGID.
		/// </summary>
		public const string TRACKINGIDColumnName = "TRACKINGID";
		/// <summary>
		/// Returns the Database Name of the field DATAORA_INSERIMENTO_RECORD.
		/// </summary>
		public const string DATAORA_INSERIMENTO_RECORDColumnName = "DATAORA_INSERIMENTO_RECORD";
		/// <summary>
		/// Returns the Database Name of the field DATAORA_AGGIORNAMENTO.
		/// </summary>
		public const string DATAORA_AGGIORNAMENTOColumnName = "DATAORA_AGGIORNAMENTO";
		/// <summary>
		/// Returns the Database Name of the field CODICE_FISCALE.
		///The field is mandatory.
		/// </summary>
		public const string CODICE_FISCALEColumnName = "CODICE_FISCALE";
		/// <summary>
		/// Returns the Database Name of the field DENOMINAZIONE.
		/// </summary>
		public const string DENOMINAZIONEColumnName = "DENOMINAZIONE";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_RI.
		/// </summary>
		public const string NUMERO_RIColumnName = "NUMERO_RI";
		/// <summary>
		/// Returns the Database Name of the field CCIAA_REGZ.
		/// </summary>
		public const string CCIAA_REGZColumnName = "CCIAA_REGZ";
		/// <summary>
		/// Returns the Database Name of the field N_ISCRIZIONE_REA.
		/// </summary>
		public const string N_ISCRIZIONE_REAColumnName = "N_ISCRIZIONE_REA";
		/// <summary>
		/// Returns the Database Name of the field DATA_ISCR_REA.
		/// </summary>
		public const string DATA_ISCR_REAColumnName = "DATA_ISCR_REA";
		/// <summary>
		/// Returns the Database Name of the field DATI_IMPRESA.
		/// </summary>
		public const string DATI_IMPRESAColumnName = "DATI_IMPRESA";
		/// <summary>
		/// Returns the Database Name of the field C_NATURA_GIURIDICA.
		/// </summary>
		public const string C_NATURA_GIURIDICAColumnName = "C_NATURA_GIURIDICA";
		/// <summary>
		/// Returns the Database Name of the field DATAORA_ALLINEAMENTOINGVC.
		/// </summary>
		public const string DATAORA_ALLINEAMENTOINGVCColumnName = "DATAORA_ALLINEAMENTOINGVC";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVC_PARIX_UPDCollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVC_PARIX_UPD
		/// </summary>
		/// <returns>Array of objects GVC_PARIX_UPD</returns>
		public virtual GVC_PARIX_UPD[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVC_PARIX_UPD
		/// </summary>
		/// <returns>DataTable of objects GVC_PARIX_UPD</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVC_PARIX_UPD
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVC_PARIX_UPD selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVC_PARIX_UPD</returns>
		public GVC_PARIX_UPD GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVC_PARIX_UPD[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVC_PARIX_UPD selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVC_PARIX_UPD</returns>
		public GVC_PARIX_UPD[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVC_PARIX_UPD selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVC_PARIX_UPD</returns>
		public virtual GVC_PARIX_UPD[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVC_PARIX_UPD selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVC_PARIX_UPD</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVC_PARIX_UPD selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVC_PARIX_UPD</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVC_PARIX_UPD selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("ID, ");
			sql.Append("TRACKINGID, ");
			sql.Append("DATAORA_INSERIMENTO_RECORD, ");
			sql.Append("DATAORA_AGGIORNAMENTO, ");
			sql.Append("CODICE_FISCALE, ");
			sql.Append("DENOMINAZIONE, ");
			sql.Append("NUMERO_RI, ");
			sql.Append("CCIAA_REGZ, ");
			sql.Append("N_ISCRIZIONE_REA, ");
			sql.Append("DATA_ISCR_REA, ");
			sql.Append("DATI_IMPRESA, ");
			sql.Append("C_NATURA_GIURIDICA, ");
			sql.Append("DATAORA_ALLINEAMENTOINGVC ");
			sql.Append("FROM GVC_PARIX_UPD ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Returns an object GVC_PARIX_UPD selected by a primary key
		/// </summary>
		/// <param name="ID">The primary key of the object</param>
		/// <returns>Object of type GVC_PARIX_UPD</returns>
		public virtual GVC_PARIX_UPD GetByPrimaryKey(System.Int32 ID)
		{
			string whereSql = "ID=" + _db.CreateSqlParameterName("ID");
			using(IDbCommand cmd = CreateGetCommand(whereSql, null))
			{
				AddParameter(cmd, "ID", ID);
				GVC_PARIX_UPD[] tempArray = MapRecords(cmd);
				return tempArray.Length == 0 ? null : tempArray[0];
			}
		}


		/// <summary>
		/// Inserts in the Database an object GVC_PARIX_UPD
		/// </summary>
		/// <param name="valore">The object to insert</param>
		public virtual void Insert(GVC_PARIX_UPD valore)
		{
			System.Int32 id = -1;
			System.String sqlStr;

			sqlStr = "SELECT GVC_PARIX_UPD_SEQ.NEXTVAL FROM DUAL";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				id = Convert.ToInt32(cmd.ExecuteScalar());
			}

			sqlStr = "INSERT INTO GVC_PARIX_UPD (" +
			"ID, " +
			"TRACKINGID, " +
			"DATAORA_INSERIMENTO_RECORD, " +
			"DATAORA_AGGIORNAMENTO, " +
			"CODICE_FISCALE, " +
			"DENOMINAZIONE, " +
			"NUMERO_RI, " +
			"CCIAA_REGZ, " +
			"N_ISCRIZIONE_REA, " +
			"DATA_ISCR_REA, " +
			"DATI_IMPRESA, " +
			"C_NATURA_GIURIDICA, " +
			"DATAORA_ALLINEAMENTOINGVC) " +
			"VALUES (" + id.ToString() + ", " +
			_db.CreateSqlParameterName("TRACKINGID") + ", " +
			_db.CreateSqlParameterName("DATAORA_INSERIMENTO_RECORD") + ", " +
			_db.CreateSqlParameterName("DATAORA_AGGIORNAMENTO") + ", " +
			_db.CreateSqlParameterName("CODICE_FISCALE") + ", " +
			_db.CreateSqlParameterName("DENOMINAZIONE") + ", " +
			_db.CreateSqlParameterName("NUMERO_RI") + ", " +
			_db.CreateSqlParameterName("CCIAA_REGZ") + ", " +
			_db.CreateSqlParameterName("N_ISCRIZIONE_REA") + ", " +
			_db.CreateSqlParameterName("DATA_ISCR_REA") + ", " +
			_db.CreateSqlParameterName("DATI_IMPRESA") + ", " +
			_db.CreateSqlParameterName("C_NATURA_GIURIDICA") + ", " +
			_db.CreateSqlParameterName("DATAORA_ALLINEAMENTOINGVC") + ")";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "TRACKINGID", valore.IsTRACKINGIDNull ? DBNull.Value : (object)valore.TRACKINGID);
				AddParameter(cmd, "DATAORA_INSERIMENTO_RECORD", valore.IsDATAORA_INSERIMENTO_RECORDNull ? DBNull.Value : (object)valore.DATAORA_INSERIMENTO_RECORD);
				AddParameter(cmd, "DATAORA_AGGIORNAMENTO", valore.IsDATAORA_AGGIORNAMENTONull ? DBNull.Value : (object)valore.DATAORA_AGGIORNAMENTO);
				AddParameter(cmd, "CODICE_FISCALE", valore.CODICE_FISCALE);
				AddParameter(cmd, "DENOMINAZIONE", valore.IsDENOMINAZIONENull ? DBNull.Value : (object)valore.DENOMINAZIONE);
				AddParameter(cmd, "NUMERO_RI", valore.IsNUMERO_RINull ? DBNull.Value : (object)valore.NUMERO_RI);
				AddParameter(cmd, "CCIAA_REGZ", valore.IsCCIAA_REGZNull ? DBNull.Value : (object)valore.CCIAA_REGZ);
				AddParameter(cmd, "N_ISCRIZIONE_REA", valore.IsN_ISCRIZIONE_REANull ? DBNull.Value : (object)valore.N_ISCRIZIONE_REA);
				AddParameter(cmd, "DATA_ISCR_REA", valore.IsDATA_ISCR_REANull ? DBNull.Value : (object)valore.DATA_ISCR_REA);
				AddParameter(cmd, "DATI_IMPRESA", valore.IsDATI_IMPRESANull ? DBNull.Value : (object)valore.DATI_IMPRESA);
				AddParameter(cmd, "C_NATURA_GIURIDICA", valore.IsC_NATURA_GIURIDICANull ? DBNull.Value : (object)valore.C_NATURA_GIURIDICA);
				AddParameter(cmd, "DATAORA_ALLINEAMENTOINGVC", valore.IsDATAORA_ALLINEAMENTOINGVCNull ? DBNull.Value : (object)valore.DATAORA_ALLINEAMENTOINGVC);
				cmd.ExecuteScalar();
				valore.ID = id;
			}
		}

		/// <summary>
		/// Updates in the Database an object GVC_PARIX_UPD
		/// </summary>
		/// <param name="valore">The object to update</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool Update(GVC_PARIX_UPD valore)
		{
			System.String sqlStr = "UPDATE GVC_PARIX_UPD SET " +
				"TRACKINGID = " + _db.CreateSqlParameterName("TRACKINGID") + ", " +
				"DATAORA_INSERIMENTO_RECORD = " + _db.CreateSqlParameterName("DATAORA_INSERIMENTO_RECORD") + ", " +
				"DATAORA_AGGIORNAMENTO = " + _db.CreateSqlParameterName("DATAORA_AGGIORNAMENTO") + ", " +
				"CODICE_FISCALE = " + _db.CreateSqlParameterName("CODICE_FISCALE") + ", " +
				"DENOMINAZIONE = " + _db.CreateSqlParameterName("DENOMINAZIONE") + ", " +
				"NUMERO_RI = " + _db.CreateSqlParameterName("NUMERO_RI") + ", " +
				"CCIAA_REGZ = " + _db.CreateSqlParameterName("CCIAA_REGZ") + ", " +
				"N_ISCRIZIONE_REA = " + _db.CreateSqlParameterName("N_ISCRIZIONE_REA") + ", " +
				"DATA_ISCR_REA = " + _db.CreateSqlParameterName("DATA_ISCR_REA") + ", " +
				"DATI_IMPRESA = " + _db.CreateSqlParameterName("DATI_IMPRESA") + ", " +
				"C_NATURA_GIURIDICA = " + _db.CreateSqlParameterName("C_NATURA_GIURIDICA") + ", " +
				"DATAORA_ALLINEAMENTOINGVC = " + _db.CreateSqlParameterName("DATAORA_ALLINEAMENTOINGVC") +
				" WHERE " +
				"ID = " + _db.CreateSqlParameterName("ID");
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "ID", valore.ID);
				AddParameter(cmd, "TRACKINGID", valore.IsTRACKINGIDNull ? DBNull.Value : (object)valore.TRACKINGID);
				AddParameter(cmd, "DATAORA_INSERIMENTO_RECORD", valore.IsDATAORA_INSERIMENTO_RECORDNull ? DBNull.Value : (object)valore.DATAORA_INSERIMENTO_RECORD);
				AddParameter(cmd, "DATAORA_AGGIORNAMENTO", valore.IsDATAORA_AGGIORNAMENTONull ? DBNull.Value : (object)valore.DATAORA_AGGIORNAMENTO);
				AddParameter(cmd, "CODICE_FISCALE", valore.CODICE_FISCALE);
				AddParameter(cmd, "DENOMINAZIONE", valore.IsDENOMINAZIONENull ? DBNull.Value : (object)valore.DENOMINAZIONE);
				AddParameter(cmd, "NUMERO_RI", valore.IsNUMERO_RINull ? DBNull.Value : (object)valore.NUMERO_RI);
				AddParameter(cmd, "CCIAA_REGZ", valore.IsCCIAA_REGZNull ? DBNull.Value : (object)valore.CCIAA_REGZ);
				AddParameter(cmd, "N_ISCRIZIONE_REA", valore.IsN_ISCRIZIONE_REANull ? DBNull.Value : (object)valore.N_ISCRIZIONE_REA);
				AddParameter(cmd, "DATA_ISCR_REA", valore.IsDATA_ISCR_REANull ? DBNull.Value : (object)valore.DATA_ISCR_REA);
				AddParameter(cmd, "DATI_IMPRESA", valore.IsDATI_IMPRESANull ? DBNull.Value : (object)valore.DATI_IMPRESA);
				AddParameter(cmd, "C_NATURA_GIURIDICA", valore.IsC_NATURA_GIURIDICANull ? DBNull.Value : (object)valore.C_NATURA_GIURIDICA);
				AddParameter(cmd, "DATAORA_ALLINEAMENTOINGVC", valore.IsDATAORA_ALLINEAMENTOINGVCNull ? DBNull.Value : (object)valore.DATAORA_ALLINEAMENTOINGVC);
				return cmd.ExecuteNonQuery() != 0;
			}
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVC_PARIX_UPD
		/// </summary>
		/// <param name="table">The DataTable of objects GVC_PARIX_UPD</param>
		public void Update(DataTable table)
		{
			Update(table, true);
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVC_PARIX_UPD
		/// </summary>
		/// <param name="table">The DataTable of objects GVC_PARIX_UPD</param>
		/// <param name="acceptChanges">true to accept the changes, otherwise false</param>
		public virtual void Update(DataTable table, bool acceptChanges)
		{
			DataRowCollection rows = table.Rows;
			for(int i = rows.Count - 1; i >= 0; i--)
			{
				DataRow row = rows[i];
				switch(row.RowState)
				{
					case DataRowState.Added:
						Insert(MapRow(row));
						if(acceptChanges)
							row.AcceptChanges();
						break;

					case DataRowState.Deleted:
						row.RejectChanges();
						try
						{
							DeleteByPrimaryKey((System.Int32)row["ID"]);
						}
						finally
						{
							row.Delete();
						}
						if(acceptChanges)
							row.AcceptChanges();
						break;

				case DataRowState.Modified:
					Update(MapRow(row));
					if(acceptChanges)
						row.AcceptChanges();
					break;
				}
			}
		}

		/// <summary>
		/// Deletes from the Database an object GVC_PARIX_UPD
		/// </summary>
		/// <param name="valore">The object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public bool Delete(GVC_PARIX_UPD valore)
		{
			return DeleteByPrimaryKey(valore.ID);
		}

		/// <summary>
		/// Deletes from the Database an object GVC_PARIX_UPD
		/// </summary>
		/// <param name="iD">The primary key of the object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool DeleteByPrimaryKey(System.Int32 iD)
		{
			string whereSql = "ID=" + _db.CreateSqlParameterName("ID");
			using(IDbCommand cmd = CreateDeleteCommand(whereSql))
			{
				AddParameter(cmd, "ID" , iD);
				return cmd.ExecuteNonQuery() > 0;
			}
		}

		/// <summary>
		/// Deletes from the Database the objects GVC_PARIX_UPD selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>The number of the deleted objects</returns>
		public int Delete(System.String whereSql)
		{
			return CreateDeleteCommand(whereSql).ExecuteNonQuery();
		}

		/// <summary>
		/// Returns an IDbCommand to delete the objects GVC_PARIX_UPD selected by 
		/// a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteCommand(string whereSql)
		{
			StringBuilder sql = new StringBuilder("DELETE FROM GVC_PARIX_UPD");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format(" WHERE {0}", whereSql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Deletes all the objects GVC_PARIX_UPD
		/// </summary>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteAll()
		{
			return Delete("");
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVC_PARIX_UPD
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVC_PARIX_UPD</returns>
		protected GVC_PARIX_UPD[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVC_PARIX_UPD
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVC_PARIX_UPD</returns>
		protected GVC_PARIX_UPD[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVC_PARIX_UPD
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVC_PARIX_UPD</returns>
		protected virtual GVC_PARIX_UPD[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int iDColumnIndex = reader.GetOrdinal("ID");
			int tRACKINGIDColumnIndex = reader.GetOrdinal("TRACKINGID");
			int dATAORA_INSERIMENTO_RECORDColumnIndex = reader.GetOrdinal("DATAORA_INSERIMENTO_RECORD");
			int dATAORA_AGGIORNAMENTOColumnIndex = reader.GetOrdinal("DATAORA_AGGIORNAMENTO");
			int cODICE_FISCALEColumnIndex = reader.GetOrdinal("CODICE_FISCALE");
			int dENOMINAZIONEColumnIndex = reader.GetOrdinal("DENOMINAZIONE");
			int nUMERO_RIColumnIndex = reader.GetOrdinal("NUMERO_RI");
			int cCIAA_REGZColumnIndex = reader.GetOrdinal("CCIAA_REGZ");
			int n_ISCRIZIONE_REAColumnIndex = reader.GetOrdinal("N_ISCRIZIONE_REA");
			int dATA_ISCR_REAColumnIndex = reader.GetOrdinal("DATA_ISCR_REA");
			int dATI_IMPRESAColumnIndex = reader.GetOrdinal("DATI_IMPRESA");
			int c_NATURA_GIURIDICAColumnIndex = reader.GetOrdinal("C_NATURA_GIURIDICA");
			int dATAORA_ALLINEAMENTOINGVCColumnIndex = reader.GetOrdinal("DATAORA_ALLINEAMENTOINGVC");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVC_PARIX_UPD record = new GVC_PARIX_UPD();
					recordList.Add(record);
					record.ID = Convert.ToInt32(reader.GetValue(iDColumnIndex));
					if(!reader.IsDBNull(tRACKINGIDColumnIndex))
						record.TRACKINGID = Convert.ToString(reader.GetValue(tRACKINGIDColumnIndex));
					if(!reader.IsDBNull(dATAORA_INSERIMENTO_RECORDColumnIndex))
						record.DATAORA_INSERIMENTO_RECORD = Convert.ToDateTime(reader.GetValue(dATAORA_INSERIMENTO_RECORDColumnIndex));
					if(!reader.IsDBNull(dATAORA_AGGIORNAMENTOColumnIndex))
						record.DATAORA_AGGIORNAMENTO = Convert.ToDateTime(reader.GetValue(dATAORA_AGGIORNAMENTOColumnIndex));
					record.CODICE_FISCALE = Convert.ToString(reader.GetValue(cODICE_FISCALEColumnIndex));
					if(!reader.IsDBNull(dENOMINAZIONEColumnIndex))
						record.DENOMINAZIONE = Convert.ToString(reader.GetValue(dENOMINAZIONEColumnIndex));
					if(!reader.IsDBNull(nUMERO_RIColumnIndex))
						record.NUMERO_RI = Convert.ToString(reader.GetValue(nUMERO_RIColumnIndex));
					if(!reader.IsDBNull(cCIAA_REGZColumnIndex))
						record.CCIAA_REGZ = Convert.ToString(reader.GetValue(cCIAA_REGZColumnIndex));
					if(!reader.IsDBNull(n_ISCRIZIONE_REAColumnIndex))
						record.N_ISCRIZIONE_REA = Convert.ToInt32(reader.GetValue(n_ISCRIZIONE_REAColumnIndex));
					if(!reader.IsDBNull(dATA_ISCR_REAColumnIndex))
						record.DATA_ISCR_REA = Convert.ToDateTime(reader.GetValue(dATA_ISCR_REAColumnIndex));
					if(!reader.IsDBNull(dATI_IMPRESAColumnIndex))
						record.DATI_IMPRESA = ((System.Byte[])reader.GetValue(dATI_IMPRESAColumnIndex));
					if(!reader.IsDBNull(c_NATURA_GIURIDICAColumnIndex))
						record.C_NATURA_GIURIDICA = Convert.ToString(reader.GetValue(c_NATURA_GIURIDICAColumnIndex));
					if(!reader.IsDBNull(dATAORA_ALLINEAMENTOINGVCColumnIndex))
						record.DATAORA_ALLINEAMENTOINGVC = Convert.ToDateTime(reader.GetValue(dATAORA_ALLINEAMENTOINGVCColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVC_PARIX_UPD[])(recordList.ToArray(typeof(GVC_PARIX_UPD)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVC_PARIX_UPD</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVC_PARIX_UPD</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVC_PARIX_UPD</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVC_PARIX_UPD
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVC_PARIX_UPD</returns>
		protected virtual GVC_PARIX_UPD MapRow(DataRow row)
		{
			GVC_PARIX_UPD mappedObject = new GVC_PARIX_UPD();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "ID"
			dataColumn = dataTable.Columns["ID"];
			if(!row.IsNull(dataColumn))
				mappedObject.ID = (System.Int32)row[dataColumn];
			//Campo "TRACKINGID"
			dataColumn = dataTable.Columns["TRACKINGID"];
			if(!row.IsNull(dataColumn))
				mappedObject.TRACKINGID = (System.String)row[dataColumn];
			//Campo "DATAORA_INSERIMENTO_RECORD"
			dataColumn = dataTable.Columns["DATAORA_INSERIMENTO_RECORD"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORA_INSERIMENTO_RECORD = (System.DateTime)row[dataColumn];
			//Campo "DATAORA_AGGIORNAMENTO"
			dataColumn = dataTable.Columns["DATAORA_AGGIORNAMENTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORA_AGGIORNAMENTO = (System.DateTime)row[dataColumn];
			//Campo "CODICE_FISCALE"
			dataColumn = dataTable.Columns["CODICE_FISCALE"];
			if(!row.IsNull(dataColumn))
				mappedObject.CODICE_FISCALE = (System.String)row[dataColumn];
			//Campo "DENOMINAZIONE"
			dataColumn = dataTable.Columns["DENOMINAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DENOMINAZIONE = (System.String)row[dataColumn];
			//Campo "NUMERO_RI"
			dataColumn = dataTable.Columns["NUMERO_RI"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_RI = (System.String)row[dataColumn];
			//Campo "CCIAA_REGZ"
			dataColumn = dataTable.Columns["CCIAA_REGZ"];
			if(!row.IsNull(dataColumn))
				mappedObject.CCIAA_REGZ = (System.String)row[dataColumn];
			//Campo "N_ISCRIZIONE_REA"
			dataColumn = dataTable.Columns["N_ISCRIZIONE_REA"];
			if(!row.IsNull(dataColumn))
				mappedObject.N_ISCRIZIONE_REA = (System.Int32)row[dataColumn];
			//Campo "DATA_ISCR_REA"
			dataColumn = dataTable.Columns["DATA_ISCR_REA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_ISCR_REA = (System.DateTime)row[dataColumn];
			//Campo "DATI_IMPRESA"
			dataColumn = dataTable.Columns["DATI_IMPRESA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATI_IMPRESA = (System.Byte[])row[dataColumn];
			//Campo "C_NATURA_GIURIDICA"
			dataColumn = dataTable.Columns["C_NATURA_GIURIDICA"];
			if(!row.IsNull(dataColumn))
				mappedObject.C_NATURA_GIURIDICA = (System.String)row[dataColumn];
			//Campo "DATAORA_ALLINEAMENTOINGVC"
			dataColumn = dataTable.Columns["DATAORA_ALLINEAMENTOINGVC"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORA_ALLINEAMENTOINGVC = (System.DateTime)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVC_PARIX_UPD
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVC_PARIX_UPD";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("ID", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = true;
			dataColumn.Unique = true;
			dataColumn.AutoIncrement = true;
			dataColumn = dataTable.Columns.Add("TRACKINGID", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORA_INSERIMENTO_RECORD", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORA_AGGIORNAMENTO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CODICE_FISCALE", typeof(System.String));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DENOMINAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_RI", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CCIAA_REGZ", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("N_ISCRIZIONE_REA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_ISCR_REA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATI_IMPRESA", typeof(System.Byte[]));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("C_NATURA_GIURIDICA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORA_ALLINEAMENTOINGVC", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "ID":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "TRACKINGID":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORA_INSERIMENTO_RECORD":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATAORA_AGGIORNAMENTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "CODICE_FISCALE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DENOMINAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "NUMERO_RI":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "CCIAA_REGZ":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "N_ISCRIZIONE_REA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_ISCR_REA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATI_IMPRESA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Byte, valore);
					break;

				case "C_NATURA_GIURIDICA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORA_ALLINEAMENTOINGVC":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
