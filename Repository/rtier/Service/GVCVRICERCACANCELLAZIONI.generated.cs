//
//Generated by DELTADATOR\GS0445 at 28/09/2009 9.59.47
//

using System;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Description of GVCVRICERCACANCELLAZIONI
	/// </summary>
	public partial class GVCVRICERCACANCELLAZIONI
	{
		private System.String _s_DENOMINAZIONE;
		private System.Boolean _s_DENOMINAZIONENull = true;
		private System.Int32 _s_IDOBJ;
		private System.Int32 _r_IDOBJ;
		private System.String _r_NUMERO_REA;
		private System.Boolean _r_NUMERO_REANull = true;
		private System.Int32 _r_IDOBJ_STATO;
		private System.Boolean _r_IDOBJ_STATONull = true;
		private System.String _cANC_TIPO_1;
		private System.Boolean _cANC_TIPO_1Null = true;
		private System.String _cANC_TIPO_2;
		private System.Boolean _cANC_TIPO_2Null = true;
		private System.String _cANC_TIPO_3;
		private System.Boolean _cANC_TIPO_3Null = true;
		private System.DateTime _cANC_DATA_DOMANDA;
		private System.Boolean _cANC_DATA_DOMANDANull = true;
		private System.DateTime _cANC_DATA_DETERMINA;
		private System.Boolean _cANC_DATA_DETERMINANull = true;
		private System.DateTime _cANC_DATA_CANC_REGISTRO;
		private System.Boolean _cANC_DATA_CANC_REGISTRONull = true;
		private System.DateTime _cANC_DATA_CANC_ALBO;
		private System.Boolean _cANC_DATA_CANC_ALBONull = true;
		private System.String _cANC_NUMERO_DETERMINA;
		private System.Boolean _cANC_NUMERO_DETERMINANull = true;
		private System.String _cANC_NOTE;
		private System.Boolean _cANC_NOTENull = true;

		/// <summary>
		/// Default constructor
		/// </summary>
		public GVCVRICERCACANCELLAZIONI(){}

		/// <summary>
		/// Value of field S_DENOMINAZIONE
		/// </summary>
		public System.String S_DENOMINAZIONE
		{
			get
			{
				if(IsS_DENOMINAZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _s_DENOMINAZIONE;
			}
			set
			{
				_s_DENOMINAZIONENull = false;
				_s_DENOMINAZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsS_DENOMINAZIONENull
		{
			get
			{
				return _s_DENOMINAZIONENull;
			}
			set
			{
				_s_DENOMINAZIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String S_DENOMINAZIONESafe
		{
			get
			{
				if (IsS_DENOMINAZIONENull)
					return System.String.Empty;
				return S_DENOMINAZIONE;
			}
		}

		/// <summary>
		/// Value of field S_IDOBJ
		/// The field is mandatory.
		/// </summary>
		public System.Int32 S_IDOBJ
		{
			get
			{
				return _s_IDOBJ;
			}
			set
			{
				_s_IDOBJ = value;
			}
		}

		/// <summary>
		/// Value of field R_IDOBJ
		/// The field is mandatory.
		/// </summary>
		public System.Int32 R_IDOBJ
		{
			get
			{
				return _r_IDOBJ;
			}
			set
			{
				_r_IDOBJ = value;
			}
		}

		/// <summary>
		/// Value of field R_NUMERO_REA
		/// </summary>
		public System.String R_NUMERO_REA
		{
			get
			{
				if(IsR_NUMERO_REANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _r_NUMERO_REA;
			}
			set
			{
				_r_NUMERO_REANull = false;
				_r_NUMERO_REA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsR_NUMERO_REANull
		{
			get
			{
				return _r_NUMERO_REANull;
			}
			set
			{
				_r_NUMERO_REANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String R_NUMERO_REASafe
		{
			get
			{
				if (IsR_NUMERO_REANull)
					return System.String.Empty;
				return R_NUMERO_REA;
			}
		}

		/// <summary>
		/// Value of field R_IDOBJ_STATO
		/// </summary>
		public System.Int32 R_IDOBJ_STATO
		{
			get
			{
				if(IsR_IDOBJ_STATONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _r_IDOBJ_STATO;
			}
			set
			{
				_r_IDOBJ_STATONull = false;
				_r_IDOBJ_STATO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsR_IDOBJ_STATONull
		{
			get
			{
				return _r_IDOBJ_STATONull;
			}
			set
			{
				_r_IDOBJ_STATONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 R_IDOBJ_STATOSafe
		{
			get
			{
				if (IsR_IDOBJ_STATONull)
					return -1;
				return R_IDOBJ_STATO;
			}
		}

		/// <summary>
		/// Value of field CANC_TIPO_1
		/// </summary>
		public System.String CANC_TIPO_1
		{
			get
			{
				if(IsCANC_TIPO_1Null)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cANC_TIPO_1;
			}
			set
			{
				_cANC_TIPO_1Null = false;
				_cANC_TIPO_1 = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCANC_TIPO_1Null
		{
			get
			{
				return _cANC_TIPO_1Null;
			}
			set
			{
				_cANC_TIPO_1Null = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String CANC_TIPO_1Safe
		{
			get
			{
				if (IsCANC_TIPO_1Null)
					return System.String.Empty;
				return CANC_TIPO_1;
			}
		}

		/// <summary>
		/// Value of field CANC_TIPO_2
		/// </summary>
		public System.String CANC_TIPO_2
		{
			get
			{
				if(IsCANC_TIPO_2Null)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cANC_TIPO_2;
			}
			set
			{
				_cANC_TIPO_2Null = false;
				_cANC_TIPO_2 = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCANC_TIPO_2Null
		{
			get
			{
				return _cANC_TIPO_2Null;
			}
			set
			{
				_cANC_TIPO_2Null = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String CANC_TIPO_2Safe
		{
			get
			{
				if (IsCANC_TIPO_2Null)
					return System.String.Empty;
				return CANC_TIPO_2;
			}
		}

		/// <summary>
		/// Value of field CANC_TIPO_3
		/// </summary>
		public System.String CANC_TIPO_3
		{
			get
			{
				if(IsCANC_TIPO_3Null)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cANC_TIPO_3;
			}
			set
			{
				_cANC_TIPO_3Null = false;
				_cANC_TIPO_3 = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCANC_TIPO_3Null
		{
			get
			{
				return _cANC_TIPO_3Null;
			}
			set
			{
				_cANC_TIPO_3Null = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String CANC_TIPO_3Safe
		{
			get
			{
				if (IsCANC_TIPO_3Null)
					return System.String.Empty;
				return CANC_TIPO_3;
			}
		}

		/// <summary>
		/// Value of field CANC_DATA_DOMANDA
		/// </summary>
		public System.DateTime CANC_DATA_DOMANDA
		{
			get
			{
				if(IsCANC_DATA_DOMANDANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cANC_DATA_DOMANDA;
			}
			set
			{
				_cANC_DATA_DOMANDANull = false;
				_cANC_DATA_DOMANDA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCANC_DATA_DOMANDANull
		{
			get
			{
				return _cANC_DATA_DOMANDANull;
			}
			set
			{
				_cANC_DATA_DOMANDANull = value;
			}
		}

		/// <summary>
		/// Value of field CANC_DATA_DETERMINA
		/// </summary>
		public System.DateTime CANC_DATA_DETERMINA
		{
			get
			{
				if(IsCANC_DATA_DETERMINANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cANC_DATA_DETERMINA;
			}
			set
			{
				_cANC_DATA_DETERMINANull = false;
				_cANC_DATA_DETERMINA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCANC_DATA_DETERMINANull
		{
			get
			{
				return _cANC_DATA_DETERMINANull;
			}
			set
			{
				_cANC_DATA_DETERMINANull = value;
			}
		}

		/// <summary>
		/// Value of field CANC_DATA_CANC_REGISTRO
		/// </summary>
		public System.DateTime CANC_DATA_CANC_REGISTRO
		{
			get
			{
				if(IsCANC_DATA_CANC_REGISTRONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cANC_DATA_CANC_REGISTRO;
			}
			set
			{
				_cANC_DATA_CANC_REGISTRONull = false;
				_cANC_DATA_CANC_REGISTRO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCANC_DATA_CANC_REGISTRONull
		{
			get
			{
				return _cANC_DATA_CANC_REGISTRONull;
			}
			set
			{
				_cANC_DATA_CANC_REGISTRONull = value;
			}
		}

		/// <summary>
		/// Value of field CANC_DATA_CANC_ALBO
		/// </summary>
		public System.DateTime CANC_DATA_CANC_ALBO
		{
			get
			{
				if(IsCANC_DATA_CANC_ALBONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cANC_DATA_CANC_ALBO;
			}
			set
			{
				_cANC_DATA_CANC_ALBONull = false;
				_cANC_DATA_CANC_ALBO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCANC_DATA_CANC_ALBONull
		{
			get
			{
				return _cANC_DATA_CANC_ALBONull;
			}
			set
			{
				_cANC_DATA_CANC_ALBONull = value;
			}
		}

		/// <summary>
		/// Value of field CANC_NUMERO_DETERMINA
		/// </summary>
		public System.String CANC_NUMERO_DETERMINA
		{
			get
			{
				if(IsCANC_NUMERO_DETERMINANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cANC_NUMERO_DETERMINA;
			}
			set
			{
				_cANC_NUMERO_DETERMINANull = false;
				_cANC_NUMERO_DETERMINA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCANC_NUMERO_DETERMINANull
		{
			get
			{
				return _cANC_NUMERO_DETERMINANull;
			}
			set
			{
				_cANC_NUMERO_DETERMINANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String CANC_NUMERO_DETERMINASafe
		{
			get
			{
				if (IsCANC_NUMERO_DETERMINANull)
					return System.String.Empty;
				return CANC_NUMERO_DETERMINA;
			}
		}

		/// <summary>
		/// Value of field CANC_NOTE
		/// </summary>
		public System.String CANC_NOTE
		{
			get
			{
				if(IsCANC_NOTENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cANC_NOTE;
			}
			set
			{
				_cANC_NOTENull = false;
				_cANC_NOTE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCANC_NOTENull
		{
			get
			{
				return _cANC_NOTENull;
			}
			set
			{
				_cANC_NOTENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String CANC_NOTESafe
		{
			get
			{
				if (IsCANC_NOTENull)
					return System.String.Empty;
				return CANC_NOTE;
			}
		}

	}
}