//
//Generated by gvc at 27/07/2009 16.10.08
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCVRICERCADOCUMENTAZIONE
	/// </summary>
	public partial class GVCVRICERCADOCUMENTAZIONECollection
	{
		/// <summary>
		/// Returns the Database Name of the field S_DENOMINAZIONE.
		/// </summary>
		public const string S_DENOMINAZIONEColumnName = "S_DENOMINAZIONE";
		/// <summary>
		/// Returns the Database Name of the field S_IDOBJ.
		/// </summary>
		public const string S_IDOBJColumnName = "S_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ.
		/// </summary>
		public const string R_IDOBJColumnName = "R_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field R_NUMERO_REA.
		/// </summary>
		public const string R_NUMERO_REAColumnName = "R_NUMERO_REA";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ_STATO.
		/// </summary>
		public const string R_IDOBJ_STATOColumnName = "R_IDOBJ_STATO";
		/// <summary>
		/// Returns the Database Name of the field DOC_ID_OBJ.
		/// </summary>
		public const string DOC_ID_OBJColumnName = "DOC_ID_OBJ";
		/// <summary>
		/// Returns the Database Name of the field DOC_IDOBJ_TIPO.
		/// </summary>
		public const string DOC_IDOBJ_TIPOColumnName = "DOC_IDOBJ_TIPO";
		/// <summary>
		/// Returns the Database Name of the field DOC_DATA.
		/// </summary>
		public const string DOC_DATAColumnName = "DOC_DATA";
		/// <summary>
		/// Returns the Database Name of the field DOC_NOME_FILE.
		/// </summary>
		public const string DOC_NOME_FILEColumnName = "DOC_NOME_FILE";
		/// <summary>
		/// Returns the Database Name of the field DOC_SEGNALIBRO.
		/// </summary>
		public const string DOC_SEGNALIBROColumnName = "DOC_SEGNALIBRO";
		/// <summary>
		/// Returns the Database Name of the field DOC_NUMERO_PROTOCOLLO.
		/// </summary>
		public const string DOC_NUMERO_PROTOCOLLOColumnName = "DOC_NUMERO_PROTOCOLLO";
		/// <summary>
		/// Returns the Database Name of the field DOC_DIMENSIONE.
		/// </summary>
		public const string DOC_DIMENSIONEColumnName = "DOC_DIMENSIONE";
		/// <summary>
		/// Returns the Database Name of the field DOC_ID_RIFERIMENTO.
		/// </summary>
		public const string DOC_ID_RIFERIMENTOColumnName = "DOC_ID_RIFERIMENTO";
		/// <summary>
		/// Returns the Database Name of the field ADESIONE_ASSOCIAZIONE.
		/// </summary>
		public const string ADESIONE_ASSOCIAZIONEColumnName = "ADESIONE_ASSOCIAZIONE";
		/// <summary>
		/// Returns the Database Name of the field DOC_NOME_RIFERIMENTO.
		/// </summary>
		public const string DOC_NOME_RIFERIMENTOColumnName = "DOC_NOME_RIFERIMENTO";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCVRICERCADOCUMENTAZIONECollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCVRICERCADOCUMENTAZIONE
		/// </summary>
		/// <returns>Array of objects GVCVRICERCADOCUMENTAZIONE</returns>
		public virtual GVCVRICERCADOCUMENTAZIONE[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCVRICERCADOCUMENTAZIONE
		/// </summary>
		/// <returns>DataTable of objects GVCVRICERCADOCUMENTAZIONE</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCVRICERCADOCUMENTAZIONE
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCVRICERCADOCUMENTAZIONE selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCVRICERCADOCUMENTAZIONE</returns>
		public GVCVRICERCADOCUMENTAZIONE GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCVRICERCADOCUMENTAZIONE[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCVRICERCADOCUMENTAZIONE selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCVRICERCADOCUMENTAZIONE</returns>
		public GVCVRICERCADOCUMENTAZIONE[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCVRICERCADOCUMENTAZIONE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCVRICERCADOCUMENTAZIONE</returns>
		public virtual GVCVRICERCADOCUMENTAZIONE[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCADOCUMENTAZIONE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCVRICERCADOCUMENTAZIONE</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCADOCUMENTAZIONE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCADOCUMENTAZIONE</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCVRICERCADOCUMENTAZIONE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("S_DENOMINAZIONE, ");
			sql.Append("S_IDOBJ, ");
			sql.Append("R_IDOBJ, ");
			sql.Append("R_NUMERO_REA, ");
			sql.Append("R_IDOBJ_STATO, ");
			sql.Append("DOC_ID_OBJ, ");
			sql.Append("DOC_IDOBJ_TIPO, ");
			sql.Append("DOC_DATA, ");
			sql.Append("DOC_NOME_FILE, ");
			sql.Append("DOC_SEGNALIBRO, ");
			sql.Append("DOC_NUMERO_PROTOCOLLO, ");
			sql.Append("DOC_DIMENSIONE, ");
			sql.Append("DOC_ID_RIFERIMENTO, ");
			sql.Append("ADESIONE_ASSOCIAZIONE, ");
			sql.Append("DOC_NOME_RIFERIMENTO ");
			sql.Append("FROM GVCVRICERCADOCUMENTAZIONE ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}


		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCADOCUMENTAZIONE
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCVRICERCADOCUMENTAZIONE</returns>
		protected GVCVRICERCADOCUMENTAZIONE[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCADOCUMENTAZIONE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCVRICERCADOCUMENTAZIONE</returns>
		protected GVCVRICERCADOCUMENTAZIONE[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCVRICERCADOCUMENTAZIONE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCVRICERCADOCUMENTAZIONE</returns>
		protected virtual GVCVRICERCADOCUMENTAZIONE[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int s_DENOMINAZIONEColumnIndex = reader.GetOrdinal("S_DENOMINAZIONE");
			int s_IDOBJColumnIndex = reader.GetOrdinal("S_IDOBJ");
			int r_IDOBJColumnIndex = reader.GetOrdinal("R_IDOBJ");
			int r_NUMERO_REAColumnIndex = reader.GetOrdinal("R_NUMERO_REA");
			int r_IDOBJ_STATOColumnIndex = reader.GetOrdinal("R_IDOBJ_STATO");
			int dOC_ID_OBJColumnIndex = reader.GetOrdinal("DOC_ID_OBJ");
			int dOC_IDOBJ_TIPOColumnIndex = reader.GetOrdinal("DOC_IDOBJ_TIPO");
			int dOC_DATAColumnIndex = reader.GetOrdinal("DOC_DATA");
			int dOC_NOME_FILEColumnIndex = reader.GetOrdinal("DOC_NOME_FILE");
			int dOC_SEGNALIBROColumnIndex = reader.GetOrdinal("DOC_SEGNALIBRO");
			int dOC_NUMERO_PROTOCOLLOColumnIndex = reader.GetOrdinal("DOC_NUMERO_PROTOCOLLO");
			int dOC_DIMENSIONEColumnIndex = reader.GetOrdinal("DOC_DIMENSIONE");
			int dOC_ID_RIFERIMENTOColumnIndex = reader.GetOrdinal("DOC_ID_RIFERIMENTO");
			int aDESIONE_ASSOCIAZIONEColumnIndex = reader.GetOrdinal("ADESIONE_ASSOCIAZIONE");
			int dOC_NOME_RIFERIMENTOColumnIndex = reader.GetOrdinal("DOC_NOME_RIFERIMENTO");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCVRICERCADOCUMENTAZIONE record = new GVCVRICERCADOCUMENTAZIONE();
					recordList.Add(record);
					if(!reader.IsDBNull(s_DENOMINAZIONEColumnIndex))
						record.S_DENOMINAZIONE = Convert.ToString(reader.GetValue(s_DENOMINAZIONEColumnIndex));
					if(!reader.IsDBNull(s_IDOBJColumnIndex))
						record.S_IDOBJ = Convert.ToInt32(reader.GetValue(s_IDOBJColumnIndex));
					if(!reader.IsDBNull(r_IDOBJColumnIndex))
						record.R_IDOBJ = Convert.ToInt32(reader.GetValue(r_IDOBJColumnIndex));
					if(!reader.IsDBNull(r_NUMERO_REAColumnIndex))
						record.R_NUMERO_REA = Convert.ToString(reader.GetValue(r_NUMERO_REAColumnIndex));
					if(!reader.IsDBNull(r_IDOBJ_STATOColumnIndex))
						record.R_IDOBJ_STATO = Convert.ToInt32(reader.GetValue(r_IDOBJ_STATOColumnIndex));
					if(!reader.IsDBNull(dOC_ID_OBJColumnIndex))
						record.DOC_ID_OBJ = Convert.ToInt32(reader.GetValue(dOC_ID_OBJColumnIndex));
					if(!reader.IsDBNull(dOC_IDOBJ_TIPOColumnIndex))
						record.DOC_IDOBJ_TIPO = Convert.ToInt32(reader.GetValue(dOC_IDOBJ_TIPOColumnIndex));
					if(!reader.IsDBNull(dOC_DATAColumnIndex))
						record.DOC_DATA = Convert.ToDateTime(reader.GetValue(dOC_DATAColumnIndex));
					if(!reader.IsDBNull(dOC_NOME_FILEColumnIndex))
						record.DOC_NOME_FILE = Convert.ToString(reader.GetValue(dOC_NOME_FILEColumnIndex));
					if(!reader.IsDBNull(dOC_SEGNALIBROColumnIndex))
						record.DOC_SEGNALIBRO = Convert.ToString(reader.GetValue(dOC_SEGNALIBROColumnIndex));
					if(!reader.IsDBNull(dOC_NUMERO_PROTOCOLLOColumnIndex))
						record.DOC_NUMERO_PROTOCOLLO = Convert.ToString(reader.GetValue(dOC_NUMERO_PROTOCOLLOColumnIndex));
					if(!reader.IsDBNull(dOC_DIMENSIONEColumnIndex))
						record.DOC_DIMENSIONE = Convert.ToInt32(reader.GetValue(dOC_DIMENSIONEColumnIndex));
					if(!reader.IsDBNull(dOC_ID_RIFERIMENTOColumnIndex))
						record.DOC_ID_RIFERIMENTO = Convert.ToInt32(reader.GetValue(dOC_ID_RIFERIMENTOColumnIndex));
					if(!reader.IsDBNull(aDESIONE_ASSOCIAZIONEColumnIndex))
						record.ADESIONE_ASSOCIAZIONE = Convert.ToString(reader.GetValue(aDESIONE_ASSOCIAZIONEColumnIndex));
					if(!reader.IsDBNull(dOC_NOME_RIFERIMENTOColumnIndex))
						record.DOC_NOME_RIFERIMENTO = Convert.ToString(reader.GetValue(dOC_NOME_RIFERIMENTOColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCVRICERCADOCUMENTAZIONE[])(recordList.ToArray(typeof(GVCVRICERCADOCUMENTAZIONE)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCVRICERCADOCUMENTAZIONE</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCVRICERCADOCUMENTAZIONE</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCADOCUMENTAZIONE</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCVRICERCADOCUMENTAZIONE
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCVRICERCADOCUMENTAZIONE</returns>
		protected virtual GVCVRICERCADOCUMENTAZIONE MapRow(DataRow row)
		{
			GVCVRICERCADOCUMENTAZIONE mappedObject = new GVCVRICERCADOCUMENTAZIONE();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "S_DENOMINAZIONE"
			dataColumn = dataTable.Columns["S_DENOMINAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_DENOMINAZIONE = (System.String)row[dataColumn];
			//Campo "S_IDOBJ"
			dataColumn = dataTable.Columns["S_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "R_IDOBJ"
			dataColumn = dataTable.Columns["R_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "R_NUMERO_REA"
			dataColumn = dataTable.Columns["R_NUMERO_REA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_NUMERO_REA = (System.String)row[dataColumn];
			//Campo "R_IDOBJ_STATO"
			dataColumn = dataTable.Columns["R_IDOBJ_STATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ_STATO = (System.Int32)row[dataColumn];
			//Campo "DOC_ID_OBJ"
			dataColumn = dataTable.Columns["DOC_ID_OBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.DOC_ID_OBJ = (System.Int32)row[dataColumn];
			//Campo "DOC_IDOBJ_TIPO"
			dataColumn = dataTable.Columns["DOC_IDOBJ_TIPO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DOC_IDOBJ_TIPO = (System.Int32)row[dataColumn];
			//Campo "DOC_DATA"
			dataColumn = dataTable.Columns["DOC_DATA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DOC_DATA = (System.DateTime)row[dataColumn];
			//Campo "DOC_NOME_FILE"
			dataColumn = dataTable.Columns["DOC_NOME_FILE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DOC_NOME_FILE = (System.String)row[dataColumn];
			//Campo "DOC_SEGNALIBRO"
			dataColumn = dataTable.Columns["DOC_SEGNALIBRO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DOC_SEGNALIBRO = (System.String)row[dataColumn];
			//Campo "DOC_NUMERO_PROTOCOLLO"
			dataColumn = dataTable.Columns["DOC_NUMERO_PROTOCOLLO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DOC_NUMERO_PROTOCOLLO = (System.String)row[dataColumn];
			//Campo "DOC_DIMENSIONE"
			dataColumn = dataTable.Columns["DOC_DIMENSIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DOC_DIMENSIONE = (System.Int32)row[dataColumn];
			//Campo "DOC_ID_RIFERIMENTO"
			dataColumn = dataTable.Columns["DOC_ID_RIFERIMENTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DOC_ID_RIFERIMENTO = (System.Int32)row[dataColumn];
			//Campo "ADESIONE_ASSOCIAZIONE"
			dataColumn = dataTable.Columns["ADESIONE_ASSOCIAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.ADESIONE_ASSOCIAZIONE = (System.String)row[dataColumn];
			//Campo "DOC_NOME_RIFERIMENTO"
			dataColumn = dataTable.Columns["DOC_NOME_RIFERIMENTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DOC_NOME_RIFERIMENTO = (System.String)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCVRICERCADOCUMENTAZIONE
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCVRICERCADOCUMENTAZIONE";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("S_DENOMINAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("S_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_NUMERO_REA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ_STATO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DOC_ID_OBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DOC_IDOBJ_TIPO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DOC_DATA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DOC_NOME_FILE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DOC_SEGNALIBRO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DOC_NUMERO_PROTOCOLLO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DOC_DIMENSIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DOC_ID_RIFERIMENTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ADESIONE_ASSOCIAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DOC_NOME_RIFERIMENTO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "S_DENOMINAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "S_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_NUMERO_REA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_IDOBJ_STATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DOC_ID_OBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DOC_IDOBJ_TIPO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DOC_DATA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DOC_NOME_FILE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DOC_SEGNALIBRO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DOC_NUMERO_PROTOCOLLO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DOC_DIMENSIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DOC_ID_RIFERIMENTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "ADESIONE_ASSOCIAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DOC_NOME_RIFERIMENTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
