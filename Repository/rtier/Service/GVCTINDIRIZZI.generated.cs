//
//Generated by DELTADATOR\GS0445 at 26/03/2009 9.03.13
//

using System;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Description of GVCTINDIRIZZI
	/// </summary>
	public partial class GVCTINDIRIZZI
	{
		private System.Int32 _iDOBJ;
		private System.Int32 _fLAG_PRINCIPALE;
		private System.Int32 _fLAG_SEDE;
		private System.String _vIA;
		private System.Int32 _iDOBJ_SOGGETTO;
		private System.Int32 _iDOBJ_TIPO_INDIRIZZO;
		private System.String _cIVICO;
		private System.Boolean _cIVICONull = true;
		private System.String _cAP;
		private System.Boolean _cAPNull = true;
		private System.String _pROVINCIA;
		private System.Boolean _pROVINCIANull = true;
		private System.String _cOMUNE;
		private System.Boolean _cOMUNENull = true;
		private System.String _fRAZIONE;
		private System.Boolean _fRAZIONENull = true;
		private System.String _sTATO;
		private System.Boolean _sTATONull = true;
		private System.String _cODICE_STRADARIO;
		private System.Boolean _cODICE_STRADARIONull = true;
		private System.String _tELEFONO;
		private System.Boolean _tELEFONONull = true;
		private System.String _fAX;
		private System.Boolean _fAXNull = true;
		private System.String _aLTRO;
		private System.Boolean _aLTRONull = true;
		private System.String _nOTE;
		private System.Boolean _nOTENull = true;
		private System.DateTime _dATA_INIZIO;
		private System.Boolean _dATA_INIZIONull = true;
		private System.DateTime _dATA_FINE;
		private System.Boolean _dATA_FINENull = true;
		private System.String _oPERATOREULTMOD;
		private System.Boolean _oPERATOREULTMODNull = true;
		private System.DateTime _dATAORAULTMOD;
		private System.Boolean _dATAORAULTMODNull = true;
		private System.String _eMAIL;
		private System.Boolean _eMAILNull = true;
		private System.String _wEBPAGE;
		private System.Boolean _wEBPAGENull = true;

		/// <summary>
		/// Default constructor
		/// </summary>
		public GVCTINDIRIZZI(){}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ
		{
			get
			{
				return _iDOBJ;
			}
			set
			{
				_iDOBJ = value;
			}
		}

		/// <summary>
		/// 1=indirizzo principale
		/// The field is mandatory.
		/// </summary>
		public System.Int32 FLAG_PRINCIPALE
		{
			get
			{
				return _fLAG_PRINCIPALE;
			}
			set
			{
				_fLAG_PRINCIPALE = value;
			}
		}

		/// <summary>
		/// 1= sede
		/// The field is mandatory.
		/// </summary>
		public System.Int32 FLAG_SEDE
		{
			get
			{
				return _fLAG_SEDE;
			}
			set
			{
				_fLAG_SEDE = value;
			}
		}

		/// <summary>
		/// Via
		/// The field is mandatory.
		/// </summary>
		public System.String VIA
		{
			get
			{
				return _vIA;
			}
			set
			{
				_vIA = value;
			}
		}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ_SOGGETTO
		{
			get
			{
				return _iDOBJ_SOGGETTO;
			}
			set
			{
				_iDOBJ_SOGGETTO = value;
			}
		}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ_TIPO_INDIRIZZO
		{
			get
			{
				return _iDOBJ_TIPO_INDIRIZZO;
			}
			set
			{
				_iDOBJ_TIPO_INDIRIZZO = value;
			}
		}

		/// <summary>
		/// Numero civico
		/// </summary>
		public System.String CIVICO
		{
			get
			{
				if(IsCIVICONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cIVICO;
			}
			set
			{
				_cIVICONull = false;
				_cIVICO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCIVICONull
		{
			get
			{
				return _cIVICONull;
			}
			set
			{
				_cIVICONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String CIVICOSafe
		{
			get
			{
				if (IsCIVICONull)
					return System.String.Empty;
				return CIVICO;
			}
		}

		/// <summary>
		/// CAP
		/// </summary>
		public System.String CAP
		{
			get
			{
				if(IsCAPNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cAP;
			}
			set
			{
				_cAPNull = false;
				_cAP = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCAPNull
		{
			get
			{
				return _cAPNull;
			}
			set
			{
				_cAPNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String CAPSafe
		{
			get
			{
				if (IsCAPNull)
					return System.String.Empty;
				return CAP;
			}
		}

		/// <summary>
		/// Provincia
		/// </summary>
		public System.String PROVINCIA
		{
			get
			{
				if(IsPROVINCIANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _pROVINCIA;
			}
			set
			{
				_pROVINCIANull = false;
				_pROVINCIA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsPROVINCIANull
		{
			get
			{
				return _pROVINCIANull;
			}
			set
			{
				_pROVINCIANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String PROVINCIASafe
		{
			get
			{
				if (IsPROVINCIANull)
					return System.String.Empty;
				return PROVINCIA;
			}
		}

		/// <summary>
		/// Comune
		/// </summary>
		public System.String COMUNE
		{
			get
			{
				if(IsCOMUNENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cOMUNE;
			}
			set
			{
				_cOMUNENull = false;
				_cOMUNE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCOMUNENull
		{
			get
			{
				return _cOMUNENull;
			}
			set
			{
				_cOMUNENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String COMUNESafe
		{
			get
			{
				if (IsCOMUNENull)
					return System.String.Empty;
				return COMUNE;
			}
		}

		/// <summary>
		/// Localit√†
		/// </summary>
		public System.String FRAZIONE
		{
			get
			{
				if(IsFRAZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _fRAZIONE;
			}
			set
			{
				_fRAZIONENull = false;
				_fRAZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsFRAZIONENull
		{
			get
			{
				return _fRAZIONENull;
			}
			set
			{
				_fRAZIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String FRAZIONESafe
		{
			get
			{
				if (IsFRAZIONENull)
					return System.String.Empty;
				return FRAZIONE;
			}
		}

		/// <summary>
		/// Stato
		/// </summary>
		public System.String STATO
		{
			get
			{
				if(IsSTATONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _sTATO;
			}
			set
			{
				_sTATONull = false;
				_sTATO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsSTATONull
		{
			get
			{
				return _sTATONull;
			}
			set
			{
				_sTATONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String STATOSafe
		{
			get
			{
				if (IsSTATONull)
					return System.String.Empty;
				return STATO;
			}
		}

		/// <summary>
		/// Codice stradario
		/// </summary>
		public System.String CODICE_STRADARIO
		{
			get
			{
				if(IsCODICE_STRADARIONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _cODICE_STRADARIO;
			}
			set
			{
				_cODICE_STRADARIONull = false;
				_cODICE_STRADARIO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsCODICE_STRADARIONull
		{
			get
			{
				return _cODICE_STRADARIONull;
			}
			set
			{
				_cODICE_STRADARIONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String CODICE_STRADARIOSafe
		{
			get
			{
				if (IsCODICE_STRADARIONull)
					return System.String.Empty;
				return CODICE_STRADARIO;
			}
		}

		/// <summary>
		/// Telefono
		/// </summary>
		public System.String TELEFONO
		{
			get
			{
				if(IsTELEFONONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _tELEFONO;
			}
			set
			{
				_tELEFONONull = false;
				_tELEFONO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsTELEFONONull
		{
			get
			{
				return _tELEFONONull;
			}
			set
			{
				_tELEFONONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String TELEFONOSafe
		{
			get
			{
				if (IsTELEFONONull)
					return System.String.Empty;
				return TELEFONO;
			}
		}

		/// <summary>
		/// Fax
		/// </summary>
		public System.String FAX
		{
			get
			{
				if(IsFAXNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _fAX;
			}
			set
			{
				_fAXNull = false;
				_fAX = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsFAXNull
		{
			get
			{
				return _fAXNull;
			}
			set
			{
				_fAXNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String FAXSafe
		{
			get
			{
				if (IsFAXNull)
					return System.String.Empty;
				return FAX;
			}
		}

		/// <summary>
		/// Altre indicazioni
		/// </summary>
		public System.String ALTRO
		{
			get
			{
				if(IsALTRONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _aLTRO;
			}
			set
			{
				_aLTRONull = false;
				_aLTRO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsALTRONull
		{
			get
			{
				return _aLTRONull;
			}
			set
			{
				_aLTRONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String ALTROSafe
		{
			get
			{
				if (IsALTRONull)
					return System.String.Empty;
				return ALTRO;
			}
		}

		/// <summary>
		/// Note
		/// </summary>
		public System.String NOTE
		{
			get
			{
				if(IsNOTENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _nOTE;
			}
			set
			{
				_nOTENull = false;
				_nOTE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsNOTENull
		{
			get
			{
				return _nOTENull;
			}
			set
			{
				_nOTENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String NOTESafe
		{
			get
			{
				if (IsNOTENull)
					return System.String.Empty;
				return NOTE;
			}
		}

		/// <summary>
		/// Data inizio validit√†
		/// </summary>
		public System.DateTime DATA_INIZIO
		{
			get
			{
				if(IsDATA_INIZIONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_INIZIO;
			}
			set
			{
				_dATA_INIZIONull = false;
				_dATA_INIZIO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_INIZIONull
		{
			get
			{
				return _dATA_INIZIONull;
			}
			set
			{
				_dATA_INIZIONull = value;
			}
		}

		/// <summary>
		/// Data fine validit√†
		/// </summary>
		public System.DateTime DATA_FINE
		{
			get
			{
				if(IsDATA_FINENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_FINE;
			}
			set
			{
				_dATA_FINENull = false;
				_dATA_FINE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_FINENull
		{
			get
			{
				return _dATA_FINENull;
			}
			set
			{
				_dATA_FINENull = value;
			}
		}

		/// <summary>
		/// Value of field OPERATOREULTMOD
		/// </summary>
		public System.String OPERATOREULTMOD
		{
			get
			{
				if(IsOPERATOREULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _oPERATOREULTMOD;
			}
			set
			{
				_oPERATOREULTMODNull = false;
				_oPERATOREULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsOPERATOREULTMODNull
		{
			get
			{
				return _oPERATOREULTMODNull;
			}
			set
			{
				_oPERATOREULTMODNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String OPERATOREULTMODSafe
		{
			get
			{
				if (IsOPERATOREULTMODNull)
					return System.String.Empty;
				return OPERATOREULTMOD;
			}
		}

		/// <summary>
		/// Value of field DATAORAULTMOD
		/// </summary>
		public System.DateTime DATAORAULTMOD
		{
			get
			{
				if(IsDATAORAULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATAORAULTMOD;
			}
			set
			{
				_dATAORAULTMODNull = false;
				_dATAORAULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATAORAULTMODNull
		{
			get
			{
				return _dATAORAULTMODNull;
			}
			set
			{
				_dATAORAULTMODNull = value;
			}
		}

		/// <summary>
		/// Indirizzo sito web
		/// </summary>
		public System.String EMAIL
		{
			get
			{
				if(IsEMAILNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _eMAIL;
			}
			set
			{
				_eMAILNull = false;
				_eMAIL = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsEMAILNull
		{
			get
			{
				return _eMAILNull;
			}
			set
			{
				_eMAILNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String EMAILSafe
		{
			get
			{
				if (IsEMAILNull)
					return System.String.Empty;
				return EMAIL;
			}
		}

		/// <summary>
		/// Value of field WEBPAGE
		/// </summary>
		public System.String WEBPAGE
		{
			get
			{
				if(IsWEBPAGENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _wEBPAGE;
			}
			set
			{
				_wEBPAGENull = false;
				_wEBPAGE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsWEBPAGENull
		{
			get
			{
				return _wEBPAGENull;
			}
			set
			{
				_wEBPAGENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String WEBPAGESafe
		{
			get
			{
				if (IsWEBPAGENull)
					return System.String.Empty;
				return WEBPAGE;
			}
		}

	}
}