//
//Generated by gvc at 26/03/2009 9.03.14
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCTLIQUIDAZIONE_COMPENSI
	/// </summary>
	public partial class GVCTLIQUIDAZIONE_COMPENSICollection
	{
		/// <summary>
		/// Returns the Database Name of the field IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJColumnName = "IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field DATA_DOMANDA.
		/// </summary>
		public const string DATA_DOMANDAColumnName = "DATA_DOMANDA";
		/// <summary>
		/// Returns the Database Name of the field PERCENTUALE_CONTRIBUTO.
		/// </summary>
		public const string PERCENTUALE_CONTRIBUTOColumnName = "PERCENTUALE_CONTRIBUTO";
		/// <summary>
		/// Returns the Database Name of the field VALUTA.
		/// </summary>
		public const string VALUTAColumnName = "VALUTA";
		/// <summary>
		/// Returns the Database Name of the field IMPORTO_DETERMINATO.
		/// </summary>
		public const string IMPORTO_DETERMINATOColumnName = "IMPORTO_DETERMINATO";
		/// <summary>
		/// Returns the Database Name of the field IMPORTO_RICHIESTO.
		/// </summary>
		public const string IMPORTO_RICHIESTOColumnName = "IMPORTO_RICHIESTO";
		/// <summary>
		/// Returns the Database Name of the field IMPORTO_CONTRIBUTO.
		/// </summary>
		public const string IMPORTO_CONTRIBUTOColumnName = "IMPORTO_CONTRIBUTO";
		/// <summary>
		/// Returns the Database Name of the field IMPORTO_SPESE.
		/// </summary>
		public const string IMPORTO_SPESEColumnName = "IMPORTO_SPESE";
		/// <summary>
		/// Returns the Database Name of the field TIPO_CONTRIBUTO.
		/// </summary>
		public const string TIPO_CONTRIBUTOColumnName = "TIPO_CONTRIBUTO";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_DETERMINA.
		/// </summary>
		public const string NUMERO_DETERMINAColumnName = "NUMERO_DETERMINA";
		/// <summary>
		/// Returns the Database Name of the field DATA_DETERMINA.
		/// </summary>
		public const string DATA_DETERMINAColumnName = "DATA_DETERMINA";
		/// <summary>
		/// Returns the Database Name of the field LIQUIDATO.
		/// </summary>
		public const string LIQUIDATOColumnName = "LIQUIDATO";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_MANDATO.
		/// </summary>
		public const string NUMERO_MANDATOColumnName = "NUMERO_MANDATO";
		/// <summary>
		/// Returns the Database Name of the field DATA_MANDATO.
		/// </summary>
		public const string DATA_MANDATOColumnName = "DATA_MANDATO";
		/// <summary>
		/// Returns the Database Name of the field NOTE.
		/// </summary>
		public const string NOTEColumnName = "NOTE";
		/// <summary>
		/// Returns the Database Name of the field OPERATOREULTMOD.
		/// </summary>
		public const string OPERATOREULTMODColumnName = "OPERATOREULTMOD";
		/// <summary>
		/// Returns the Database Name of the field DATAORAULTMOD.
		/// </summary>
		public const string DATAORAULTMODColumnName = "DATAORAULTMOD";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_LIQUIDAZIONE.
		/// </summary>
		public const string IDOBJ_LIQUIDAZIONEColumnName = "IDOBJ_LIQUIDAZIONE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_PROCEDURA.
		/// </summary>
		public const string IDOBJ_PROCEDURAColumnName = "IDOBJ_PROCEDURA";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_REVISIONE.
		/// </summary>
		public const string IDOBJ_REVISIONEColumnName = "IDOBJ_REVISIONE";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCTLIQUIDAZIONE_COMPENSICollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <returns>Array of objects GVCTLIQUIDAZIONE_COMPENSI</returns>
		public virtual GVCTLIQUIDAZIONE_COMPENSI[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <returns>DataTable of objects GVCTLIQUIDAZIONE_COMPENSI</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCTLIQUIDAZIONE_COMPENSI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCTLIQUIDAZIONE_COMPENSI</returns>
		public GVCTLIQUIDAZIONE_COMPENSI GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCTLIQUIDAZIONE_COMPENSI[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCTLIQUIDAZIONE_COMPENSI selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCTLIQUIDAZIONE_COMPENSI</returns>
		public GVCTLIQUIDAZIONE_COMPENSI[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCTLIQUIDAZIONE_COMPENSI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCTLIQUIDAZIONE_COMPENSI</returns>
		public virtual GVCTLIQUIDAZIONE_COMPENSI[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTLIQUIDAZIONE_COMPENSI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCTLIQUIDAZIONE_COMPENSI</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTLIQUIDAZIONE_COMPENSI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTLIQUIDAZIONE_COMPENSI</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCTLIQUIDAZIONE_COMPENSI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("IDOBJ, ");
			sql.Append("DATA_DOMANDA, ");
			sql.Append("PERCENTUALE_CONTRIBUTO, ");
			sql.Append("VALUTA, ");
			sql.Append("IMPORTO_DETERMINATO, ");
			sql.Append("IMPORTO_RICHIESTO, ");
			sql.Append("IMPORTO_CONTRIBUTO, ");
			sql.Append("IMPORTO_SPESE, ");
			sql.Append("TIPO_CONTRIBUTO, ");
			sql.Append("NUMERO_DETERMINA, ");
			sql.Append("DATA_DETERMINA, ");
			sql.Append("LIQUIDATO, ");
			sql.Append("NUMERO_MANDATO, ");
			sql.Append("DATA_MANDATO, ");
			sql.Append("NOTE, ");
			sql.Append("OPERATOREULTMOD, ");
			sql.Append("DATAORAULTMOD, ");
			sql.Append("IDOBJ_LIQUIDAZIONE, ");
			sql.Append("IDOBJ_PROCEDURA, ");
			sql.Append("IDOBJ_REVISIONE ");
			sql.Append("FROM GVCTLIQUIDAZIONE_COMPENSI ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Returns an object GVCTLIQUIDAZIONE_COMPENSI selected by a primary key
		/// </summary>
		/// <param name="IDOBJ">The primary key of the object</param>
		/// <returns>Object of type GVCTLIQUIDAZIONE_COMPENSI</returns>
		public virtual GVCTLIQUIDAZIONE_COMPENSI GetByPrimaryKey(System.Int32 IDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateGetCommand(whereSql, null))
			{
				AddParameter(cmd, "IDOBJ", IDOBJ);
				GVCTLIQUIDAZIONE_COMPENSI[] tempArray = MapRecords(cmd);
				return tempArray.Length == 0 ? null : tempArray[0];
			}
		}


		/// <summary>
		/// Returns an object GVCTLIQUIDAZIONE_COMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTLIQUIDAZIONE_COMPENSI</returns>
		public virtual GVCTLIQUIDAZIONE_COMPENSI[] GetByIDOBJ_LIQUIDAZIONE(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			return MapRecords(CreateGetByIDOBJ_LIQUIDAZIONECommand(iDOBJ_LIQUIDAZIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTLIQUIDAZIONE_COMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_LIQUIDAZIONEAsDataTable(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_LIQUIDAZIONECommand(iDOBJ_LIQUIDAZIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_LIQUIDAZIONECommand(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			string whereSql = "IDOBJ_LIQUIDAZIONE = " + _db.CreateSqlParameterName("IDOBJ_LIQUIDAZIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_LIQUIDAZIONE", iDOBJ_LIQUIDAZIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_LIQUIDAZIONE(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			return CreateDeleteByIDOBJ_LIQUIDAZIONECommand(iDOBJ_LIQUIDAZIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_LIQUIDAZIONECommand(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			string whereSql = "IDOBJ_LIQUIDAZIONE = " + _db.CreateSqlParameterName("IDOBJ_LIQUIDAZIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_LIQUIDAZIONE", iDOBJ_LIQUIDAZIONE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTLIQUIDAZIONE_COMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key of the object</param>
		/// <returns>Object of type GVCTLIQUIDAZIONE_COMPENSI</returns>
		public virtual GVCTLIQUIDAZIONE_COMPENSI[] GetByIDOBJ_PROCEDURA(System.Int32 iDOBJ_PROCEDURA)
		{
			return MapRecords(CreateGetByIDOBJ_PROCEDURACommand(iDOBJ_PROCEDURA));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTLIQUIDAZIONE_COMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_PROCEDURAAsDataTable(System.Int32 iDOBJ_PROCEDURA)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_PROCEDURACommand(iDOBJ_PROCEDURA));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_PROCEDURACommand(System.Int32 iDOBJ_PROCEDURA)
		{
			string whereSql = "IDOBJ_PROCEDURA = " + _db.CreateSqlParameterName("IDOBJ_PROCEDURA");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_PROCEDURA", iDOBJ_PROCEDURA);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_PROCEDURA(System.Int32 iDOBJ_PROCEDURA)
		{
			return CreateDeleteByIDOBJ_PROCEDURACommand(iDOBJ_PROCEDURA).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_PROCEDURACommand(System.Int32 iDOBJ_PROCEDURA)
		{
			string whereSql = "IDOBJ_PROCEDURA = " + _db.CreateSqlParameterName("IDOBJ_PROCEDURA");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_PROCEDURA", iDOBJ_PROCEDURA);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTLIQUIDAZIONE_COMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REVISIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTLIQUIDAZIONE_COMPENSI</returns>
		public virtual GVCTLIQUIDAZIONE_COMPENSI[] GetByIDOBJ_REVISIONE(System.Int32 iDOBJ_REVISIONE)
		{
			return MapRecords(CreateGetByIDOBJ_REVISIONECommand(iDOBJ_REVISIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTLIQUIDAZIONE_COMPENSI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REVISIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_REVISIONEAsDataTable(System.Int32 iDOBJ_REVISIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_REVISIONECommand(iDOBJ_REVISIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_REVISIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_REVISIONECommand(System.Int32 iDOBJ_REVISIONE)
		{
			string whereSql = "IDOBJ_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_REVISIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_REVISIONE", iDOBJ_REVISIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="iDOBJ_REVISIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_REVISIONE(System.Int32 iDOBJ_REVISIONE)
		{
			return CreateDeleteByIDOBJ_REVISIONECommand(iDOBJ_REVISIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="iDOBJ_REVISIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_REVISIONECommand(System.Int32 iDOBJ_REVISIONE)
		{
			string whereSql = "IDOBJ_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_REVISIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_REVISIONE", iDOBJ_REVISIONE);
			return cmd;
		}

		/// <summary>
		/// Inserts in the Database an object GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="valore">The object to insert</param>
		public virtual void Insert(GVCTLIQUIDAZIONE_COMPENSI valore)
		{
			System.Int32 id = -1;
			System.String sqlStr;

			sqlStr = "SELECT GVCTLIQUIDAZIONE_COMPENSI_SEQ.NEXTVAL FROM DUAL";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				id = Convert.ToInt32(cmd.ExecuteScalar());
			}

			sqlStr = "INSERT INTO GVCTLIQUIDAZIONE_COMPENSI (" +
			"IDOBJ, " +
			"DATA_DOMANDA, " +
			"PERCENTUALE_CONTRIBUTO, " +
			"VALUTA, " +
			"IMPORTO_DETERMINATO, " +
			"IMPORTO_RICHIESTO, " +
			"IMPORTO_CONTRIBUTO, " +
			"IMPORTO_SPESE, " +
			"TIPO_CONTRIBUTO, " +
			"NUMERO_DETERMINA, " +
			"DATA_DETERMINA, " +
			"LIQUIDATO, " +
			"NUMERO_MANDATO, " +
			"DATA_MANDATO, " +
			"NOTE, " +
			"OPERATOREULTMOD, " +
			"DATAORAULTMOD, " +
			"IDOBJ_LIQUIDAZIONE, " +
			"IDOBJ_PROCEDURA, " +
			"IDOBJ_REVISIONE) " +
			"VALUES (" + id.ToString() + ", " +
			_db.CreateSqlParameterName("DATA_DOMANDA") + ", " +
			_db.CreateSqlParameterName("PERCENTUALE_CONTRIBUTO") + ", " +
			_db.CreateSqlParameterName("VALUTA") + ", " +
			_db.CreateSqlParameterName("IMPORTO_DETERMINATO") + ", " +
			_db.CreateSqlParameterName("IMPORTO_RICHIESTO") + ", " +
			_db.CreateSqlParameterName("IMPORTO_CONTRIBUTO") + ", " +
			_db.CreateSqlParameterName("IMPORTO_SPESE") + ", " +
			_db.CreateSqlParameterName("TIPO_CONTRIBUTO") + ", " +
			_db.CreateSqlParameterName("NUMERO_DETERMINA") + ", " +
			_db.CreateSqlParameterName("DATA_DETERMINA") + ", " +
			_db.CreateSqlParameterName("LIQUIDATO") + ", " +
			_db.CreateSqlParameterName("NUMERO_MANDATO") + ", " +
			_db.CreateSqlParameterName("DATA_MANDATO") + ", " +
			_db.CreateSqlParameterName("NOTE") + ", " +
			_db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
			_db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
			_db.CreateSqlParameterName("IDOBJ_LIQUIDAZIONE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_PROCEDURA") + ", " +
			_db.CreateSqlParameterName("IDOBJ_REVISIONE") + ")";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "DATA_DOMANDA", valore.IsDATA_DOMANDANull ? DBNull.Value : (object)valore.DATA_DOMANDA);
				AddParameter(cmd, "PERCENTUALE_CONTRIBUTO", valore.IsPERCENTUALE_CONTRIBUTONull ? DBNull.Value : (object)valore.PERCENTUALE_CONTRIBUTO);
				AddParameter(cmd, "VALUTA", valore.IsVALUTANull ? DBNull.Value : (object)valore.VALUTA);
				AddParameter(cmd, "IMPORTO_DETERMINATO", valore.IsIMPORTO_DETERMINATONull ? DBNull.Value : (object)valore.IMPORTO_DETERMINATO);
				AddParameter(cmd, "IMPORTO_RICHIESTO", valore.IsIMPORTO_RICHIESTONull ? DBNull.Value : (object)valore.IMPORTO_RICHIESTO);
				AddParameter(cmd, "IMPORTO_CONTRIBUTO", valore.IsIMPORTO_CONTRIBUTONull ? DBNull.Value : (object)valore.IMPORTO_CONTRIBUTO);
				AddParameter(cmd, "IMPORTO_SPESE", valore.IsIMPORTO_SPESENull ? DBNull.Value : (object)valore.IMPORTO_SPESE);
				AddParameter(cmd, "TIPO_CONTRIBUTO", valore.IsTIPO_CONTRIBUTONull ? DBNull.Value : (object)valore.TIPO_CONTRIBUTO);
				AddParameter(cmd, "NUMERO_DETERMINA", valore.IsNUMERO_DETERMINANull ? DBNull.Value : (object)valore.NUMERO_DETERMINA);
				AddParameter(cmd, "DATA_DETERMINA", valore.IsDATA_DETERMINANull ? DBNull.Value : (object)valore.DATA_DETERMINA);
				AddParameter(cmd, "LIQUIDATO", valore.IsLIQUIDATONull ? DBNull.Value : (object)valore.LIQUIDATO);
				AddParameter(cmd, "NUMERO_MANDATO", valore.IsNUMERO_MANDATONull ? DBNull.Value : (object)valore.NUMERO_MANDATO);
				AddParameter(cmd, "DATA_MANDATO", valore.IsDATA_MANDATONull ? DBNull.Value : (object)valore.DATA_MANDATO);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_LIQUIDAZIONE", valore.IsIDOBJ_LIQUIDAZIONENull ? DBNull.Value : (object)valore.IDOBJ_LIQUIDAZIONE);
				AddParameter(cmd, "IDOBJ_PROCEDURA", valore.IsIDOBJ_PROCEDURANull ? DBNull.Value : (object)valore.IDOBJ_PROCEDURA);
				AddParameter(cmd, "IDOBJ_REVISIONE", valore.IsIDOBJ_REVISIONENull ? DBNull.Value : (object)valore.IDOBJ_REVISIONE);
				cmd.ExecuteScalar();
				valore.IDOBJ = id;
			}
		}

		/// <summary>
		/// Updates in the Database an object GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="valore">The object to update</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool Update(GVCTLIQUIDAZIONE_COMPENSI valore)
		{
			System.String sqlStr = "UPDATE GVCTLIQUIDAZIONE_COMPENSI SET " +
				"DATA_DOMANDA = " + _db.CreateSqlParameterName("DATA_DOMANDA") + ", " +
				"PERCENTUALE_CONTRIBUTO = " + _db.CreateSqlParameterName("PERCENTUALE_CONTRIBUTO") + ", " +
				"VALUTA = " + _db.CreateSqlParameterName("VALUTA") + ", " +
				"IMPORTO_DETERMINATO = " + _db.CreateSqlParameterName("IMPORTO_DETERMINATO") + ", " +
				"IMPORTO_RICHIESTO = " + _db.CreateSqlParameterName("IMPORTO_RICHIESTO") + ", " +
				"IMPORTO_CONTRIBUTO = " + _db.CreateSqlParameterName("IMPORTO_CONTRIBUTO") + ", " +
				"IMPORTO_SPESE = " + _db.CreateSqlParameterName("IMPORTO_SPESE") + ", " +
				"TIPO_CONTRIBUTO = " + _db.CreateSqlParameterName("TIPO_CONTRIBUTO") + ", " +
				"NUMERO_DETERMINA = " + _db.CreateSqlParameterName("NUMERO_DETERMINA") + ", " +
				"DATA_DETERMINA = " + _db.CreateSqlParameterName("DATA_DETERMINA") + ", " +
				"LIQUIDATO = " + _db.CreateSqlParameterName("LIQUIDATO") + ", " +
				"NUMERO_MANDATO = " + _db.CreateSqlParameterName("NUMERO_MANDATO") + ", " +
				"DATA_MANDATO = " + _db.CreateSqlParameterName("DATA_MANDATO") + ", " +
				"NOTE = " + _db.CreateSqlParameterName("NOTE") + ", " +
				"OPERATOREULTMOD = " + _db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
				"DATAORAULTMOD = " + _db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
				"IDOBJ_LIQUIDAZIONE = " + _db.CreateSqlParameterName("IDOBJ_LIQUIDAZIONE") + ", " +
				"IDOBJ_PROCEDURA = " + _db.CreateSqlParameterName("IDOBJ_PROCEDURA") + ", " +
				"IDOBJ_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_REVISIONE") +
				" WHERE " +
				"IDOBJ = " + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ", valore.IDOBJ);
				AddParameter(cmd, "DATA_DOMANDA", valore.IsDATA_DOMANDANull ? DBNull.Value : (object)valore.DATA_DOMANDA);
				AddParameter(cmd, "PERCENTUALE_CONTRIBUTO", valore.IsPERCENTUALE_CONTRIBUTONull ? DBNull.Value : (object)valore.PERCENTUALE_CONTRIBUTO);
				AddParameter(cmd, "VALUTA", valore.IsVALUTANull ? DBNull.Value : (object)valore.VALUTA);
				AddParameter(cmd, "IMPORTO_DETERMINATO", valore.IsIMPORTO_DETERMINATONull ? DBNull.Value : (object)valore.IMPORTO_DETERMINATO);
				AddParameter(cmd, "IMPORTO_RICHIESTO", valore.IsIMPORTO_RICHIESTONull ? DBNull.Value : (object)valore.IMPORTO_RICHIESTO);
				AddParameter(cmd, "IMPORTO_CONTRIBUTO", valore.IsIMPORTO_CONTRIBUTONull ? DBNull.Value : (object)valore.IMPORTO_CONTRIBUTO);
				AddParameter(cmd, "IMPORTO_SPESE", valore.IsIMPORTO_SPESENull ? DBNull.Value : (object)valore.IMPORTO_SPESE);
				AddParameter(cmd, "TIPO_CONTRIBUTO", valore.IsTIPO_CONTRIBUTONull ? DBNull.Value : (object)valore.TIPO_CONTRIBUTO);
				AddParameter(cmd, "NUMERO_DETERMINA", valore.IsNUMERO_DETERMINANull ? DBNull.Value : (object)valore.NUMERO_DETERMINA);
				AddParameter(cmd, "DATA_DETERMINA", valore.IsDATA_DETERMINANull ? DBNull.Value : (object)valore.DATA_DETERMINA);
				AddParameter(cmd, "LIQUIDATO", valore.IsLIQUIDATONull ? DBNull.Value : (object)valore.LIQUIDATO);
				AddParameter(cmd, "NUMERO_MANDATO", valore.IsNUMERO_MANDATONull ? DBNull.Value : (object)valore.NUMERO_MANDATO);
				AddParameter(cmd, "DATA_MANDATO", valore.IsDATA_MANDATONull ? DBNull.Value : (object)valore.DATA_MANDATO);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_LIQUIDAZIONE", valore.IsIDOBJ_LIQUIDAZIONENull ? DBNull.Value : (object)valore.IDOBJ_LIQUIDAZIONE);
				AddParameter(cmd, "IDOBJ_PROCEDURA", valore.IsIDOBJ_PROCEDURANull ? DBNull.Value : (object)valore.IDOBJ_PROCEDURA);
				AddParameter(cmd, "IDOBJ_REVISIONE", valore.IsIDOBJ_REVISIONENull ? DBNull.Value : (object)valore.IDOBJ_REVISIONE);
				return cmd.ExecuteNonQuery() != 0;
			}
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTLIQUIDAZIONE_COMPENSI</param>
		public void Update(DataTable table)
		{
			Update(table, true);
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTLIQUIDAZIONE_COMPENSI</param>
		/// <param name="acceptChanges">true to accept the changes, otherwise false</param>
		public virtual void Update(DataTable table, bool acceptChanges)
		{
			DataRowCollection rows = table.Rows;
			for(int i = rows.Count - 1; i >= 0; i--)
			{
				DataRow row = rows[i];
				switch(row.RowState)
				{
					case DataRowState.Added:
						Insert(MapRow(row));
						if(acceptChanges)
							row.AcceptChanges();
						break;

					case DataRowState.Deleted:
						row.RejectChanges();
						try
						{
							DeleteByPrimaryKey((System.Int32)row["IDOBJ"]);
						}
						finally
						{
							row.Delete();
						}
						if(acceptChanges)
							row.AcceptChanges();
						break;

				case DataRowState.Modified:
					Update(MapRow(row));
					if(acceptChanges)
						row.AcceptChanges();
					break;
				}
			}
		}

		/// <summary>
		/// Deletes from the Database an object GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="valore">The object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public bool Delete(GVCTLIQUIDAZIONE_COMPENSI valore)
		{
			return DeleteByPrimaryKey(valore.IDOBJ);
		}

		/// <summary>
		/// Deletes from the Database an object GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="iDOBJ">The primary key of the object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool DeleteByPrimaryKey(System.Int32 iDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateDeleteCommand(whereSql))
			{
				AddParameter(cmd, "IDOBJ" , iDOBJ);
				return cmd.ExecuteNonQuery() > 0;
			}
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTLIQUIDAZIONE_COMPENSI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>The number of the deleted objects</returns>
		public int Delete(System.String whereSql)
		{
			return CreateDeleteCommand(whereSql).ExecuteNonQuery();
		}

		/// <summary>
		/// Returns an IDbCommand to delete the objects GVCTLIQUIDAZIONE_COMPENSI selected by 
		/// a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteCommand(string whereSql)
		{
			StringBuilder sql = new StringBuilder("DELETE FROM GVCTLIQUIDAZIONE_COMPENSI");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format(" WHERE {0}", whereSql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Deletes all the objects GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteAll()
		{
			return Delete("");
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCTLIQUIDAZIONE_COMPENSI</returns>
		protected GVCTLIQUIDAZIONE_COMPENSI[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCTLIQUIDAZIONE_COMPENSI</returns>
		protected GVCTLIQUIDAZIONE_COMPENSI[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCTLIQUIDAZIONE_COMPENSI</returns>
		protected virtual GVCTLIQUIDAZIONE_COMPENSI[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int iDOBJColumnIndex = reader.GetOrdinal("IDOBJ");
			int dATA_DOMANDAColumnIndex = reader.GetOrdinal("DATA_DOMANDA");
			int pERCENTUALE_CONTRIBUTOColumnIndex = reader.GetOrdinal("PERCENTUALE_CONTRIBUTO");
			int vALUTAColumnIndex = reader.GetOrdinal("VALUTA");
			int iMPORTO_DETERMINATOColumnIndex = reader.GetOrdinal("IMPORTO_DETERMINATO");
			int iMPORTO_RICHIESTOColumnIndex = reader.GetOrdinal("IMPORTO_RICHIESTO");
			int iMPORTO_CONTRIBUTOColumnIndex = reader.GetOrdinal("IMPORTO_CONTRIBUTO");
			int iMPORTO_SPESEColumnIndex = reader.GetOrdinal("IMPORTO_SPESE");
			int tIPO_CONTRIBUTOColumnIndex = reader.GetOrdinal("TIPO_CONTRIBUTO");
			int nUMERO_DETERMINAColumnIndex = reader.GetOrdinal("NUMERO_DETERMINA");
			int dATA_DETERMINAColumnIndex = reader.GetOrdinal("DATA_DETERMINA");
			int lIQUIDATOColumnIndex = reader.GetOrdinal("LIQUIDATO");
			int nUMERO_MANDATOColumnIndex = reader.GetOrdinal("NUMERO_MANDATO");
			int dATA_MANDATOColumnIndex = reader.GetOrdinal("DATA_MANDATO");
			int nOTEColumnIndex = reader.GetOrdinal("NOTE");
			int oPERATOREULTMODColumnIndex = reader.GetOrdinal("OPERATOREULTMOD");
			int dATAORAULTMODColumnIndex = reader.GetOrdinal("DATAORAULTMOD");
			int iDOBJ_LIQUIDAZIONEColumnIndex = reader.GetOrdinal("IDOBJ_LIQUIDAZIONE");
			int iDOBJ_PROCEDURAColumnIndex = reader.GetOrdinal("IDOBJ_PROCEDURA");
			int iDOBJ_REVISIONEColumnIndex = reader.GetOrdinal("IDOBJ_REVISIONE");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCTLIQUIDAZIONE_COMPENSI record = new GVCTLIQUIDAZIONE_COMPENSI();
					recordList.Add(record);
					record.IDOBJ = Convert.ToInt32(reader.GetValue(iDOBJColumnIndex));
					if(!reader.IsDBNull(dATA_DOMANDAColumnIndex))
						record.DATA_DOMANDA = Convert.ToDateTime(reader.GetValue(dATA_DOMANDAColumnIndex));
					if(!reader.IsDBNull(pERCENTUALE_CONTRIBUTOColumnIndex))
						record.PERCENTUALE_CONTRIBUTO = Convert.ToDouble(reader.GetValue(pERCENTUALE_CONTRIBUTOColumnIndex));
					if(!reader.IsDBNull(vALUTAColumnIndex))
						record.VALUTA = Convert.ToInt32(reader.GetValue(vALUTAColumnIndex));
					if(!reader.IsDBNull(iMPORTO_DETERMINATOColumnIndex))
						record.IMPORTO_DETERMINATO = Convert.ToDouble(reader.GetValue(iMPORTO_DETERMINATOColumnIndex));
					if(!reader.IsDBNull(iMPORTO_RICHIESTOColumnIndex))
						record.IMPORTO_RICHIESTO = Convert.ToDouble(reader.GetValue(iMPORTO_RICHIESTOColumnIndex));
					if(!reader.IsDBNull(iMPORTO_CONTRIBUTOColumnIndex))
						record.IMPORTO_CONTRIBUTO = Convert.ToDouble(reader.GetValue(iMPORTO_CONTRIBUTOColumnIndex));
					if(!reader.IsDBNull(iMPORTO_SPESEColumnIndex))
						record.IMPORTO_SPESE = Convert.ToDouble(reader.GetValue(iMPORTO_SPESEColumnIndex));
					if(!reader.IsDBNull(tIPO_CONTRIBUTOColumnIndex))
						record.TIPO_CONTRIBUTO = Convert.ToInt32(reader.GetValue(tIPO_CONTRIBUTOColumnIndex));
					if(!reader.IsDBNull(nUMERO_DETERMINAColumnIndex))
						record.NUMERO_DETERMINA = Convert.ToString(reader.GetValue(nUMERO_DETERMINAColumnIndex));
					if(!reader.IsDBNull(dATA_DETERMINAColumnIndex))
						record.DATA_DETERMINA = Convert.ToDateTime(reader.GetValue(dATA_DETERMINAColumnIndex));
					if(!reader.IsDBNull(lIQUIDATOColumnIndex))
						record.LIQUIDATO = Convert.ToInt32(reader.GetValue(lIQUIDATOColumnIndex));
					if(!reader.IsDBNull(nUMERO_MANDATOColumnIndex))
						record.NUMERO_MANDATO = Convert.ToString(reader.GetValue(nUMERO_MANDATOColumnIndex));
					if(!reader.IsDBNull(dATA_MANDATOColumnIndex))
						record.DATA_MANDATO = Convert.ToDateTime(reader.GetValue(dATA_MANDATOColumnIndex));
					if(!reader.IsDBNull(nOTEColumnIndex))
						record.NOTE = Convert.ToString(reader.GetValue(nOTEColumnIndex));
					if(!reader.IsDBNull(oPERATOREULTMODColumnIndex))
						record.OPERATOREULTMOD = Convert.ToString(reader.GetValue(oPERATOREULTMODColumnIndex));
					if(!reader.IsDBNull(dATAORAULTMODColumnIndex))
						record.DATAORAULTMOD = Convert.ToDateTime(reader.GetValue(dATAORAULTMODColumnIndex));
					if(!reader.IsDBNull(iDOBJ_LIQUIDAZIONEColumnIndex))
						record.IDOBJ_LIQUIDAZIONE = Convert.ToInt32(reader.GetValue(iDOBJ_LIQUIDAZIONEColumnIndex));
					if(!reader.IsDBNull(iDOBJ_PROCEDURAColumnIndex))
						record.IDOBJ_PROCEDURA = Convert.ToInt32(reader.GetValue(iDOBJ_PROCEDURAColumnIndex));
					if(!reader.IsDBNull(iDOBJ_REVISIONEColumnIndex))
						record.IDOBJ_REVISIONE = Convert.ToInt32(reader.GetValue(iDOBJ_REVISIONEColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCTLIQUIDAZIONE_COMPENSI[])(recordList.ToArray(typeof(GVCTLIQUIDAZIONE_COMPENSI)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCTLIQUIDAZIONE_COMPENSI</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCTLIQUIDAZIONE_COMPENSI</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTLIQUIDAZIONE_COMPENSI</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCTLIQUIDAZIONE_COMPENSI</returns>
		protected virtual GVCTLIQUIDAZIONE_COMPENSI MapRow(DataRow row)
		{
			GVCTLIQUIDAZIONE_COMPENSI mappedObject = new GVCTLIQUIDAZIONE_COMPENSI();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "IDOBJ"
			dataColumn = dataTable.Columns["IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ = (System.Int32)row[dataColumn];
			//Campo "DATA_DOMANDA"
			dataColumn = dataTable.Columns["DATA_DOMANDA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_DOMANDA = (System.DateTime)row[dataColumn];
			//Campo "PERCENTUALE_CONTRIBUTO"
			dataColumn = dataTable.Columns["PERCENTUALE_CONTRIBUTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.PERCENTUALE_CONTRIBUTO = (System.Double)row[dataColumn];
			//Campo "VALUTA"
			dataColumn = dataTable.Columns["VALUTA"];
			if(!row.IsNull(dataColumn))
				mappedObject.VALUTA = (System.Int32)row[dataColumn];
			//Campo "IMPORTO_DETERMINATO"
			dataColumn = dataTable.Columns["IMPORTO_DETERMINATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IMPORTO_DETERMINATO = (System.Double)row[dataColumn];
			//Campo "IMPORTO_RICHIESTO"
			dataColumn = dataTable.Columns["IMPORTO_RICHIESTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IMPORTO_RICHIESTO = (System.Double)row[dataColumn];
			//Campo "IMPORTO_CONTRIBUTO"
			dataColumn = dataTable.Columns["IMPORTO_CONTRIBUTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IMPORTO_CONTRIBUTO = (System.Double)row[dataColumn];
			//Campo "IMPORTO_SPESE"
			dataColumn = dataTable.Columns["IMPORTO_SPESE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IMPORTO_SPESE = (System.Double)row[dataColumn];
			//Campo "TIPO_CONTRIBUTO"
			dataColumn = dataTable.Columns["TIPO_CONTRIBUTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.TIPO_CONTRIBUTO = (System.Int32)row[dataColumn];
			//Campo "NUMERO_DETERMINA"
			dataColumn = dataTable.Columns["NUMERO_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_DETERMINA = (System.String)row[dataColumn];
			//Campo "DATA_DETERMINA"
			dataColumn = dataTable.Columns["DATA_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_DETERMINA = (System.DateTime)row[dataColumn];
			//Campo "LIQUIDATO"
			dataColumn = dataTable.Columns["LIQUIDATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQUIDATO = (System.Int32)row[dataColumn];
			//Campo "NUMERO_MANDATO"
			dataColumn = dataTable.Columns["NUMERO_MANDATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_MANDATO = (System.String)row[dataColumn];
			//Campo "DATA_MANDATO"
			dataColumn = dataTable.Columns["DATA_MANDATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_MANDATO = (System.DateTime)row[dataColumn];
			//Campo "NOTE"
			dataColumn = dataTable.Columns["NOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.NOTE = (System.String)row[dataColumn];
			//Campo "OPERATOREULTMOD"
			dataColumn = dataTable.Columns["OPERATOREULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.OPERATOREULTMOD = (System.String)row[dataColumn];
			//Campo "DATAORAULTMOD"
			dataColumn = dataTable.Columns["DATAORAULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORAULTMOD = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_LIQUIDAZIONE"
			dataColumn = dataTable.Columns["IDOBJ_LIQUIDAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_LIQUIDAZIONE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_PROCEDURA"
			dataColumn = dataTable.Columns["IDOBJ_PROCEDURA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_PROCEDURA = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_REVISIONE"
			dataColumn = dataTable.Columns["IDOBJ_REVISIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_REVISIONE = (System.Int32)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCTLIQUIDAZIONE_COMPENSI
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCTLIQUIDAZIONE_COMPENSI";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = true;
			dataColumn.Unique = true;
			dataColumn.AutoIncrement = true;
			dataColumn = dataTable.Columns.Add("DATA_DOMANDA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("PERCENTUALE_CONTRIBUTO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("VALUTA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IMPORTO_DETERMINATO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IMPORTO_RICHIESTO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IMPORTO_CONTRIBUTO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IMPORTO_SPESE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("TIPO_CONTRIBUTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_DETERMINA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_DETERMINA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQUIDATO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_MANDATO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_MANDATO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NOTE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("OPERATOREULTMOD", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORAULTMOD", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_LIQUIDAZIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_PROCEDURA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_REVISIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_DOMANDA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "PERCENTUALE_CONTRIBUTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "VALUTA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IMPORTO_DETERMINATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "IMPORTO_RICHIESTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "IMPORTO_CONTRIBUTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "IMPORTO_SPESE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "TIPO_CONTRIBUTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "NUMERO_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "LIQUIDATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "NUMERO_MANDATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_MANDATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "OPERATOREULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORAULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_LIQUIDAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_PROCEDURA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_REVISIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
