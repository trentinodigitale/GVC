//
//Generated by gvc at 15/06/2010 16.39.56
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCVRICERCACOOPAVANZATA
	/// </summary>
	public partial class GVCVRICERCACOOPAVANZATACollection
	{
		/// <summary>
		/// Returns the Database Name of the field S_IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string S_IDOBJColumnName = "S_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field S_IDOBJ_TIPO_SOGGETTO.
		/// </summary>
		public const string S_IDOBJ_TIPO_SOGGETTOColumnName = "S_IDOBJ_TIPO_SOGGETTO";
		/// <summary>
		/// Returns the Database Name of the field S_FLAG_ASSOCIAZIONE.
		///The field is mandatory.
		/// </summary>
		public const string S_FLAG_ASSOCIAZIONEColumnName = "S_FLAG_ASSOCIAZIONE";
		/// <summary>
		/// Returns the Database Name of the field S_DENOMINAZIONE.
		/// </summary>
		public const string S_DENOMINAZIONEColumnName = "S_DENOMINAZIONE";
		/// <summary>
		/// Returns the Database Name of the field S_CODICE_FISCALE.
		/// </summary>
		public const string S_CODICE_FISCALEColumnName = "S_CODICE_FISCALE";
		/// <summary>
		/// Returns the Database Name of the field IND_COMUNE.
		/// </summary>
		public const string IND_COMUNEColumnName = "IND_COMUNE";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ.
		/// </summary>
		public const string R_IDOBJColumnName = "R_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field R_NUMERO_REA.
		/// </summary>
		public const string R_NUMERO_REAColumnName = "R_NUMERO_REA";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ_STATO.
		/// </summary>
		public const string R_IDOBJ_STATOColumnName = "R_IDOBJ_STATO";
		/// <summary>
		/// Returns the Database Name of the field R_DATA_COSTITUZIONE.
		/// </summary>
		public const string R_DATA_COSTITUZIONEColumnName = "R_DATA_COSTITUZIONE";
		/// <summary>
		/// Returns the Database Name of the field R_BILANCIO_ESERCIZIO_AL.
		/// </summary>
		public const string R_BILANCIO_ESERCIZIO_ALColumnName = "R_BILANCIO_ESERCIZIO_AL";
		/// <summary>
		/// Returns the Database Name of the field R_NUMERO_SCIOGLIMENTO.
		/// </summary>
		public const string R_NUMERO_SCIOGLIMENTOColumnName = "R_NUMERO_SCIOGLIMENTO";
		/// <summary>
		/// Returns the Database Name of the field R_ESENTE_VERSAMENTO_UTILI.
		/// </summary>
		public const string R_ESENTE_VERSAMENTO_UTILIColumnName = "R_ESENTE_VERSAMENTO_UTILI";
		/// <summary>
		/// Returns the Database Name of the field R_GRUPPO_PARITETICO.
		/// </summary>
		public const string R_GRUPPO_PARITETICOColumnName = "R_GRUPPO_PARITETICO";
		/// <summary>
		/// Returns the Database Name of the field R_CODICE_OPERATORE.
		/// </summary>
		public const string R_CODICE_OPERATOREColumnName = "R_CODICE_OPERATORE";
		/// <summary>
		/// Returns the Database Name of the field R_CODICE_UFFICIO.
		/// </summary>
		public const string R_CODICE_UFFICIOColumnName = "R_CODICE_UFFICIO";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ_TIPO_COSTITUZIONE.
		/// </summary>
		public const string R_IDOBJ_TIPO_COSTITUZIONEColumnName = "R_IDOBJ_TIPO_COSTITUZIONE";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ_FORMA_GIURIDICA.
		/// </summary>
		public const string R_IDOBJ_FORMA_GIURIDICAColumnName = "R_IDOBJ_FORMA_GIURIDICA";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ_CADENZA_REVISIONE.
		/// </summary>
		public const string R_IDOBJ_CADENZA_REVISIONEColumnName = "R_IDOBJ_CADENZA_REVISIONE";
		/// <summary>
		/// Returns the Database Name of the field ATT_FLAG_CCIAA.
		/// </summary>
		public const string ATT_FLAG_CCIAAColumnName = "ATT_FLAG_CCIAA";
		/// <summary>
		/// Returns the Database Name of the field ATT_IDOBJ_TPIO_ATT.
		/// </summary>
		public const string ATT_IDOBJ_TPIO_ATTColumnName = "ATT_IDOBJ_TPIO_ATT";
		/// <summary>
		/// Returns the Database Name of the field ADESIONE_ASSOCIAZIONE.
		/// </summary>
		public const string ADESIONE_ASSOCIAZIONEColumnName = "ADESIONE_ASSOCIAZIONE";
		/// <summary>
		/// Returns the Database Name of the field ISCRIZIONE.
		/// </summary>
		public const string ISCRIZIONEColumnName = "ISCRIZIONE";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCVRICERCACOOPAVANZATACollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCVRICERCACOOPAVANZATA
		/// </summary>
		/// <returns>Array of objects GVCVRICERCACOOPAVANZATA</returns>
		public virtual GVCVRICERCACOOPAVANZATA[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCVRICERCACOOPAVANZATA
		/// </summary>
		/// <returns>DataTable of objects GVCVRICERCACOOPAVANZATA</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCVRICERCACOOPAVANZATA
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCVRICERCACOOPAVANZATA selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCVRICERCACOOPAVANZATA</returns>
		public GVCVRICERCACOOPAVANZATA GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCVRICERCACOOPAVANZATA[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCVRICERCACOOPAVANZATA selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCVRICERCACOOPAVANZATA</returns>
		public GVCVRICERCACOOPAVANZATA[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCVRICERCACOOPAVANZATA selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCVRICERCACOOPAVANZATA</returns>
		public virtual GVCVRICERCACOOPAVANZATA[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCACOOPAVANZATA selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCVRICERCACOOPAVANZATA</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCACOOPAVANZATA selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCACOOPAVANZATA</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCVRICERCACOOPAVANZATA selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("S_IDOBJ, ");
			sql.Append("S_IDOBJ_TIPO_SOGGETTO, ");
			sql.Append("S_FLAG_ASSOCIAZIONE, ");
			sql.Append("S_DENOMINAZIONE, ");
			sql.Append("S_CODICE_FISCALE, ");
			sql.Append("IND_COMUNE, ");
			sql.Append("R_IDOBJ, ");
			sql.Append("R_NUMERO_REA, ");
			sql.Append("R_IDOBJ_STATO, ");
			sql.Append("R_DATA_COSTITUZIONE, ");
			sql.Append("R_BILANCIO_ESERCIZIO_AL, ");
			sql.Append("R_NUMERO_SCIOGLIMENTO, ");
			sql.Append("R_ESENTE_VERSAMENTO_UTILI, ");
			sql.Append("R_GRUPPO_PARITETICO, ");
			sql.Append("R_CODICE_OPERATORE, ");
			sql.Append("R_CODICE_UFFICIO, ");
			sql.Append("R_IDOBJ_TIPO_COSTITUZIONE, ");
			sql.Append("R_IDOBJ_FORMA_GIURIDICA, ");
			sql.Append("R_IDOBJ_CADENZA_REVISIONE, ");
			sql.Append("ATT_FLAG_CCIAA, ");
			sql.Append("ATT_IDOBJ_TPIO_ATT, ");
			sql.Append("ADESIONE_ASSOCIAZIONE, ");
			sql.Append("ISCRIZIONE ");
			sql.Append("FROM GVCVRICERCACOOPAVANZATA ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}


		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCACOOPAVANZATA
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCVRICERCACOOPAVANZATA</returns>
		protected GVCVRICERCACOOPAVANZATA[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCACOOPAVANZATA
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCVRICERCACOOPAVANZATA</returns>
		protected GVCVRICERCACOOPAVANZATA[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCVRICERCACOOPAVANZATA
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCVRICERCACOOPAVANZATA</returns>
		protected virtual GVCVRICERCACOOPAVANZATA[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int s_IDOBJColumnIndex = reader.GetOrdinal("S_IDOBJ");
			int s_IDOBJ_TIPO_SOGGETTOColumnIndex = reader.GetOrdinal("S_IDOBJ_TIPO_SOGGETTO");
			int s_FLAG_ASSOCIAZIONEColumnIndex = reader.GetOrdinal("S_FLAG_ASSOCIAZIONE");
			int s_DENOMINAZIONEColumnIndex = reader.GetOrdinal("S_DENOMINAZIONE");
			int s_CODICE_FISCALEColumnIndex = reader.GetOrdinal("S_CODICE_FISCALE");
			int iND_COMUNEColumnIndex = reader.GetOrdinal("IND_COMUNE");
			int r_IDOBJColumnIndex = reader.GetOrdinal("R_IDOBJ");
			int r_NUMERO_REAColumnIndex = reader.GetOrdinal("R_NUMERO_REA");
			int r_IDOBJ_STATOColumnIndex = reader.GetOrdinal("R_IDOBJ_STATO");
			int r_DATA_COSTITUZIONEColumnIndex = reader.GetOrdinal("R_DATA_COSTITUZIONE");
			int r_BILANCIO_ESERCIZIO_ALColumnIndex = reader.GetOrdinal("R_BILANCIO_ESERCIZIO_AL");
			int r_NUMERO_SCIOGLIMENTOColumnIndex = reader.GetOrdinal("R_NUMERO_SCIOGLIMENTO");
			int r_ESENTE_VERSAMENTO_UTILIColumnIndex = reader.GetOrdinal("R_ESENTE_VERSAMENTO_UTILI");
			int r_GRUPPO_PARITETICOColumnIndex = reader.GetOrdinal("R_GRUPPO_PARITETICO");
			int r_CODICE_OPERATOREColumnIndex = reader.GetOrdinal("R_CODICE_OPERATORE");
			int r_CODICE_UFFICIOColumnIndex = reader.GetOrdinal("R_CODICE_UFFICIO");
			int r_IDOBJ_TIPO_COSTITUZIONEColumnIndex = reader.GetOrdinal("R_IDOBJ_TIPO_COSTITUZIONE");
			int r_IDOBJ_FORMA_GIURIDICAColumnIndex = reader.GetOrdinal("R_IDOBJ_FORMA_GIURIDICA");
			int r_IDOBJ_CADENZA_REVISIONEColumnIndex = reader.GetOrdinal("R_IDOBJ_CADENZA_REVISIONE");
			int aTT_FLAG_CCIAAColumnIndex = reader.GetOrdinal("ATT_FLAG_CCIAA");
			int aTT_IDOBJ_TPIO_ATTColumnIndex = reader.GetOrdinal("ATT_IDOBJ_TPIO_ATT");
			int aDESIONE_ASSOCIAZIONEColumnIndex = reader.GetOrdinal("ADESIONE_ASSOCIAZIONE");
			int iSCRIZIONEColumnIndex = reader.GetOrdinal("ISCRIZIONE");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCVRICERCACOOPAVANZATA record = new GVCVRICERCACOOPAVANZATA();
					recordList.Add(record);
					record.S_IDOBJ = Convert.ToInt32(reader.GetValue(s_IDOBJColumnIndex));
					if(!reader.IsDBNull(s_IDOBJ_TIPO_SOGGETTOColumnIndex))
						record.S_IDOBJ_TIPO_SOGGETTO = Convert.ToInt32(reader.GetValue(s_IDOBJ_TIPO_SOGGETTOColumnIndex));
					record.S_FLAG_ASSOCIAZIONE = Convert.ToInt32(reader.GetValue(s_FLAG_ASSOCIAZIONEColumnIndex));
					if(!reader.IsDBNull(s_DENOMINAZIONEColumnIndex))
						record.S_DENOMINAZIONE = Convert.ToString(reader.GetValue(s_DENOMINAZIONEColumnIndex));
					if(!reader.IsDBNull(s_CODICE_FISCALEColumnIndex))
						record.S_CODICE_FISCALE = Convert.ToString(reader.GetValue(s_CODICE_FISCALEColumnIndex));
					if(!reader.IsDBNull(iND_COMUNEColumnIndex))
						record.IND_COMUNE = Convert.ToString(reader.GetValue(iND_COMUNEColumnIndex));
					if(!reader.IsDBNull(r_IDOBJColumnIndex))
						record.R_IDOBJ = Convert.ToInt32(reader.GetValue(r_IDOBJColumnIndex));
					if(!reader.IsDBNull(r_NUMERO_REAColumnIndex))
						record.R_NUMERO_REA = Convert.ToString(reader.GetValue(r_NUMERO_REAColumnIndex));
					if(!reader.IsDBNull(r_IDOBJ_STATOColumnIndex))
						record.R_IDOBJ_STATO = Convert.ToInt32(reader.GetValue(r_IDOBJ_STATOColumnIndex));
					if(!reader.IsDBNull(r_DATA_COSTITUZIONEColumnIndex))
						record.R_DATA_COSTITUZIONE = Convert.ToDateTime(reader.GetValue(r_DATA_COSTITUZIONEColumnIndex));
					if(!reader.IsDBNull(r_BILANCIO_ESERCIZIO_ALColumnIndex))
						record.R_BILANCIO_ESERCIZIO_AL = Convert.ToString(reader.GetValue(r_BILANCIO_ESERCIZIO_ALColumnIndex));
					if(!reader.IsDBNull(r_NUMERO_SCIOGLIMENTOColumnIndex))
						record.R_NUMERO_SCIOGLIMENTO = Convert.ToInt32(reader.GetValue(r_NUMERO_SCIOGLIMENTOColumnIndex));
					if(!reader.IsDBNull(r_ESENTE_VERSAMENTO_UTILIColumnIndex))
						record.R_ESENTE_VERSAMENTO_UTILI = Convert.ToInt32(reader.GetValue(r_ESENTE_VERSAMENTO_UTILIColumnIndex));
					if(!reader.IsDBNull(r_GRUPPO_PARITETICOColumnIndex))
						record.R_GRUPPO_PARITETICO = Convert.ToInt32(reader.GetValue(r_GRUPPO_PARITETICOColumnIndex));
					if(!reader.IsDBNull(r_CODICE_OPERATOREColumnIndex))
						record.R_CODICE_OPERATORE = Convert.ToString(reader.GetValue(r_CODICE_OPERATOREColumnIndex));
					if(!reader.IsDBNull(r_CODICE_UFFICIOColumnIndex))
						record.R_CODICE_UFFICIO = Convert.ToString(reader.GetValue(r_CODICE_UFFICIOColumnIndex));
					if(!reader.IsDBNull(r_IDOBJ_TIPO_COSTITUZIONEColumnIndex))
						record.R_IDOBJ_TIPO_COSTITUZIONE = Convert.ToInt32(reader.GetValue(r_IDOBJ_TIPO_COSTITUZIONEColumnIndex));
					if(!reader.IsDBNull(r_IDOBJ_FORMA_GIURIDICAColumnIndex))
						record.R_IDOBJ_FORMA_GIURIDICA = Convert.ToInt32(reader.GetValue(r_IDOBJ_FORMA_GIURIDICAColumnIndex));
					if(!reader.IsDBNull(r_IDOBJ_CADENZA_REVISIONEColumnIndex))
						record.R_IDOBJ_CADENZA_REVISIONE = Convert.ToInt32(reader.GetValue(r_IDOBJ_CADENZA_REVISIONEColumnIndex));
					if(!reader.IsDBNull(aTT_FLAG_CCIAAColumnIndex))
						record.ATT_FLAG_CCIAA = Convert.ToInt32(reader.GetValue(aTT_FLAG_CCIAAColumnIndex));
					if(!reader.IsDBNull(aTT_IDOBJ_TPIO_ATTColumnIndex))
						record.ATT_IDOBJ_TPIO_ATT = Convert.ToInt32(reader.GetValue(aTT_IDOBJ_TPIO_ATTColumnIndex));
					if(!reader.IsDBNull(aDESIONE_ASSOCIAZIONEColumnIndex))
						record.ADESIONE_ASSOCIAZIONE = Convert.ToString(reader.GetValue(aDESIONE_ASSOCIAZIONEColumnIndex));
					if(!reader.IsDBNull(iSCRIZIONEColumnIndex))
						record.ISCRIZIONE = Convert.ToString(reader.GetValue(iSCRIZIONEColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCVRICERCACOOPAVANZATA[])(recordList.ToArray(typeof(GVCVRICERCACOOPAVANZATA)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCVRICERCACOOPAVANZATA</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCVRICERCACOOPAVANZATA</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCACOOPAVANZATA</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCVRICERCACOOPAVANZATA
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCVRICERCACOOPAVANZATA</returns>
		protected virtual GVCVRICERCACOOPAVANZATA MapRow(DataRow row)
		{
			GVCVRICERCACOOPAVANZATA mappedObject = new GVCVRICERCACOOPAVANZATA();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "S_IDOBJ"
			dataColumn = dataTable.Columns["S_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "S_IDOBJ_TIPO_SOGGETTO"
			dataColumn = dataTable.Columns["S_IDOBJ_TIPO_SOGGETTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_IDOBJ_TIPO_SOGGETTO = (System.Int32)row[dataColumn];
			//Campo "S_FLAG_ASSOCIAZIONE"
			dataColumn = dataTable.Columns["S_FLAG_ASSOCIAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_FLAG_ASSOCIAZIONE = (System.Int32)row[dataColumn];
			//Campo "S_DENOMINAZIONE"
			dataColumn = dataTable.Columns["S_DENOMINAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_DENOMINAZIONE = (System.String)row[dataColumn];
			//Campo "S_CODICE_FISCALE"
			dataColumn = dataTable.Columns["S_CODICE_FISCALE"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_CODICE_FISCALE = (System.String)row[dataColumn];
			//Campo "IND_COMUNE"
			dataColumn = dataTable.Columns["IND_COMUNE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IND_COMUNE = (System.String)row[dataColumn];
			//Campo "R_IDOBJ"
			dataColumn = dataTable.Columns["R_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "R_NUMERO_REA"
			dataColumn = dataTable.Columns["R_NUMERO_REA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_NUMERO_REA = (System.String)row[dataColumn];
			//Campo "R_IDOBJ_STATO"
			dataColumn = dataTable.Columns["R_IDOBJ_STATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ_STATO = (System.Int32)row[dataColumn];
			//Campo "R_DATA_COSTITUZIONE"
			dataColumn = dataTable.Columns["R_DATA_COSTITUZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_DATA_COSTITUZIONE = (System.DateTime)row[dataColumn];
			//Campo "R_BILANCIO_ESERCIZIO_AL"
			dataColumn = dataTable.Columns["R_BILANCIO_ESERCIZIO_AL"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_BILANCIO_ESERCIZIO_AL = (System.String)row[dataColumn];
			//Campo "R_NUMERO_SCIOGLIMENTO"
			dataColumn = dataTable.Columns["R_NUMERO_SCIOGLIMENTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_NUMERO_SCIOGLIMENTO = (System.Int32)row[dataColumn];
			//Campo "R_ESENTE_VERSAMENTO_UTILI"
			dataColumn = dataTable.Columns["R_ESENTE_VERSAMENTO_UTILI"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_ESENTE_VERSAMENTO_UTILI = (System.Int32)row[dataColumn];
			//Campo "R_GRUPPO_PARITETICO"
			dataColumn = dataTable.Columns["R_GRUPPO_PARITETICO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_GRUPPO_PARITETICO = (System.Int32)row[dataColumn];
			//Campo "R_CODICE_OPERATORE"
			dataColumn = dataTable.Columns["R_CODICE_OPERATORE"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_CODICE_OPERATORE = (System.String)row[dataColumn];
			//Campo "R_CODICE_UFFICIO"
			dataColumn = dataTable.Columns["R_CODICE_UFFICIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_CODICE_UFFICIO = (System.String)row[dataColumn];
			//Campo "R_IDOBJ_TIPO_COSTITUZIONE"
			dataColumn = dataTable.Columns["R_IDOBJ_TIPO_COSTITUZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ_TIPO_COSTITUZIONE = (System.Int32)row[dataColumn];
			//Campo "R_IDOBJ_FORMA_GIURIDICA"
			dataColumn = dataTable.Columns["R_IDOBJ_FORMA_GIURIDICA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ_FORMA_GIURIDICA = (System.Int32)row[dataColumn];
			//Campo "R_IDOBJ_CADENZA_REVISIONE"
			dataColumn = dataTable.Columns["R_IDOBJ_CADENZA_REVISIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ_CADENZA_REVISIONE = (System.Int32)row[dataColumn];
			//Campo "ATT_FLAG_CCIAA"
			dataColumn = dataTable.Columns["ATT_FLAG_CCIAA"];
			if(!row.IsNull(dataColumn))
				mappedObject.ATT_FLAG_CCIAA = (System.Int32)row[dataColumn];
			//Campo "ATT_IDOBJ_TPIO_ATT"
			dataColumn = dataTable.Columns["ATT_IDOBJ_TPIO_ATT"];
			if(!row.IsNull(dataColumn))
				mappedObject.ATT_IDOBJ_TPIO_ATT = (System.Int32)row[dataColumn];
			//Campo "ADESIONE_ASSOCIAZIONE"
			dataColumn = dataTable.Columns["ADESIONE_ASSOCIAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.ADESIONE_ASSOCIAZIONE = (System.String)row[dataColumn];
			//Campo "ISCRIZIONE"
			dataColumn = dataTable.Columns["ISCRIZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.ISCRIZIONE = (System.String)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCVRICERCACOOPAVANZATA
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCVRICERCACOOPAVANZATA";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("S_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("S_IDOBJ_TIPO_SOGGETTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("S_FLAG_ASSOCIAZIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("S_DENOMINAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("S_CODICE_FISCALE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IND_COMUNE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_NUMERO_REA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ_STATO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_DATA_COSTITUZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_BILANCIO_ESERCIZIO_AL", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_NUMERO_SCIOGLIMENTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_ESENTE_VERSAMENTO_UTILI", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_GRUPPO_PARITETICO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_CODICE_OPERATORE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_CODICE_UFFICIO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ_TIPO_COSTITUZIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ_FORMA_GIURIDICA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ_CADENZA_REVISIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ATT_FLAG_CCIAA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ATT_IDOBJ_TPIO_ATT", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ADESIONE_ASSOCIAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ISCRIZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "S_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "S_IDOBJ_TIPO_SOGGETTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "S_FLAG_ASSOCIAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "S_DENOMINAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "S_CODICE_FISCALE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "IND_COMUNE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_NUMERO_REA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_IDOBJ_STATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_DATA_COSTITUZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "R_BILANCIO_ESERCIZIO_AL":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_NUMERO_SCIOGLIMENTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_ESENTE_VERSAMENTO_UTILI":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_GRUPPO_PARITETICO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_CODICE_OPERATORE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_CODICE_UFFICIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_IDOBJ_TIPO_COSTITUZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_IDOBJ_FORMA_GIURIDICA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_IDOBJ_CADENZA_REVISIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "ATT_FLAG_CCIAA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "ATT_IDOBJ_TPIO_ATT":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "ADESIONE_ASSOCIAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "ISCRIZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
