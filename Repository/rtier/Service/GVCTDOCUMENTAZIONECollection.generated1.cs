//
//Generated by gvc at 26/03/2009 9.03.13
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCTDOCUMENTAZIONE
	/// </summary>
	public partial class GVCTDOCUMENTAZIONECollection
	{
		/// <summary>
		/// Returns the Database Name of the field IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJColumnName = "IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field DATA_DOCUMENTO.
		///The field is mandatory.
		/// </summary>
		public const string DATA_DOCUMENTOColumnName = "DATA_DOCUMENTO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_TIPO_DOCUMENTO.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_TIPO_DOCUMENTOColumnName = "IDOBJ_TIPO_DOCUMENTO";
		/// <summary>
		/// Returns the Database Name of the field SEGNALIBRO.
		/// </summary>
		public const string SEGNALIBROColumnName = "SEGNALIBRO";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_PROTOCOLLO.
		/// </summary>
		public const string NUMERO_PROTOCOLLOColumnName = "NUMERO_PROTOCOLLO";
		/// <summary>
		/// Returns the Database Name of the field DATA_PROTOCOLLO.
		/// </summary>
		public const string DATA_PROTOCOLLOColumnName = "DATA_PROTOCOLLO";
		/// <summary>
		/// Returns the Database Name of the field TESTO.
		/// </summary>
		public const string TESTOColumnName = "TESTO";
		/// <summary>
		/// Returns the Database Name of the field NOTE.
		/// </summary>
		public const string NOTEColumnName = "NOTE";
		/// <summary>
		/// Returns the Database Name of the field OPERATOREULTMOD.
		/// </summary>
		public const string OPERATOREULTMODColumnName = "OPERATOREULTMOD";
		/// <summary>
		/// Returns the Database Name of the field DATAORAULTMOD.
		/// </summary>
		public const string DATAORAULTMODColumnName = "DATAORAULTMOD";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_ADESIONE.
		/// </summary>
		public const string IDOBJ_ADESIONEColumnName = "IDOBJ_ADESIONE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_REGISTRO.
		/// </summary>
		public const string IDOBJ_REGISTROColumnName = "IDOBJ_REGISTRO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_LIQUIDAZIONE.
		/// </summary>
		public const string IDOBJ_LIQUIDAZIONEColumnName = "IDOBJ_LIQUIDAZIONE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_REVISIONE.
		/// </summary>
		public const string IDOBJ_REVISIONEColumnName = "IDOBJ_REVISIONE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_ASSEMBLEA.
		/// </summary>
		public const string IDOBJ_ASSEMBLEAColumnName = "IDOBJ_ASSEMBLEA";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_BASE_SOCIALE.
		/// </summary>
		public const string IDOBJ_BASE_SOCIALEColumnName = "IDOBJ_BASE_SOCIALE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_BILANCIO.
		/// </summary>
		public const string IDOBJ_BILANCIOColumnName = "IDOBJ_BILANCIO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_CARICHE.
		/// </summary>
		public const string IDOBJ_CARICHEColumnName = "IDOBJ_CARICHE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_FALLIMENTO.
		/// </summary>
		public const string IDOBJ_FALLIMENTOColumnName = "IDOBJ_FALLIMENTO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_PROCEDURA.
		/// </summary>
		public const string IDOBJ_PROCEDURAColumnName = "IDOBJ_PROCEDURA";
        /// <summary>
        /// Returns the Database Name of the field NOME_FILE.
        /// </summary>
        public const string NOME_FILEColumnName = "NOME_FILE";
        /// <summary>
        /// Returns the Database Name of the field IDOBJ_PROCEDURA.
        /// </summary>
        public const string IDOBJ_SANZIONEColumnName = "IDOBJ_SANZIONE";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCTDOCUMENTAZIONECollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <returns>Array of objects GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <returns>DataTable of objects GVCTDOCUMENTAZIONE</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCTDOCUMENTAZIONE selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
		public GVCTDOCUMENTAZIONE GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCTDOCUMENTAZIONE[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCTDOCUMENTAZIONE selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCTDOCUMENTAZIONE</returns>
		public GVCTDOCUMENTAZIONE[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCTDOCUMENTAZIONE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTDOCUMENTAZIONE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCTDOCUMENTAZIONE</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTDOCUMENTAZIONE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTDOCUMENTAZIONE</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCTDOCUMENTAZIONE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("IDOBJ, ");
			sql.Append("DATA_DOCUMENTO, ");
			sql.Append("IDOBJ_TIPO_DOCUMENTO, ");
			sql.Append("SEGNALIBRO, ");
			sql.Append("NUMERO_PROTOCOLLO, ");
			sql.Append("DATA_PROTOCOLLO, ");
			sql.Append("TESTO, ");
			sql.Append("NOTE, ");
			sql.Append("OPERATOREULTMOD, ");
			sql.Append("DATAORAULTMOD, ");
			sql.Append("IDOBJ_ADESIONE, ");
			sql.Append("IDOBJ_REGISTRO, ");
			sql.Append("IDOBJ_LIQUIDAZIONE, ");
			sql.Append("IDOBJ_REVISIONE, ");
			sql.Append("IDOBJ_ASSEMBLEA, ");
			sql.Append("IDOBJ_BASE_SOCIALE, ");
			sql.Append("IDOBJ_BILANCIO, ");
			sql.Append("IDOBJ_CARICHE, ");
			sql.Append("IDOBJ_FALLIMENTO, ");
            sql.Append("IDOBJ_PROCEDURA, ");
            sql.Append("IDOBJ_SANZIONE, ");
            sql.Append("NOME_FILE ");
			sql.Append("FROM GVCTDOCUMENTAZIONE ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Returns an object GVCTDOCUMENTAZIONE selected by a primary key
		/// </summary>
		/// <param name="IDOBJ">The primary key of the object</param>
		/// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE GetByPrimaryKey(System.Int32 IDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateGetCommand(whereSql, null))
			{
				AddParameter(cmd, "IDOBJ", IDOBJ);
				GVCTDOCUMENTAZIONE[] tempArray = MapRecords(cmd);
				return tempArray.Length == 0 ? null : tempArray[0];
			}
		}


		/// <summary>
		/// Returns an object GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_DOCUMENTO">The foreign key of the object</param>
		/// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE[] GetByIDOBJ_TIPO_DOCUMENTO(System.Int32 iDOBJ_TIPO_DOCUMENTO)
		{
			return MapRecords(CreateGetByIDOBJ_TIPO_DOCUMENTOCommand(iDOBJ_TIPO_DOCUMENTO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_DOCUMENTO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_TIPO_DOCUMENTOAsDataTable(System.Int32 iDOBJ_TIPO_DOCUMENTO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_TIPO_DOCUMENTOCommand(iDOBJ_TIPO_DOCUMENTO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_DOCUMENTO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_TIPO_DOCUMENTOCommand(System.Int32 iDOBJ_TIPO_DOCUMENTO)
		{
			string whereSql = "IDOBJ_TIPO_DOCUMENTO = " + _db.CreateSqlParameterName("IDOBJ_TIPO_DOCUMENTO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_TIPO_DOCUMENTO", iDOBJ_TIPO_DOCUMENTO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_TIPO_DOCUMENTO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_TIPO_DOCUMENTO(System.Int32 iDOBJ_TIPO_DOCUMENTO)
		{
			return CreateDeleteByIDOBJ_TIPO_DOCUMENTOCommand(iDOBJ_TIPO_DOCUMENTO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_TIPO_DOCUMENTO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_TIPO_DOCUMENTOCommand(System.Int32 iDOBJ_TIPO_DOCUMENTO)
		{
			string whereSql = "IDOBJ_TIPO_DOCUMENTO = " + _db.CreateSqlParameterName("IDOBJ_TIPO_DOCUMENTO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_TIPO_DOCUMENTO", iDOBJ_TIPO_DOCUMENTO);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_ADESIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE[] GetByIDOBJ_ADESIONE(System.Int32 iDOBJ_ADESIONE)
		{
			return MapRecords(CreateGetByIDOBJ_ADESIONECommand(iDOBJ_ADESIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_ADESIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_ADESIONEAsDataTable(System.Int32 iDOBJ_ADESIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_ADESIONECommand(iDOBJ_ADESIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_ADESIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_ADESIONECommand(System.Int32 iDOBJ_ADESIONE)
		{
			string whereSql = "IDOBJ_ADESIONE = " + _db.CreateSqlParameterName("IDOBJ_ADESIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_ADESIONE", iDOBJ_ADESIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_ADESIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_ADESIONE(System.Int32 iDOBJ_ADESIONE)
		{
			return CreateDeleteByIDOBJ_ADESIONECommand(iDOBJ_ADESIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_ADESIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_ADESIONECommand(System.Int32 iDOBJ_ADESIONE)
		{
			string whereSql = "IDOBJ_ADESIONE = " + _db.CreateSqlParameterName("IDOBJ_ADESIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_ADESIONE", iDOBJ_ADESIONE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_BILANCIO">The foreign key of the object</param>
		/// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE[] GetByIDOBJ_BILANCIO(System.Int32 iDOBJ_BILANCIO)
		{
			return MapRecords(CreateGetByIDOBJ_BILANCIOCommand(iDOBJ_BILANCIO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_BILANCIO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_BILANCIOAsDataTable(System.Int32 iDOBJ_BILANCIO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_BILANCIOCommand(iDOBJ_BILANCIO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_BILANCIO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_BILANCIOCommand(System.Int32 iDOBJ_BILANCIO)
		{
			string whereSql = "IDOBJ_BILANCIO = " + _db.CreateSqlParameterName("IDOBJ_BILANCIO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_BILANCIO", iDOBJ_BILANCIO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_BILANCIO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_BILANCIO(System.Int32 iDOBJ_BILANCIO)
		{
			return CreateDeleteByIDOBJ_BILANCIOCommand(iDOBJ_BILANCIO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_BILANCIO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_BILANCIOCommand(System.Int32 iDOBJ_BILANCIO)
		{
			string whereSql = "IDOBJ_BILANCIO = " + _db.CreateSqlParameterName("IDOBJ_BILANCIO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_BILANCIO", iDOBJ_BILANCIO);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_BASE_SOCIALE">The foreign key of the object</param>
		/// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE[] GetByIDOBJ_BASE_SOCIALE(System.Int32 iDOBJ_BASE_SOCIALE)
		{
			return MapRecords(CreateGetByIDOBJ_BASE_SOCIALECommand(iDOBJ_BASE_SOCIALE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_BASE_SOCIALE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_BASE_SOCIALEAsDataTable(System.Int32 iDOBJ_BASE_SOCIALE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_BASE_SOCIALECommand(iDOBJ_BASE_SOCIALE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_BASE_SOCIALE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_BASE_SOCIALECommand(System.Int32 iDOBJ_BASE_SOCIALE)
		{
			string whereSql = "IDOBJ_BASE_SOCIALE = " + _db.CreateSqlParameterName("IDOBJ_BASE_SOCIALE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_BASE_SOCIALE", iDOBJ_BASE_SOCIALE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_BASE_SOCIALE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_BASE_SOCIALE(System.Int32 iDOBJ_BASE_SOCIALE)
		{
			return CreateDeleteByIDOBJ_BASE_SOCIALECommand(iDOBJ_BASE_SOCIALE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_BASE_SOCIALE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_BASE_SOCIALECommand(System.Int32 iDOBJ_BASE_SOCIALE)
		{
			string whereSql = "IDOBJ_BASE_SOCIALE = " + _db.CreateSqlParameterName("IDOBJ_BASE_SOCIALE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_BASE_SOCIALE", iDOBJ_BASE_SOCIALE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_CARICHE">The foreign key of the object</param>
		/// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE[] GetByIDOBJ_CARICHE(System.Int32 iDOBJ_CARICHE)
		{
			return MapRecords(CreateGetByIDOBJ_CARICHECommand(iDOBJ_CARICHE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_CARICHE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_CARICHEAsDataTable(System.Int32 iDOBJ_CARICHE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_CARICHECommand(iDOBJ_CARICHE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_CARICHE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_CARICHECommand(System.Int32 iDOBJ_CARICHE)
		{
			string whereSql = "IDOBJ_CARICHE = " + _db.CreateSqlParameterName("IDOBJ_CARICHE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_CARICHE", iDOBJ_CARICHE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_CARICHE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_CARICHE(System.Int32 iDOBJ_CARICHE)
		{
			return CreateDeleteByIDOBJ_CARICHECommand(iDOBJ_CARICHE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_CARICHE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_CARICHECommand(System.Int32 iDOBJ_CARICHE)
		{
			string whereSql = "IDOBJ_CARICHE = " + _db.CreateSqlParameterName("IDOBJ_CARICHE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_CARICHE", iDOBJ_CARICHE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_ASSEMBLEA">The foreign key of the object</param>
		/// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE[] GetByIDOBJ_ASSEMBLEA(System.Int32 iDOBJ_ASSEMBLEA)
		{
			return MapRecords(CreateGetByIDOBJ_ASSEMBLEACommand(iDOBJ_ASSEMBLEA));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_ASSEMBLEA">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_ASSEMBLEAAsDataTable(System.Int32 iDOBJ_ASSEMBLEA)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_ASSEMBLEACommand(iDOBJ_ASSEMBLEA));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_ASSEMBLEA">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_ASSEMBLEACommand(System.Int32 iDOBJ_ASSEMBLEA)
		{
			string whereSql = "IDOBJ_ASSEMBLEA = " + _db.CreateSqlParameterName("IDOBJ_ASSEMBLEA");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_ASSEMBLEA", iDOBJ_ASSEMBLEA);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_ASSEMBLEA">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_ASSEMBLEA(System.Int32 iDOBJ_ASSEMBLEA)
		{
			return CreateDeleteByIDOBJ_ASSEMBLEACommand(iDOBJ_ASSEMBLEA).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_ASSEMBLEA">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_ASSEMBLEACommand(System.Int32 iDOBJ_ASSEMBLEA)
		{
			string whereSql = "IDOBJ_ASSEMBLEA = " + _db.CreateSqlParameterName("IDOBJ_ASSEMBLEA");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_ASSEMBLEA", iDOBJ_ASSEMBLEA);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_FALLIMENTO">The foreign key of the object</param>
		/// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE[] GetByIDOBJ_FALLIMENTO(System.Int32 iDOBJ_FALLIMENTO)
		{
			return MapRecords(CreateGetByIDOBJ_FALLIMENTOCommand(iDOBJ_FALLIMENTO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_FALLIMENTO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_FALLIMENTOAsDataTable(System.Int32 iDOBJ_FALLIMENTO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_FALLIMENTOCommand(iDOBJ_FALLIMENTO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_FALLIMENTO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_FALLIMENTOCommand(System.Int32 iDOBJ_FALLIMENTO)
		{
			string whereSql = "IDOBJ_FALLIMENTO = " + _db.CreateSqlParameterName("IDOBJ_FALLIMENTO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_FALLIMENTO", iDOBJ_FALLIMENTO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_FALLIMENTO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_FALLIMENTO(System.Int32 iDOBJ_FALLIMENTO)
		{
			return CreateDeleteByIDOBJ_FALLIMENTOCommand(iDOBJ_FALLIMENTO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_FALLIMENTO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_FALLIMENTOCommand(System.Int32 iDOBJ_FALLIMENTO)
		{
			string whereSql = "IDOBJ_FALLIMENTO = " + _db.CreateSqlParameterName("IDOBJ_FALLIMENTO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_FALLIMENTO", iDOBJ_FALLIMENTO);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE[] GetByIDOBJ_LIQUIDAZIONE(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			return MapRecords(CreateGetByIDOBJ_LIQUIDAZIONECommand(iDOBJ_LIQUIDAZIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_LIQUIDAZIONEAsDataTable(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_LIQUIDAZIONECommand(iDOBJ_LIQUIDAZIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_LIQUIDAZIONECommand(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			string whereSql = "IDOBJ_LIQUIDAZIONE = " + _db.CreateSqlParameterName("IDOBJ_LIQUIDAZIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_LIQUIDAZIONE", iDOBJ_LIQUIDAZIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_LIQUIDAZIONE(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			return CreateDeleteByIDOBJ_LIQUIDAZIONECommand(iDOBJ_LIQUIDAZIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_LIQUIDAZIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_LIQUIDAZIONECommand(System.Int32 iDOBJ_LIQUIDAZIONE)
		{
			string whereSql = "IDOBJ_LIQUIDAZIONE = " + _db.CreateSqlParameterName("IDOBJ_LIQUIDAZIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_LIQUIDAZIONE", iDOBJ_LIQUIDAZIONE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key of the object</param>
		/// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE[] GetByIDOBJ_PROCEDURA(System.Int32 iDOBJ_PROCEDURA)
		{
			return MapRecords(CreateGetByIDOBJ_PROCEDURACommand(iDOBJ_PROCEDURA));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_PROCEDURAAsDataTable(System.Int32 iDOBJ_PROCEDURA)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_PROCEDURACommand(iDOBJ_PROCEDURA));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_PROCEDURACommand(System.Int32 iDOBJ_PROCEDURA)
		{
			string whereSql = "IDOBJ_PROCEDURA = " + _db.CreateSqlParameterName("IDOBJ_PROCEDURA");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_PROCEDURA", iDOBJ_PROCEDURA);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_PROCEDURA(System.Int32 iDOBJ_PROCEDURA)
		{
			return CreateDeleteByIDOBJ_PROCEDURACommand(iDOBJ_PROCEDURA).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_PROCEDURA">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_PROCEDURACommand(System.Int32 iDOBJ_PROCEDURA)
		{
			string whereSql = "IDOBJ_PROCEDURA = " + _db.CreateSqlParameterName("IDOBJ_PROCEDURA");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_PROCEDURA", iDOBJ_PROCEDURA);
			return cmd;
		}

        /// <summary>
        /// Returns an object GVCTDOCUMENTAZIONE selected by a foreign key
        /// </summary>
        /// <param name="iDOBJ_SANZIONE">The foreign key of the object</param>
        /// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
        public virtual GVCTDOCUMENTAZIONE[] GetByIDOBJ_SANZIONE(System.Int32 iDOBJ_SANZIONE)
        {
            return MapRecords(CreateGetByIDOBJ_PROCEDURACommand(iDOBJ_SANZIONE));
        }

        /// <summary>
        /// Returns a DataTable of objects GVCTDOCUMENTAZIONE selected by a foreign key
        /// </summary>
        /// <param name="iDOBJ_SANZIONE">The foreign key of the object</param>
        /// <returns>A DataTable</returns>
        public virtual DataTable GetByIDOBJ_SANZIONEAsDataTable(System.Int32 iDOBJ_SANZIONE)
        {
            return MapRecordsToDataTable(CreateGetByIDOBJ_SANZIONECommand(iDOBJ_SANZIONE));
        }

        /// <summary>
        /// Returns an IdbCommand with the selected foreign key
        /// </summary>
        /// <param name="iDOBJ_SANZIONE">The foreign key</param>
        /// <returns>An IDbCommand</returns>
        protected virtual IDbCommand CreateGetByIDOBJ_SANZIONECommand(System.Int32 iDOBJ_SANZIONE)
        {
            string whereSql = "IDOBJ_SANZIONE = " + _db.CreateSqlParameterName("IDOBJ_SANZIONE");
            IDbCommand cmd = CreateGetCommand(whereSql, null);
            AddParameter(cmd, "IDOBJ_SANZIONE", iDOBJ_SANZIONE);
            return cmd;
        }

        /// <summary>
        /// Deletes from the Database the objects GVCTDOCUMENTAZIONE
        /// </summary>
        /// <param name="iDOBJ_SANZIONE">The foreign key</param>
        /// <returns>The number of the deleted objects</returns>
        public int DeleteByIDOBJ_SANZIONE(System.Int32 iDOBJ_SANZIONE)
        {
            return CreateDeleteByIDOBJ_SANZIONECommand(iDOBJ_SANZIONE).ExecuteNonQuery();
        }

        /// <summary>
        /// Creates the IDbCommand for the deletion from the Database of the objects GVCTDOCUMENTAZIONE
        /// </summary>
        /// <param name="iDOBJ_PROCEDURA">The foreign key</param>
        /// <returns>The IDbCommand</returns>
        protected virtual IDbCommand CreateDeleteByIDOBJ_SANZIONECommand(System.Int32 iDOBJ_SANZIONE)
        {
            string whereSql = "IDOBJ_SANZIONE = " + _db.CreateSqlParameterName("IDOBJ_SANZIONE");
            IDbCommand cmd = CreateDeleteCommand(whereSql);
            AddParameter(cmd, "IDOBJ_SANZIONE", iDOBJ_SANZIONE);
            return cmd;
        }
        
		/// <summary>
		/// Returns an object GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key of the object</param>
		/// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE[] GetByIDOBJ_REGISTRO(System.Int32 iDOBJ_REGISTRO)
		{
			return MapRecords(CreateGetByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_REGISTROAsDataTable(System.Int32 iDOBJ_REGISTRO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_REGISTROCommand(System.Int32 iDOBJ_REGISTRO)
		{
			string whereSql = "IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_REGISTRO", iDOBJ_REGISTRO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_REGISTRO(System.Int32 iDOBJ_REGISTRO)
		{
			return CreateDeleteByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_REGISTROCommand(System.Int32 iDOBJ_REGISTRO)
		{
			string whereSql = "IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_REGISTRO", iDOBJ_REGISTRO);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REVISIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTDOCUMENTAZIONE</returns>
		public virtual GVCTDOCUMENTAZIONE[] GetByIDOBJ_REVISIONE(System.Int32 iDOBJ_REVISIONE)
		{
			return MapRecords(CreateGetByIDOBJ_REVISIONECommand(iDOBJ_REVISIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTDOCUMENTAZIONE selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REVISIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_REVISIONEAsDataTable(System.Int32 iDOBJ_REVISIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_REVISIONECommand(iDOBJ_REVISIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_REVISIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_REVISIONECommand(System.Int32 iDOBJ_REVISIONE)
		{
			string whereSql = "IDOBJ_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_REVISIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_REVISIONE", iDOBJ_REVISIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_REVISIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_REVISIONE(System.Int32 iDOBJ_REVISIONE)
		{
			return CreateDeleteByIDOBJ_REVISIONECommand(iDOBJ_REVISIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ_REVISIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_REVISIONECommand(System.Int32 iDOBJ_REVISIONE)
		{
			string whereSql = "IDOBJ_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_REVISIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_REVISIONE", iDOBJ_REVISIONE);
			return cmd;
		}

		/// <summary>
		/// Inserts in the Database an object GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="valore">The object to insert</param>
		public virtual void Insert(GVCTDOCUMENTAZIONE valore)
		{
			System.Int32 id = -1;
			System.String sqlStr;

			sqlStr = "SELECT GVCTDOCUMENTAZIONE_SEQ.NEXTVAL FROM DUAL";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				id = Convert.ToInt32(cmd.ExecuteScalar());
			}

			sqlStr = "INSERT INTO GVCTDOCUMENTAZIONE (" +
			"IDOBJ, " +
			"DATA_DOCUMENTO, " +
			"IDOBJ_TIPO_DOCUMENTO, " +
			"SEGNALIBRO, " +
			"NUMERO_PROTOCOLLO, " +
			"DATA_PROTOCOLLO, " +
			"TESTO, " +
			"NOTE, " +
			"OPERATOREULTMOD, " +
			"DATAORAULTMOD, " +
			"IDOBJ_ADESIONE, " +
			"IDOBJ_REGISTRO, " +
			"IDOBJ_LIQUIDAZIONE, " +
			"IDOBJ_REVISIONE, " +
			"IDOBJ_ASSEMBLEA, " +
			"IDOBJ_BASE_SOCIALE, " +
			"IDOBJ_BILANCIO, " +
			"IDOBJ_CARICHE, " +
			"IDOBJ_FALLIMENTO, " +
            "IDOBJ_PROCEDURA, " +
            "IDOBJ_SANZIONE, " +
            "NOME_FILE) " +
			"VALUES (" + id.ToString() + ", " +
			_db.CreateSqlParameterName("DATA_DOCUMENTO") + ", " +
			_db.CreateSqlParameterName("IDOBJ_TIPO_DOCUMENTO") + ", " +
			_db.CreateSqlParameterName("SEGNALIBRO") + ", " +
			_db.CreateSqlParameterName("NUMERO_PROTOCOLLO") + ", " +
			_db.CreateSqlParameterName("DATA_PROTOCOLLO") + ", " +
			_db.CreateSqlParameterName("TESTO") + ", " +
			_db.CreateSqlParameterName("NOTE") + ", " +
			_db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
			_db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
			_db.CreateSqlParameterName("IDOBJ_ADESIONE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_REGISTRO") + ", " +
			_db.CreateSqlParameterName("IDOBJ_LIQUIDAZIONE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_REVISIONE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_ASSEMBLEA") + ", " +
			_db.CreateSqlParameterName("IDOBJ_BASE_SOCIALE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_BILANCIO") + ", " +
			_db.CreateSqlParameterName("IDOBJ_CARICHE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_FALLIMENTO") + ", " +
            _db.CreateSqlParameterName("IDOBJ_PROCEDURA") + ", " +
            _db.CreateSqlParameterName("IDOBJ_SANZIONE") + ", " +
            _db.CreateSqlParameterName("NOME_FILE") + ")";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "DATA_DOCUMENTO", valore.DATA_DOCUMENTO);
				AddParameter(cmd, "IDOBJ_TIPO_DOCUMENTO", valore.IDOBJ_TIPO_DOCUMENTO);
				AddParameter(cmd, "SEGNALIBRO", valore.IsSEGNALIBRONull ? DBNull.Value : (object)valore.SEGNALIBRO);
				AddParameter(cmd, "NUMERO_PROTOCOLLO", valore.IsNUMERO_PROTOCOLLONull ? DBNull.Value : (object)valore.NUMERO_PROTOCOLLO);
				AddParameter(cmd, "DATA_PROTOCOLLO", valore.IsDATA_PROTOCOLLONull ? DBNull.Value : (object)valore.DATA_PROTOCOLLO);
				AddParameter(cmd, "TESTO", valore.IsTESTONull ? DBNull.Value : (object)valore.TESTO);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_ADESIONE", valore.IsIDOBJ_ADESIONENull ? DBNull.Value : (object)valore.IDOBJ_ADESIONE);
				AddParameter(cmd, "IDOBJ_REGISTRO", valore.IsIDOBJ_REGISTRONull ? DBNull.Value : (object)valore.IDOBJ_REGISTRO);
				AddParameter(cmd, "IDOBJ_LIQUIDAZIONE", valore.IsIDOBJ_LIQUIDAZIONENull ? DBNull.Value : (object)valore.IDOBJ_LIQUIDAZIONE);
				AddParameter(cmd, "IDOBJ_REVISIONE", valore.IsIDOBJ_REVISIONENull ? DBNull.Value : (object)valore.IDOBJ_REVISIONE);
				AddParameter(cmd, "IDOBJ_ASSEMBLEA", valore.IsIDOBJ_ASSEMBLEANull ? DBNull.Value : (object)valore.IDOBJ_ASSEMBLEA);
				AddParameter(cmd, "IDOBJ_BASE_SOCIALE", valore.IsIDOBJ_BASE_SOCIALENull ? DBNull.Value : (object)valore.IDOBJ_BASE_SOCIALE);
				AddParameter(cmd, "IDOBJ_BILANCIO", valore.IsIDOBJ_BILANCIONull ? DBNull.Value : (object)valore.IDOBJ_BILANCIO);
				AddParameter(cmd, "IDOBJ_CARICHE", valore.IsIDOBJ_CARICHENull ? DBNull.Value : (object)valore.IDOBJ_CARICHE);
				AddParameter(cmd, "IDOBJ_FALLIMENTO", valore.IsIDOBJ_FALLIMENTONull ? DBNull.Value : (object)valore.IDOBJ_FALLIMENTO);
                AddParameter(cmd, "IDOBJ_PROCEDURA", valore.IsIDOBJ_PROCEDURANull ? DBNull.Value : (object)valore.IDOBJ_PROCEDURA);
                AddParameter(cmd, "IDOBJ_SANZIONE", valore.IsIDOBJ_SANZIONENull ? DBNull.Value : (object)valore.IDOBJ_SANZIONE);
                AddParameter(cmd, "NOME_FILE", valore.IsNOME_FILENull ? DBNull.Value : (object)valore.NOME_FILE);
				cmd.ExecuteScalar();
				valore.IDOBJ = id;
			}
		}

		/// <summary>
		/// Updates in the Database an object GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="valore">The object to update</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool Update(GVCTDOCUMENTAZIONE valore)
		{
			System.String sqlStr = "UPDATE GVCTDOCUMENTAZIONE SET " +
				"DATA_DOCUMENTO = " + _db.CreateSqlParameterName("DATA_DOCUMENTO") + ", " +
				"IDOBJ_TIPO_DOCUMENTO = " + _db.CreateSqlParameterName("IDOBJ_TIPO_DOCUMENTO") + ", " +
				"SEGNALIBRO = " + _db.CreateSqlParameterName("SEGNALIBRO") + ", " +
				"NUMERO_PROTOCOLLO = " + _db.CreateSqlParameterName("NUMERO_PROTOCOLLO") + ", " +
				"DATA_PROTOCOLLO = " + _db.CreateSqlParameterName("DATA_PROTOCOLLO") + ", " +
				"TESTO = " + _db.CreateSqlParameterName("TESTO") + ", " +
				"NOTE = " + _db.CreateSqlParameterName("NOTE") + ", " +
				"OPERATOREULTMOD = " + _db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
				"DATAORAULTMOD = " + _db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
				"IDOBJ_ADESIONE = " + _db.CreateSqlParameterName("IDOBJ_ADESIONE") + ", " +
				"IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO") + ", " +
				"IDOBJ_LIQUIDAZIONE = " + _db.CreateSqlParameterName("IDOBJ_LIQUIDAZIONE") + ", " +
				"IDOBJ_REVISIONE = " + _db.CreateSqlParameterName("IDOBJ_REVISIONE") + ", " +
				"IDOBJ_ASSEMBLEA = " + _db.CreateSqlParameterName("IDOBJ_ASSEMBLEA") + ", " +
				"IDOBJ_BASE_SOCIALE = " + _db.CreateSqlParameterName("IDOBJ_BASE_SOCIALE") + ", " +
				"IDOBJ_BILANCIO = " + _db.CreateSqlParameterName("IDOBJ_BILANCIO") + ", " +
				"IDOBJ_CARICHE = " + _db.CreateSqlParameterName("IDOBJ_CARICHE") + ", " +
				"IDOBJ_FALLIMENTO = " + _db.CreateSqlParameterName("IDOBJ_FALLIMENTO") + ", " +
                "IDOBJ_PROCEDURA = " + _db.CreateSqlParameterName("IDOBJ_PROCEDURA") + ", " +
                "IDOBJ_SANZIONE = " + _db.CreateSqlParameterName("IDOBJ_SANZIONE") + ", " +
                "NOME_FILE = " + _db.CreateSqlParameterName("NOME_FILE") +
				" WHERE " +
				"IDOBJ = " + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ", valore.IDOBJ);
				AddParameter(cmd, "DATA_DOCUMENTO", valore.DATA_DOCUMENTO);
				AddParameter(cmd, "IDOBJ_TIPO_DOCUMENTO", valore.IDOBJ_TIPO_DOCUMENTO);
				AddParameter(cmd, "SEGNALIBRO", valore.IsSEGNALIBRONull ? DBNull.Value : (object)valore.SEGNALIBRO);
				AddParameter(cmd, "NUMERO_PROTOCOLLO", valore.IsNUMERO_PROTOCOLLONull ? DBNull.Value : (object)valore.NUMERO_PROTOCOLLO);
				AddParameter(cmd, "DATA_PROTOCOLLO", valore.IsDATA_PROTOCOLLONull ? DBNull.Value : (object)valore.DATA_PROTOCOLLO);
				AddParameter(cmd, "TESTO", valore.IsTESTONull ? DBNull.Value : (object)valore.TESTO);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_ADESIONE", valore.IsIDOBJ_ADESIONENull ? DBNull.Value : (object)valore.IDOBJ_ADESIONE);
				AddParameter(cmd, "IDOBJ_REGISTRO", valore.IsIDOBJ_REGISTRONull ? DBNull.Value : (object)valore.IDOBJ_REGISTRO);
				AddParameter(cmd, "IDOBJ_LIQUIDAZIONE", valore.IsIDOBJ_LIQUIDAZIONENull ? DBNull.Value : (object)valore.IDOBJ_LIQUIDAZIONE);
				AddParameter(cmd, "IDOBJ_REVISIONE", valore.IsIDOBJ_REVISIONENull ? DBNull.Value : (object)valore.IDOBJ_REVISIONE);
				AddParameter(cmd, "IDOBJ_ASSEMBLEA", valore.IsIDOBJ_ASSEMBLEANull ? DBNull.Value : (object)valore.IDOBJ_ASSEMBLEA);
				AddParameter(cmd, "IDOBJ_BASE_SOCIALE", valore.IsIDOBJ_BASE_SOCIALENull ? DBNull.Value : (object)valore.IDOBJ_BASE_SOCIALE);
				AddParameter(cmd, "IDOBJ_BILANCIO", valore.IsIDOBJ_BILANCIONull ? DBNull.Value : (object)valore.IDOBJ_BILANCIO);
				AddParameter(cmd, "IDOBJ_CARICHE", valore.IsIDOBJ_CARICHENull ? DBNull.Value : (object)valore.IDOBJ_CARICHE);
				AddParameter(cmd, "IDOBJ_FALLIMENTO", valore.IsIDOBJ_FALLIMENTONull ? DBNull.Value : (object)valore.IDOBJ_FALLIMENTO);
                AddParameter(cmd, "IDOBJ_PROCEDURA", valore.IsIDOBJ_PROCEDURANull ? DBNull.Value : (object)valore.IDOBJ_PROCEDURA);
                AddParameter(cmd, "IDOBJ_SANZIONE", valore.IsIDOBJ_SANZIONENull ? DBNull.Value : (object)valore.IDOBJ_SANZIONE);
                AddParameter(cmd, "NOME_FILE", valore.IsNOME_FILENull ? DBNull.Value : (object)valore.NOME_FILE);
				return cmd.ExecuteNonQuery() != 0;
			}
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTDOCUMENTAZIONE</param>
		public void Update(DataTable table)
		{
			Update(table, true);
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTDOCUMENTAZIONE</param>
		/// <param name="acceptChanges">true to accept the changes, otherwise false</param>
		public virtual void Update(DataTable table, bool acceptChanges)
		{
			DataRowCollection rows = table.Rows;
			for(int i = rows.Count - 1; i >= 0; i--)
			{
				DataRow row = rows[i];
				switch(row.RowState)
				{
					case DataRowState.Added:
						Insert(MapRow(row));
						if(acceptChanges)
							row.AcceptChanges();
						break;

					case DataRowState.Deleted:
						row.RejectChanges();
						try
						{
							DeleteByPrimaryKey((System.Int32)row["IDOBJ"]);
						}
						finally
						{
							row.Delete();
						}
						if(acceptChanges)
							row.AcceptChanges();
						break;

				case DataRowState.Modified:
					Update(MapRow(row));
					if(acceptChanges)
						row.AcceptChanges();
					break;
				}
			}
		}

		/// <summary>
		/// Deletes from the Database an object GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="valore">The object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public bool Delete(GVCTDOCUMENTAZIONE valore)
		{
			return DeleteByPrimaryKey(valore.IDOBJ);
		}

		/// <summary>
		/// Deletes from the Database an object GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="iDOBJ">The primary key of the object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool DeleteByPrimaryKey(System.Int32 iDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateDeleteCommand(whereSql))
			{
				AddParameter(cmd, "IDOBJ" , iDOBJ);
				return cmd.ExecuteNonQuery() > 0;
			}
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTDOCUMENTAZIONE selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>The number of the deleted objects</returns>
		public int Delete(System.String whereSql)
		{
			return CreateDeleteCommand(whereSql).ExecuteNonQuery();
		}

		/// <summary>
		/// Returns an IDbCommand to delete the objects GVCTDOCUMENTAZIONE selected by 
		/// a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteCommand(string whereSql)
		{
			StringBuilder sql = new StringBuilder("DELETE FROM GVCTDOCUMENTAZIONE");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format(" WHERE {0}", whereSql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Deletes all the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteAll()
		{
			return Delete("");
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCTDOCUMENTAZIONE</returns>
		protected GVCTDOCUMENTAZIONE[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCTDOCUMENTAZIONE</returns>
		protected GVCTDOCUMENTAZIONE[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCTDOCUMENTAZIONE</returns>
		protected virtual GVCTDOCUMENTAZIONE[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int iDOBJColumnIndex = reader.GetOrdinal("IDOBJ");
			int dATA_DOCUMENTOColumnIndex = reader.GetOrdinal("DATA_DOCUMENTO");
			int iDOBJ_TIPO_DOCUMENTOColumnIndex = reader.GetOrdinal("IDOBJ_TIPO_DOCUMENTO");
			int sEGNALIBROColumnIndex = reader.GetOrdinal("SEGNALIBRO");
			int nUMERO_PROTOCOLLOColumnIndex = reader.GetOrdinal("NUMERO_PROTOCOLLO");
			int dATA_PROTOCOLLOColumnIndex = reader.GetOrdinal("DATA_PROTOCOLLO");
			int tESTOColumnIndex = reader.GetOrdinal("TESTO");
			int nOTEColumnIndex = reader.GetOrdinal("NOTE");
			int oPERATOREULTMODColumnIndex = reader.GetOrdinal("OPERATOREULTMOD");
			int dATAORAULTMODColumnIndex = reader.GetOrdinal("DATAORAULTMOD");
			int iDOBJ_ADESIONEColumnIndex = reader.GetOrdinal("IDOBJ_ADESIONE");
			int iDOBJ_REGISTROColumnIndex = reader.GetOrdinal("IDOBJ_REGISTRO");
			int iDOBJ_LIQUIDAZIONEColumnIndex = reader.GetOrdinal("IDOBJ_LIQUIDAZIONE");
			int iDOBJ_REVISIONEColumnIndex = reader.GetOrdinal("IDOBJ_REVISIONE");
			int iDOBJ_ASSEMBLEAColumnIndex = reader.GetOrdinal("IDOBJ_ASSEMBLEA");
			int iDOBJ_BASE_SOCIALEColumnIndex = reader.GetOrdinal("IDOBJ_BASE_SOCIALE");
			int iDOBJ_BILANCIOColumnIndex = reader.GetOrdinal("IDOBJ_BILANCIO");
			int iDOBJ_CARICHEColumnIndex = reader.GetOrdinal("IDOBJ_CARICHE");
			int iDOBJ_FALLIMENTOColumnIndex = reader.GetOrdinal("IDOBJ_FALLIMENTO");
			int iDOBJ_PROCEDURAColumnIndex = reader.GetOrdinal("IDOBJ_PROCEDURA");
            int iDOBJ_SANZIONEColumnIndex = reader.GetOrdinal("IDOBJ_SANZIONE");
            int nOME_FILEColumnIndex = reader.GetOrdinal("NOME_FILE");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCTDOCUMENTAZIONE record = new GVCTDOCUMENTAZIONE();
					recordList.Add(record);
					record.IDOBJ = Convert.ToInt32(reader.GetValue(iDOBJColumnIndex));
					record.DATA_DOCUMENTO = Convert.ToDateTime(reader.GetValue(dATA_DOCUMENTOColumnIndex));
					record.IDOBJ_TIPO_DOCUMENTO = Convert.ToInt32(reader.GetValue(iDOBJ_TIPO_DOCUMENTOColumnIndex));
					if(!reader.IsDBNull(sEGNALIBROColumnIndex))
						record.SEGNALIBRO = Convert.ToString(reader.GetValue(sEGNALIBROColumnIndex));
					if(!reader.IsDBNull(nUMERO_PROTOCOLLOColumnIndex))
						record.NUMERO_PROTOCOLLO = Convert.ToString(reader.GetValue(nUMERO_PROTOCOLLOColumnIndex));
					if(!reader.IsDBNull(dATA_PROTOCOLLOColumnIndex))
						record.DATA_PROTOCOLLO = Convert.ToDateTime(reader.GetValue(dATA_PROTOCOLLOColumnIndex));
					if(!reader.IsDBNull(tESTOColumnIndex))
						record.TESTO = ((System.Byte[])reader.GetValue(tESTOColumnIndex));
					if(!reader.IsDBNull(nOTEColumnIndex))
						record.NOTE = Convert.ToString(reader.GetValue(nOTEColumnIndex));
					if(!reader.IsDBNull(oPERATOREULTMODColumnIndex))
						record.OPERATOREULTMOD = Convert.ToString(reader.GetValue(oPERATOREULTMODColumnIndex));
					if(!reader.IsDBNull(dATAORAULTMODColumnIndex))
						record.DATAORAULTMOD = Convert.ToDateTime(reader.GetValue(dATAORAULTMODColumnIndex));
					if(!reader.IsDBNull(iDOBJ_ADESIONEColumnIndex))
						record.IDOBJ_ADESIONE = Convert.ToInt32(reader.GetValue(iDOBJ_ADESIONEColumnIndex));
					if(!reader.IsDBNull(iDOBJ_REGISTROColumnIndex))
						record.IDOBJ_REGISTRO = Convert.ToInt32(reader.GetValue(iDOBJ_REGISTROColumnIndex));
					if(!reader.IsDBNull(iDOBJ_LIQUIDAZIONEColumnIndex))
						record.IDOBJ_LIQUIDAZIONE = Convert.ToInt32(reader.GetValue(iDOBJ_LIQUIDAZIONEColumnIndex));
					if(!reader.IsDBNull(iDOBJ_REVISIONEColumnIndex))
						record.IDOBJ_REVISIONE = Convert.ToInt32(reader.GetValue(iDOBJ_REVISIONEColumnIndex));
					if(!reader.IsDBNull(iDOBJ_ASSEMBLEAColumnIndex))
						record.IDOBJ_ASSEMBLEA = Convert.ToInt32(reader.GetValue(iDOBJ_ASSEMBLEAColumnIndex));
					if(!reader.IsDBNull(iDOBJ_BASE_SOCIALEColumnIndex))
						record.IDOBJ_BASE_SOCIALE = Convert.ToInt32(reader.GetValue(iDOBJ_BASE_SOCIALEColumnIndex));
					if(!reader.IsDBNull(iDOBJ_BILANCIOColumnIndex))
						record.IDOBJ_BILANCIO = Convert.ToInt32(reader.GetValue(iDOBJ_BILANCIOColumnIndex));
					if(!reader.IsDBNull(iDOBJ_CARICHEColumnIndex))
						record.IDOBJ_CARICHE = Convert.ToInt32(reader.GetValue(iDOBJ_CARICHEColumnIndex));
					if(!reader.IsDBNull(iDOBJ_FALLIMENTOColumnIndex))
						record.IDOBJ_FALLIMENTO = Convert.ToInt32(reader.GetValue(iDOBJ_FALLIMENTOColumnIndex));
					if(!reader.IsDBNull(iDOBJ_PROCEDURAColumnIndex))
						record.IDOBJ_PROCEDURA = Convert.ToInt32(reader.GetValue(iDOBJ_PROCEDURAColumnIndex));
                    if (!reader.IsDBNull(iDOBJ_SANZIONEColumnIndex))
                        record.IDOBJ_SANZIONE = Convert.ToInt32(reader.GetValue(iDOBJ_SANZIONEColumnIndex));
                    if (!reader.IsDBNull(nOME_FILEColumnIndex))
                        record.NOME_FILE = Convert.ToString(reader.GetValue(nOME_FILEColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCTDOCUMENTAZIONE[])(recordList.ToArray(typeof(GVCTDOCUMENTAZIONE)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCTDOCUMENTAZIONE</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCTDOCUMENTAZIONE</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTDOCUMENTAZIONE</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCTDOCUMENTAZIONE
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCTDOCUMENTAZIONE</returns>
		protected virtual GVCTDOCUMENTAZIONE MapRow(DataRow row)
		{
			GVCTDOCUMENTAZIONE mappedObject = new GVCTDOCUMENTAZIONE();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "IDOBJ"
			dataColumn = dataTable.Columns["IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ = (System.Int32)row[dataColumn];
			//Campo "DATA_DOCUMENTO"
			dataColumn = dataTable.Columns["DATA_DOCUMENTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_DOCUMENTO = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_TIPO_DOCUMENTO"
			dataColumn = dataTable.Columns["IDOBJ_TIPO_DOCUMENTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_TIPO_DOCUMENTO = (System.Int32)row[dataColumn];
			//Campo "SEGNALIBRO"
			dataColumn = dataTable.Columns["SEGNALIBRO"];
			if(!row.IsNull(dataColumn))
				mappedObject.SEGNALIBRO = (System.String)row[dataColumn];
			//Campo "NUMERO_PROTOCOLLO"
			dataColumn = dataTable.Columns["NUMERO_PROTOCOLLO"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_PROTOCOLLO = (System.String)row[dataColumn];
			//Campo "DATA_PROTOCOLLO"
			dataColumn = dataTable.Columns["DATA_PROTOCOLLO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_PROTOCOLLO = (System.DateTime)row[dataColumn];
			//Campo "TESTO"
			dataColumn = dataTable.Columns["TESTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.TESTO = (System.Byte[])row[dataColumn];
			//Campo "NOTE"
			dataColumn = dataTable.Columns["NOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.NOTE = (System.String)row[dataColumn];
			//Campo "OPERATOREULTMOD"
			dataColumn = dataTable.Columns["OPERATOREULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.OPERATOREULTMOD = (System.String)row[dataColumn];
			//Campo "DATAORAULTMOD"
			dataColumn = dataTable.Columns["DATAORAULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORAULTMOD = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_ADESIONE"
			dataColumn = dataTable.Columns["IDOBJ_ADESIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_ADESIONE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_REGISTRO"
			dataColumn = dataTable.Columns["IDOBJ_REGISTRO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_REGISTRO = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_LIQUIDAZIONE"
			dataColumn = dataTable.Columns["IDOBJ_LIQUIDAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_LIQUIDAZIONE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_REVISIONE"
			dataColumn = dataTable.Columns["IDOBJ_REVISIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_REVISIONE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_ASSEMBLEA"
			dataColumn = dataTable.Columns["IDOBJ_ASSEMBLEA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_ASSEMBLEA = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_BASE_SOCIALE"
			dataColumn = dataTable.Columns["IDOBJ_BASE_SOCIALE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_BASE_SOCIALE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_BILANCIO"
			dataColumn = dataTable.Columns["IDOBJ_BILANCIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_BILANCIO = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_CARICHE"
			dataColumn = dataTable.Columns["IDOBJ_CARICHE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_CARICHE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_FALLIMENTO"
			dataColumn = dataTable.Columns["IDOBJ_FALLIMENTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_FALLIMENTO = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_PROCEDURA"
			dataColumn = dataTable.Columns["IDOBJ_PROCEDURA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_PROCEDURA = (System.Int32)row[dataColumn];
            //Campo "IDOBJ_SANZIONE"
            dataColumn = dataTable.Columns["IDOBJ_SANZIONE"];
            if (!row.IsNull(dataColumn))
                mappedObject.IDOBJ_SANZIONE = (System.Int32)row[dataColumn];
            //Campo "NOME_FILE"
            dataColumn = dataTable.Columns["NOME_FILE"];
            if (!row.IsNull(dataColumn))
                mappedObject.NOME_FILE = (System.String)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCTDOCUMENTAZIONE
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCTDOCUMENTAZIONE";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = true;
			dataColumn.Unique = true;
			dataColumn.AutoIncrement = true;
			dataColumn = dataTable.Columns.Add("DATA_DOCUMENTO", typeof(System.DateTime));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_TIPO_DOCUMENTO", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("SEGNALIBRO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_PROTOCOLLO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_PROTOCOLLO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("TESTO", typeof(System.Byte[]));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NOTE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("OPERATOREULTMOD", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORAULTMOD", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_ADESIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_REGISTRO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_LIQUIDAZIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_REVISIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_ASSEMBLEA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_BASE_SOCIALE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_BILANCIO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_CARICHE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_FALLIMENTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_PROCEDURA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
            dataColumn = dataTable.Columns.Add("IDOBJ_SANZIONE", typeof(System.Int32));
            dataColumn.AllowDBNull = true;
            dataColumn.ReadOnly = false;
            dataColumn.Unique = false;
            dataColumn.AutoIncrement = false;
            dataColumn = dataTable.Columns.Add("NOME_FILE", typeof(System.String));
            dataColumn.AllowDBNull = true;
            dataColumn.ReadOnly = false;
            dataColumn.Unique = false;
            dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_DOCUMENTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_TIPO_DOCUMENTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "SEGNALIBRO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "NUMERO_PROTOCOLLO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_PROTOCOLLO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "TESTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Binary, valore);
					break;

				case "NOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "OPERATOREULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORAULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_ADESIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_REGISTRO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_LIQUIDAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_REVISIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_ASSEMBLEA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_BASE_SOCIALE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_BILANCIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_CARICHE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_FALLIMENTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_PROCEDURA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

                case "IDOBJ_SANZIONE":
                    parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
                    break;

                case "NOME_FILE":
                    parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
                    break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
