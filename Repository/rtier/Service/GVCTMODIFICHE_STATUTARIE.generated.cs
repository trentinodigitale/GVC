//
//Generated by DELTADATOR\GS0445 at 26/03/2009 9.03.14
//

using System;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Description of GVCTMODIFICHE_STATUTARIE
	/// </summary>
	public partial class GVCTMODIFICHE_STATUTARIE
	{
		private System.Int32 _iDOBJ;
		private System.DateTime _dATA_INIZIO;
		private System.Boolean _dATA_INIZIONull = true;
		private System.Int32 _iDOBJ_TIPO_MODIFICA;
		private System.Int32 _iDOBJ_ASSEMBLEA;
		private System.String _vECCHIA_DENOMINAZIONE;
		private System.Boolean _vECCHIA_DENOMINAZIONENull = true;
		private System.String _nUOVA_DENOMINAZIONE;
		private System.Boolean _nUOVA_DENOMINAZIONENull = true;
		private System.Int32 _iDOBJ_VECCHIA_FG;
		private System.Boolean _iDOBJ_VECCHIA_FGNull = true;
		private System.Int32 _iDOBJ_NUOVA_FG;
		private System.Boolean _iDOBJ_NUOVA_FGNull = true;
		private System.DateTime _nUOVA_DURATA;
		private System.Boolean _nUOVA_DURATANull = true;
		private System.Int32 _nUOVA_ILLIMITATA;
		private System.Boolean _nUOVA_ILLIMITATANull = true;
		private System.DateTime _vECCHIO_BILANCIO_AL;
		private System.Boolean _vECCHIO_BILANCIO_ALNull = true;
		private System.DateTime _nUOVO_BILANCIO_AL;
		private System.Boolean _nUOVO_BILANCIO_ALNull = true;
		private System.DateTime _dATA_ATTO_FUSIONE;
		private System.Boolean _dATA_ATTO_FUSIONENull = true;
		private System.DateTime _dATA_ISCRIZIONE_ATTO;
		private System.Boolean _dATA_ISCRIZIONE_ATTONull = true;
		private System.DateTime _dATA_EFFICACIA_ATTO;
		private System.Boolean _dATA_EFFICACIA_ATTONull = true;
		private System.Int32 _iDOBJ_VECCHIO_STATO;
		private System.Boolean _iDOBJ_VECCHIO_STATONull = true;
		private System.Int32 _iDOBJ_NUOVO_STATO;
		private System.Boolean _iDOBJ_NUOVO_STATONull = true;
		private System.String _nOTE;
		private System.Boolean _nOTENull = true;
		private System.String _oPERATOREULTMOD;
		private System.Boolean _oPERATOREULTMODNull = true;
		private System.DateTime _dATAORAULTMOD;
		private System.Boolean _dATAORAULTMODNull = true;
		private System.Int32 _iDOBJ_NOTAIO;
		private System.Boolean _iDOBJ_NOTAIONull = true;

		/// <summary>
		/// Default constructor
		/// </summary>
		public GVCTMODIFICHE_STATUTARIE(){}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ
		{
			get
			{
				return _iDOBJ;
			}
			set
			{
				_iDOBJ = value;
			}
		}

		/// <summary>
		/// Data inizio validità
		/// </summary>
		public System.DateTime DATA_INIZIO
		{
			get
			{
				if(IsDATA_INIZIONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_INIZIO;
			}
			set
			{
				_dATA_INIZIONull = false;
				_dATA_INIZIO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_INIZIONull
		{
			get
			{
				return _dATA_INIZIONull;
			}
			set
			{
				_dATA_INIZIONull = value;
			}
		}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ_TIPO_MODIFICA
		{
			get
			{
				return _iDOBJ_TIPO_MODIFICA;
			}
			set
			{
				_iDOBJ_TIPO_MODIFICA = value;
			}
		}

		/// <summary>
		/// Identificativo del record
		/// The field is mandatory.
		/// </summary>
		public System.Int32 IDOBJ_ASSEMBLEA
		{
			get
			{
				return _iDOBJ_ASSEMBLEA;
			}
			set
			{
				_iDOBJ_ASSEMBLEA = value;
			}
		}

		/// <summary>
		/// Precedente denominazione
		/// </summary>
		public System.String VECCHIA_DENOMINAZIONE
		{
			get
			{
				if(IsVECCHIA_DENOMINAZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _vECCHIA_DENOMINAZIONE;
			}
			set
			{
				_vECCHIA_DENOMINAZIONENull = false;
				_vECCHIA_DENOMINAZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsVECCHIA_DENOMINAZIONENull
		{
			get
			{
				return _vECCHIA_DENOMINAZIONENull;
			}
			set
			{
				_vECCHIA_DENOMINAZIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String VECCHIA_DENOMINAZIONESafe
		{
			get
			{
				if (IsVECCHIA_DENOMINAZIONENull)
					return System.String.Empty;
				return VECCHIA_DENOMINAZIONE;
			}
		}

		/// <summary>
		/// Nuova denominazione
		/// </summary>
		public System.String NUOVA_DENOMINAZIONE
		{
			get
			{
				if(IsNUOVA_DENOMINAZIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _nUOVA_DENOMINAZIONE;
			}
			set
			{
				_nUOVA_DENOMINAZIONENull = false;
				_nUOVA_DENOMINAZIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsNUOVA_DENOMINAZIONENull
		{
			get
			{
				return _nUOVA_DENOMINAZIONENull;
			}
			set
			{
				_nUOVA_DENOMINAZIONENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String NUOVA_DENOMINAZIONESafe
		{
			get
			{
				if (IsNUOVA_DENOMINAZIONENull)
					return System.String.Empty;
				return NUOVA_DENOMINAZIONE;
			}
		}

		/// <summary>
		/// Identificativo prec. forma giuridica
		/// </summary>
		public System.Int32 IDOBJ_VECCHIA_FG
		{
			get
			{
				if(IsIDOBJ_VECCHIA_FGNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iDOBJ_VECCHIA_FG;
			}
			set
			{
				_iDOBJ_VECCHIA_FGNull = false;
				_iDOBJ_VECCHIA_FG = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIDOBJ_VECCHIA_FGNull
		{
			get
			{
				return _iDOBJ_VECCHIA_FGNull;
			}
			set
			{
				_iDOBJ_VECCHIA_FGNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 IDOBJ_VECCHIA_FGSafe
		{
			get
			{
				if (IsIDOBJ_VECCHIA_FGNull)
					return -1;
				return IDOBJ_VECCHIA_FG;
			}
		}

		/// <summary>
		/// Identificativo nuova forma giuridica
		/// </summary>
		public System.Int32 IDOBJ_NUOVA_FG
		{
			get
			{
				if(IsIDOBJ_NUOVA_FGNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iDOBJ_NUOVA_FG;
			}
			set
			{
				_iDOBJ_NUOVA_FGNull = false;
				_iDOBJ_NUOVA_FG = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIDOBJ_NUOVA_FGNull
		{
			get
			{
				return _iDOBJ_NUOVA_FGNull;
			}
			set
			{
				_iDOBJ_NUOVA_FGNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 IDOBJ_NUOVA_FGSafe
		{
			get
			{
				if (IsIDOBJ_NUOVA_FGNull)
					return -1;
				return IDOBJ_NUOVA_FG;
			}
		}

		/// <summary>
		/// Nuova durata società
		/// </summary>
		public System.DateTime NUOVA_DURATA
		{
			get
			{
				if(IsNUOVA_DURATANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _nUOVA_DURATA;
			}
			set
			{
				_nUOVA_DURATANull = false;
				_nUOVA_DURATA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsNUOVA_DURATANull
		{
			get
			{
				return _nUOVA_DURATANull;
			}
			set
			{
				_nUOVA_DURATANull = value;
			}
		}

		/// <summary>
		/// 1=durata società illimitata
		/// </summary>
		public System.Int32 NUOVA_ILLIMITATA
		{
			get
			{
				if(IsNUOVA_ILLIMITATANull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _nUOVA_ILLIMITATA;
			}
			set
			{
				_nUOVA_ILLIMITATANull = false;
				_nUOVA_ILLIMITATA = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsNUOVA_ILLIMITATANull
		{
			get
			{
				return _nUOVA_ILLIMITATANull;
			}
			set
			{
				_nUOVA_ILLIMITATANull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 NUOVA_ILLIMITATASafe
		{
			get
			{
				if (IsNUOVA_ILLIMITATANull)
					return -1;
				return NUOVA_ILLIMITATA;
			}
		}

		/// <summary>
		/// Precedente Bilancio esercizio al
		/// </summary>
		public System.DateTime VECCHIO_BILANCIO_AL
		{
			get
			{
				if(IsVECCHIO_BILANCIO_ALNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _vECCHIO_BILANCIO_AL;
			}
			set
			{
				_vECCHIO_BILANCIO_ALNull = false;
				_vECCHIO_BILANCIO_AL = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsVECCHIO_BILANCIO_ALNull
		{
			get
			{
				return _vECCHIO_BILANCIO_ALNull;
			}
			set
			{
				_vECCHIO_BILANCIO_ALNull = value;
			}
		}

		/// <summary>
		/// Nuovo Bilancio esercizio al
		/// </summary>
		public System.DateTime NUOVO_BILANCIO_AL
		{
			get
			{
				if(IsNUOVO_BILANCIO_ALNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _nUOVO_BILANCIO_AL;
			}
			set
			{
				_nUOVO_BILANCIO_ALNull = false;
				_nUOVO_BILANCIO_AL = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsNUOVO_BILANCIO_ALNull
		{
			get
			{
				return _nUOVO_BILANCIO_ALNull;
			}
			set
			{
				_nUOVO_BILANCIO_ALNull = value;
			}
		}

		/// <summary>
		/// Data atto fusione o scissione
		/// </summary>
		public System.DateTime DATA_ATTO_FUSIONE
		{
			get
			{
				if(IsDATA_ATTO_FUSIONENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_ATTO_FUSIONE;
			}
			set
			{
				_dATA_ATTO_FUSIONENull = false;
				_dATA_ATTO_FUSIONE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_ATTO_FUSIONENull
		{
			get
			{
				return _dATA_ATTO_FUSIONENull;
			}
			set
			{
				_dATA_ATTO_FUSIONENull = value;
			}
		}

		/// <summary>
		/// Data iscrizione al Registro imprese
		/// </summary>
		public System.DateTime DATA_ISCRIZIONE_ATTO
		{
			get
			{
				if(IsDATA_ISCRIZIONE_ATTONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_ISCRIZIONE_ATTO;
			}
			set
			{
				_dATA_ISCRIZIONE_ATTONull = false;
				_dATA_ISCRIZIONE_ATTO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_ISCRIZIONE_ATTONull
		{
			get
			{
				return _dATA_ISCRIZIONE_ATTONull;
			}
			set
			{
				_dATA_ISCRIZIONE_ATTONull = value;
			}
		}

		/// <summary>
		/// Data efficacia atto
		/// </summary>
		public System.DateTime DATA_EFFICACIA_ATTO
		{
			get
			{
				if(IsDATA_EFFICACIA_ATTONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATA_EFFICACIA_ATTO;
			}
			set
			{
				_dATA_EFFICACIA_ATTONull = false;
				_dATA_EFFICACIA_ATTO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATA_EFFICACIA_ATTONull
		{
			get
			{
				return _dATA_EFFICACIA_ATTONull;
			}
			set
			{
				_dATA_EFFICACIA_ATTONull = value;
			}
		}

		/// <summary>
		/// Identificativo precedente stato
		/// </summary>
		public System.Int32 IDOBJ_VECCHIO_STATO
		{
			get
			{
				if(IsIDOBJ_VECCHIO_STATONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iDOBJ_VECCHIO_STATO;
			}
			set
			{
				_iDOBJ_VECCHIO_STATONull = false;
				_iDOBJ_VECCHIO_STATO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIDOBJ_VECCHIO_STATONull
		{
			get
			{
				return _iDOBJ_VECCHIO_STATONull;
			}
			set
			{
				_iDOBJ_VECCHIO_STATONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 IDOBJ_VECCHIO_STATOSafe
		{
			get
			{
				if (IsIDOBJ_VECCHIO_STATONull)
					return -1;
				return IDOBJ_VECCHIO_STATO;
			}
		}

		/// <summary>
		/// Identificativo nuovo stato
		/// </summary>
		public System.Int32 IDOBJ_NUOVO_STATO
		{
			get
			{
				if(IsIDOBJ_NUOVO_STATONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iDOBJ_NUOVO_STATO;
			}
			set
			{
				_iDOBJ_NUOVO_STATONull = false;
				_iDOBJ_NUOVO_STATO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIDOBJ_NUOVO_STATONull
		{
			get
			{
				return _iDOBJ_NUOVO_STATONull;
			}
			set
			{
				_iDOBJ_NUOVO_STATONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 IDOBJ_NUOVO_STATOSafe
		{
			get
			{
				if (IsIDOBJ_NUOVO_STATONull)
					return -1;
				return IDOBJ_NUOVO_STATO;
			}
		}

		/// <summary>
		/// Value of field NOTE
		/// </summary>
		public System.String NOTE
		{
			get
			{
				if(IsNOTENull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _nOTE;
			}
			set
			{
				_nOTENull = false;
				_nOTE = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsNOTENull
		{
			get
			{
				return _nOTENull;
			}
			set
			{
				_nOTENull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String NOTESafe
		{
			get
			{
				if (IsNOTENull)
					return System.String.Empty;
				return NOTE;
			}
		}

		/// <summary>
		/// Value of field OPERATOREULTMOD
		/// </summary>
		public System.String OPERATOREULTMOD
		{
			get
			{
				if(IsOPERATOREULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _oPERATOREULTMOD;
			}
			set
			{
				_oPERATOREULTMODNull = false;
				_oPERATOREULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsOPERATOREULTMODNull
		{
			get
			{
				return _oPERATOREULTMODNull;
			}
			set
			{
				_oPERATOREULTMODNull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.String OPERATOREULTMODSafe
		{
			get
			{
				if (IsOPERATOREULTMODNull)
					return System.String.Empty;
				return OPERATOREULTMOD;
			}
		}

		/// <summary>
		/// Value of field DATAORAULTMOD
		/// </summary>
		public System.DateTime DATAORAULTMOD
		{
			get
			{
				if(IsDATAORAULTMODNull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _dATAORAULTMOD;
			}
			set
			{
				_dATAORAULTMODNull = false;
				_dATAORAULTMOD = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsDATAORAULTMODNull
		{
			get
			{
				return _dATAORAULTMODNull;
			}
			set
			{
				_dATAORAULTMODNull = value;
			}
		}

		/// <summary>
		/// Identificativo del record
		/// </summary>
		public System.Int32 IDOBJ_NOTAIO
		{
			get
			{
				if(IsIDOBJ_NOTAIONull)
					throw new InvalidOperationException("Impossibile leggere il dato in quanto vale DBNull.");
				return _iDOBJ_NOTAIO;
			}
			set
			{
				_iDOBJ_NOTAIONull = false;
				_iDOBJ_NOTAIO = value;
			}
		}

		/// <summary>
		/// Return true if field is null, otherwise false.
		/// </summary>
		public bool IsIDOBJ_NOTAIONull
		{
			get
			{
				return _iDOBJ_NOTAIONull;
			}
			set
			{
				_iDOBJ_NOTAIONull = value;
			}
		}

		/// <summary>
		///  This property is intend to use with string and integer fields 
		///  that can contain nullable values. 
		///  It is read only. 
		/// </summary>
		/// <returns>The value of the field or String.Empty/-1</returns>
		public System.Int32 IDOBJ_NOTAIOSafe
		{
			get
			{
				if (IsIDOBJ_NOTAIONull)
					return -1;
				return IDOBJ_NOTAIO;
			}
		}

	}
}