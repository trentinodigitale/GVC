//
//Generated by gvc at 27/07/2009 16.10.08
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCVRICERCALIQUIDAZIONI_COATTE
	/// </summary>
	public partial class GVCVRICERCALIQUIDAZIONI_COATTECollection
	{
		/// <summary>
		/// Returns the Database Name of the field S_DENOMINAZIONE.
		/// </summary>
		public const string S_DENOMINAZIONEColumnName = "S_DENOMINAZIONE";
		/// <summary>
		/// Returns the Database Name of the field S_IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string S_IDOBJColumnName = "S_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ.
		/// </summary>
		public const string R_IDOBJColumnName = "R_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field R_NUMERO_REA.
		/// </summary>
		public const string R_NUMERO_REAColumnName = "R_NUMERO_REA";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ_STATO.
		/// </summary>
		public const string R_IDOBJ_STATOColumnName = "R_IDOBJ_STATO";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_IDOBJ.
		/// </summary>
		public const string LIQCOA_IDOBJColumnName = "LIQCOA_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_IDOBJ_TIPO_LIQUIDAZIONE.
		/// </summary>
		public const string LIQCOA_IDOBJ_TIPO_LIQUIDAZIONEColumnName = "LIQCOA_IDOBJ_TIPO_LIQUIDAZIONE";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_PROCEDURA_CONCLUSA.
		/// </summary>
		public const string LIQCOA_PROCEDURA_CONCLUSAColumnName = "LIQCOA_PROCEDURA_CONCLUSA";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_PROCEDURA_REVOCATA.
		/// </summary>
		public const string LIQCOA_PROCEDURA_REVOCATAColumnName = "LIQCOA_PROCEDURA_REVOCATA";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_DEPOSITO_BFL.
		/// </summary>
		public const string LIQCOA_DEPOSITO_BFLColumnName = "LIQCOA_DEPOSITO_BFL";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_DATA_INSOLVENZA.
		/// </summary>
		public const string LIQCOA_DATA_INSOLVENZAColumnName = "LIQCOA_DATA_INSOLVENZA";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_DATA_PUBBLICAZIONE.
		/// </summary>
		public const string LIQCOA_DATA_PUBBLICAZIONEColumnName = "LIQCOA_DATA_PUBBLICAZIONE";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_DATA_DEPOSITO_RI.
		/// </summary>
		public const string LIQCOA_DATA_DEPOSITO_RIColumnName = "LIQCOA_DATA_DEPOSITO_RI";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_DATA_DELIBERA_GIUNTA.
		/// </summary>
		public const string LIQCOA_DATA_DELIBERA_GIUNTAColumnName = "LIQCOA_DATA_DELIBERA_GIUNTA";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_NUMERO_DELIBERA_GIUNTA.
		/// </summary>
		public const string LIQCOA_NUMERO_DELIBERA_GIUNTAColumnName = "LIQCOA_NUMERO_DELIBERA_GIUNTA";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_DATA_DELIBERA.
		/// </summary>
		public const string LIQCOA_DATA_DELIBERAColumnName = "LIQCOA_DATA_DELIBERA";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_NUMERO_DELIBERA.
		/// </summary>
		public const string LIQCOA_NUMERO_DELIBERAColumnName = "LIQCOA_NUMERO_DELIBERA";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_DATA_DETERMINA.
		/// </summary>
		public const string LIQCOA_DATA_DETERMINAColumnName = "LIQCOA_DATA_DETERMINA";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_NUMERO_DETERMINA.
		/// </summary>
		public const string LIQCOA_NUMERO_DETERMINAColumnName = "LIQCOA_NUMERO_DETERMINA";
		/// <summary>
		/// Returns the Database Name of the field LIQCOA_CODICE_UFFICIO.
		/// </summary>
		public const string LIQCOA_CODICE_UFFICIOColumnName = "LIQCOA_CODICE_UFFICIO";
		/// <summary>
		/// Returns the Database Name of the field CREFIS_IDOBJ.
		/// </summary>
		public const string CREFIS_IDOBJColumnName = "CREFIS_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field CREFIS_IMPORTO.
		/// </summary>
		public const string CREFIS_IMPORTOColumnName = "CREFIS_IMPORTO";
		/// <summary>
		/// Returns the Database Name of the field CREFIS_DATA_DELIBERA.
		/// </summary>
		public const string CREFIS_DATA_DELIBERAColumnName = "CREFIS_DATA_DELIBERA";
		/// <summary>
		/// Returns the Database Name of the field CREFIS_NUMERO_DELIBERA.
		/// </summary>
		public const string CREFIS_NUMERO_DELIBERAColumnName = "CREFIS_NUMERO_DELIBERA";
		/// <summary>
		/// Returns the Database Name of the field COMP_IDOBJ.
		/// </summary>
		public const string COMP_IDOBJColumnName = "COMP_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field COMP_IDOBJ_SOGGETTO.
		/// </summary>
		public const string COMP_IDOBJ_SOGGETTOColumnName = "COMP_IDOBJ_SOGGETTO";
		/// <summary>
		/// Returns the Database Name of the field COMP_NOME.
		/// </summary>
		public const string COMP_NOMEColumnName = "COMP_NOME";
		/// <summary>
		/// Returns the Database Name of the field COMP_TOTALE.
		/// </summary>
		public const string COMP_TOTALEColumnName = "COMP_TOTALE";
		/// <summary>
		/// Returns the Database Name of the field COMP_IVA.
		/// </summary>
		public const string COMP_IVAColumnName = "COMP_IVA";
		/// <summary>
		/// Returns the Database Name of the field COMP_CASSA.
		/// </summary>
		public const string COMP_CASSAColumnName = "COMP_CASSA";
		/// <summary>
		/// Returns the Database Name of the field COMP_SPESE.
		/// </summary>
		public const string COMP_SPESEColumnName = "COMP_SPESE";
		/// <summary>
		/// Returns the Database Name of the field COMP_COMPENSO.
		/// </summary>
		public const string COMP_COMPENSOColumnName = "COMP_COMPENSO";
		/// <summary>
		/// Returns the Database Name of the field COMP_PERCENTUALE_IVA.
		/// </summary>
		public const string COMP_PERCENTUALE_IVAColumnName = "COMP_PERCENTUALE_IVA";
		/// <summary>
		/// Returns the Database Name of the field COMP_PERCENTUALE_CNP.
		/// </summary>
		public const string COMP_PERCENTUALE_CNPColumnName = "COMP_PERCENTUALE_CNP";
		/// <summary>
		/// Returns the Database Name of the field AUTO_IDOBJ.
		/// </summary>
		public const string AUTO_IDOBJColumnName = "AUTO_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field AUTO_NOTE.
		/// </summary>
		public const string AUTO_NOTEColumnName = "AUTO_NOTE";
		/// <summary>
		/// Returns the Database Name of the field AUTO_DATA_DETERMINA.
		/// </summary>
		public const string AUTO_DATA_DETERMINAColumnName = "AUTO_DATA_DETERMINA";
		/// <summary>
		/// Returns the Database Name of the field AUTO_NUMERO_DETERMINA.
		/// </summary>
		public const string AUTO_NUMERO_DETERMINAColumnName = "AUTO_NUMERO_DETERMINA";
		/// <summary>
		/// Returns the Database Name of the field AUTO_DATA_DELIBERA.
		/// </summary>
		public const string AUTO_DATA_DELIBERAColumnName = "AUTO_DATA_DELIBERA";
		/// <summary>
		/// Returns the Database Name of the field AUTO_NUMERO_DELIBERA.
		/// </summary>
		public const string AUTO_NUMERO_DELIBERAColumnName = "AUTO_NUMERO_DELIBERA";
		/// <summary>
		/// Returns the Database Name of the field AUTO_DATA_ISTANZA.
		/// </summary>
		public const string AUTO_DATA_ISTANZAColumnName = "AUTO_DATA_ISTANZA";
		/// <summary>
		/// Returns the Database Name of the field AUTO_DESCRIZIONE.
		/// </summary>
		public const string AUTO_DESCRIZIONEColumnName = "AUTO_DESCRIZIONE";
		/// <summary>
		/// Returns the Database Name of the field AUTO_IDOBJ_TIPO.
		/// </summary>
		public const string AUTO_IDOBJ_TIPOColumnName = "AUTO_IDOBJ_TIPO";
		/// <summary>
		/// Returns the Database Name of the field RELSEM_IDOBJ.
		/// </summary>
		public const string RELSEM_IDOBJColumnName = "RELSEM_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field RELSEM_NOTE.
		/// </summary>
		public const string RELSEM_NOTEColumnName = "RELSEM_NOTE";
		/// <summary>
		/// Returns the Database Name of the field RELSEM_DATA_ESAME.
		/// </summary>
		public const string RELSEM_DATA_ESAMEColumnName = "RELSEM_DATA_ESAME";
		/// <summary>
		/// Returns the Database Name of the field RELSEM_DATA_PARERE.
		/// </summary>
		public const string RELSEM_DATA_PAREREColumnName = "RELSEM_DATA_PARERE";
		/// <summary>
		/// Returns the Database Name of the field RELSEM_DATA_RELAZIONE.
		/// </summary>
		public const string RELSEM_DATA_RELAZIONEColumnName = "RELSEM_DATA_RELAZIONE";
		/// <summary>
		/// Returns the Database Name of the field COMPLIQ_IDOBJ.
		/// </summary>
		public const string COMPLIQ_IDOBJColumnName = "COMPLIQ_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field COMPLIQ_IMPORTO_SPESE.
		/// </summary>
		public const string COMPLIQ_IMPORTO_SPESEColumnName = "COMPLIQ_IMPORTO_SPESE";
		/// <summary>
		/// Returns the Database Name of the field COMPLIQ_DATA_MANDATO.
		/// </summary>
		public const string COMPLIQ_DATA_MANDATOColumnName = "COMPLIQ_DATA_MANDATO";
		/// <summary>
		/// Returns the Database Name of the field COMPLIQ_NUMERO_MANDATO.
		/// </summary>
		public const string COMPLIQ_NUMERO_MANDATOColumnName = "COMPLIQ_NUMERO_MANDATO";
		/// <summary>
		/// Returns the Database Name of the field COMPLIQ_LIQUIDATO.
		/// </summary>
		public const string COMPLIQ_LIQUIDATOColumnName = "COMPLIQ_LIQUIDATO";
		/// <summary>
		/// Returns the Database Name of the field COMPLIQ_DATA_DETERMINA.
		/// </summary>
		public const string COMPLIQ_DATA_DETERMINAColumnName = "COMPLIQ_DATA_DETERMINA";
		/// <summary>
		/// Returns the Database Name of the field COMPLIQ_NUMERO_DETERMINA.
		/// </summary>
		public const string COMPLIQ_NUMERO_DETERMINAColumnName = "COMPLIQ_NUMERO_DETERMINA";
		/// <summary>
		/// Returns the Database Name of the field COMPLIQ_IMPORTO_CONTRIBUTO.
		/// </summary>
		public const string COMPLIQ_IMPORTO_CONTRIBUTOColumnName = "COMPLIQ_IMPORTO_CONTRIBUTO";
		/// <summary>
		/// Returns the Database Name of the field COMPLIQ_IMPORTO_DETERMINATO.
		/// </summary>
		public const string COMPLIQ_IMPORTO_DETERMINATOColumnName = "COMPLIQ_IMPORTO_DETERMINATO";
		/// <summary>
		/// Returns the Database Name of the field COMPLIQ_DATA_DOMANDA.
		/// </summary>
		public const string COMPLIQ_DATA_DOMANDAColumnName = "COMPLIQ_DATA_DOMANDA";
		/// <summary>
		/// Returns the Database Name of the field ADESIONE_ASSOCIAZIONE.
		/// </summary>
		public const string ADESIONE_ASSOCIAZIONEColumnName = "ADESIONE_ASSOCIAZIONE";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCVRICERCALIQUIDAZIONI_COATTECollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCVRICERCALIQUIDAZIONI_COATTE
		/// </summary>
		/// <returns>Array of objects GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		public virtual GVCVRICERCALIQUIDAZIONI_COATTE[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCVRICERCALIQUIDAZIONI_COATTE
		/// </summary>
		/// <returns>DataTable of objects GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCVRICERCALIQUIDAZIONI_COATTE
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCVRICERCALIQUIDAZIONI_COATTE selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		public GVCVRICERCALIQUIDAZIONI_COATTE GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCVRICERCALIQUIDAZIONI_COATTE[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCVRICERCALIQUIDAZIONI_COATTE selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		public GVCVRICERCALIQUIDAZIONI_COATTE[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCVRICERCALIQUIDAZIONI_COATTE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		public virtual GVCVRICERCALIQUIDAZIONI_COATTE[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCALIQUIDAZIONI_COATTE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCALIQUIDAZIONI_COATTE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCVRICERCALIQUIDAZIONI_COATTE selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("S_DENOMINAZIONE, ");
			sql.Append("S_IDOBJ, ");
			sql.Append("R_IDOBJ, ");
			sql.Append("R_NUMERO_REA, ");
			sql.Append("R_IDOBJ_STATO, ");
			sql.Append("LIQCOA_IDOBJ, ");
			sql.Append("LIQCOA_IDOBJ_TIPO_LIQUIDAZIONE, ");
			sql.Append("LIQCOA_PROCEDURA_CONCLUSA, ");
			sql.Append("LIQCOA_PROCEDURA_REVOCATA, ");
			sql.Append("LIQCOA_DEPOSITO_BFL, ");
			sql.Append("LIQCOA_DATA_INSOLVENZA, ");
			sql.Append("LIQCOA_DATA_PUBBLICAZIONE, ");
			sql.Append("LIQCOA_DATA_DEPOSITO_RI, ");
			sql.Append("LIQCOA_DATA_DELIBERA_GIUNTA, ");
			sql.Append("LIQCOA_NUMERO_DELIBERA_GIUNTA, ");
			sql.Append("LIQCOA_DATA_DELIBERA, ");
			sql.Append("LIQCOA_NUMERO_DELIBERA, ");
			sql.Append("LIQCOA_DATA_DETERMINA, ");
			sql.Append("LIQCOA_NUMERO_DETERMINA, ");
			sql.Append("LIQCOA_CODICE_UFFICIO, ");
			sql.Append("CREFIS_IDOBJ, ");
			sql.Append("CREFIS_IMPORTO, ");
			sql.Append("CREFIS_DATA_DELIBERA, ");
			sql.Append("CREFIS_NUMERO_DELIBERA, ");
			sql.Append("COMP_IDOBJ, ");
			sql.Append("COMP_IDOBJ_SOGGETTO, ");
			sql.Append("COMP_NOME, ");
			sql.Append("COMP_TOTALE, ");
			sql.Append("COMP_IVA, ");
			sql.Append("COMP_CASSA, ");
			sql.Append("COMP_SPESE, ");
			sql.Append("COMP_COMPENSO, ");
			sql.Append("COMP_PERCENTUALE_IVA, ");
			sql.Append("COMP_PERCENTUALE_CNP, ");
			sql.Append("AUTO_IDOBJ, ");
			sql.Append("AUTO_NOTE, ");
			sql.Append("AUTO_DATA_DETERMINA, ");
			sql.Append("AUTO_NUMERO_DETERMINA, ");
			sql.Append("AUTO_DATA_DELIBERA, ");
			sql.Append("AUTO_NUMERO_DELIBERA, ");
			sql.Append("AUTO_DATA_ISTANZA, ");
			sql.Append("AUTO_DESCRIZIONE, ");
			sql.Append("AUTO_IDOBJ_TIPO, ");
			sql.Append("RELSEM_IDOBJ, ");
			sql.Append("RELSEM_NOTE, ");
			sql.Append("RELSEM_DATA_ESAME, ");
			sql.Append("RELSEM_DATA_PARERE, ");
			sql.Append("RELSEM_DATA_RELAZIONE, ");
			sql.Append("COMPLIQ_IDOBJ, ");
			sql.Append("COMPLIQ_IMPORTO_SPESE, ");
			sql.Append("COMPLIQ_DATA_MANDATO, ");
			sql.Append("COMPLIQ_NUMERO_MANDATO, ");
			sql.Append("COMPLIQ_LIQUIDATO, ");
			sql.Append("COMPLIQ_DATA_DETERMINA, ");
			sql.Append("COMPLIQ_NUMERO_DETERMINA, ");
			sql.Append("COMPLIQ_IMPORTO_CONTRIBUTO, ");
			sql.Append("COMPLIQ_IMPORTO_DETERMINATO, ");
			sql.Append("COMPLIQ_DATA_DOMANDA, ");
			sql.Append("ADESIONE_ASSOCIAZIONE ");
			sql.Append("FROM GVCVRICERCALIQUIDAZIONI_COATTE ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}


		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCALIQUIDAZIONI_COATTE
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		protected GVCVRICERCALIQUIDAZIONI_COATTE[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCALIQUIDAZIONI_COATTE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		protected GVCVRICERCALIQUIDAZIONI_COATTE[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCVRICERCALIQUIDAZIONI_COATTE
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		protected virtual GVCVRICERCALIQUIDAZIONI_COATTE[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int s_DENOMINAZIONEColumnIndex = reader.GetOrdinal("S_DENOMINAZIONE");
			int s_IDOBJColumnIndex = reader.GetOrdinal("S_IDOBJ");
			int r_IDOBJColumnIndex = reader.GetOrdinal("R_IDOBJ");
			int r_NUMERO_REAColumnIndex = reader.GetOrdinal("R_NUMERO_REA");
			int r_IDOBJ_STATOColumnIndex = reader.GetOrdinal("R_IDOBJ_STATO");
			int lIQCOA_IDOBJColumnIndex = reader.GetOrdinal("LIQCOA_IDOBJ");
			int lIQCOA_IDOBJ_TIPO_LIQUIDAZIONEColumnIndex = reader.GetOrdinal("LIQCOA_IDOBJ_TIPO_LIQUIDAZIONE");
			int lIQCOA_PROCEDURA_CONCLUSAColumnIndex = reader.GetOrdinal("LIQCOA_PROCEDURA_CONCLUSA");
			int lIQCOA_PROCEDURA_REVOCATAColumnIndex = reader.GetOrdinal("LIQCOA_PROCEDURA_REVOCATA");
			int lIQCOA_DEPOSITO_BFLColumnIndex = reader.GetOrdinal("LIQCOA_DEPOSITO_BFL");
			int lIQCOA_DATA_INSOLVENZAColumnIndex = reader.GetOrdinal("LIQCOA_DATA_INSOLVENZA");
			int lIQCOA_DATA_PUBBLICAZIONEColumnIndex = reader.GetOrdinal("LIQCOA_DATA_PUBBLICAZIONE");
			int lIQCOA_DATA_DEPOSITO_RIColumnIndex = reader.GetOrdinal("LIQCOA_DATA_DEPOSITO_RI");
			int lIQCOA_DATA_DELIBERA_GIUNTAColumnIndex = reader.GetOrdinal("LIQCOA_DATA_DELIBERA_GIUNTA");
			int lIQCOA_NUMERO_DELIBERA_GIUNTAColumnIndex = reader.GetOrdinal("LIQCOA_NUMERO_DELIBERA_GIUNTA");
			int lIQCOA_DATA_DELIBERAColumnIndex = reader.GetOrdinal("LIQCOA_DATA_DELIBERA");
			int lIQCOA_NUMERO_DELIBERAColumnIndex = reader.GetOrdinal("LIQCOA_NUMERO_DELIBERA");
			int lIQCOA_DATA_DETERMINAColumnIndex = reader.GetOrdinal("LIQCOA_DATA_DETERMINA");
			int lIQCOA_NUMERO_DETERMINAColumnIndex = reader.GetOrdinal("LIQCOA_NUMERO_DETERMINA");
			int lIQCOA_CODICE_UFFICIOColumnIndex = reader.GetOrdinal("LIQCOA_CODICE_UFFICIO");
			int cREFIS_IDOBJColumnIndex = reader.GetOrdinal("CREFIS_IDOBJ");
			int cREFIS_IMPORTOColumnIndex = reader.GetOrdinal("CREFIS_IMPORTO");
			int cREFIS_DATA_DELIBERAColumnIndex = reader.GetOrdinal("CREFIS_DATA_DELIBERA");
			int cREFIS_NUMERO_DELIBERAColumnIndex = reader.GetOrdinal("CREFIS_NUMERO_DELIBERA");
			int cOMP_IDOBJColumnIndex = reader.GetOrdinal("COMP_IDOBJ");
			int cOMP_IDOBJ_SOGGETTOColumnIndex = reader.GetOrdinal("COMP_IDOBJ_SOGGETTO");
			int cOMP_NOMEColumnIndex = reader.GetOrdinal("COMP_NOME");
			int cOMP_TOTALEColumnIndex = reader.GetOrdinal("COMP_TOTALE");
			int cOMP_IVAColumnIndex = reader.GetOrdinal("COMP_IVA");
			int cOMP_CASSAColumnIndex = reader.GetOrdinal("COMP_CASSA");
			int cOMP_SPESEColumnIndex = reader.GetOrdinal("COMP_SPESE");
			int cOMP_COMPENSOColumnIndex = reader.GetOrdinal("COMP_COMPENSO");
			int cOMP_PERCENTUALE_IVAColumnIndex = reader.GetOrdinal("COMP_PERCENTUALE_IVA");
			int cOMP_PERCENTUALE_CNPColumnIndex = reader.GetOrdinal("COMP_PERCENTUALE_CNP");
			int aUTO_IDOBJColumnIndex = reader.GetOrdinal("AUTO_IDOBJ");
			int aUTO_NOTEColumnIndex = reader.GetOrdinal("AUTO_NOTE");
			int aUTO_DATA_DETERMINAColumnIndex = reader.GetOrdinal("AUTO_DATA_DETERMINA");
			int aUTO_NUMERO_DETERMINAColumnIndex = reader.GetOrdinal("AUTO_NUMERO_DETERMINA");
			int aUTO_DATA_DELIBERAColumnIndex = reader.GetOrdinal("AUTO_DATA_DELIBERA");
			int aUTO_NUMERO_DELIBERAColumnIndex = reader.GetOrdinal("AUTO_NUMERO_DELIBERA");
			int aUTO_DATA_ISTANZAColumnIndex = reader.GetOrdinal("AUTO_DATA_ISTANZA");
			int aUTO_DESCRIZIONEColumnIndex = reader.GetOrdinal("AUTO_DESCRIZIONE");
			int aUTO_IDOBJ_TIPOColumnIndex = reader.GetOrdinal("AUTO_IDOBJ_TIPO");
			int rELSEM_IDOBJColumnIndex = reader.GetOrdinal("RELSEM_IDOBJ");
			int rELSEM_NOTEColumnIndex = reader.GetOrdinal("RELSEM_NOTE");
			int rELSEM_DATA_ESAMEColumnIndex = reader.GetOrdinal("RELSEM_DATA_ESAME");
			int rELSEM_DATA_PAREREColumnIndex = reader.GetOrdinal("RELSEM_DATA_PARERE");
			int rELSEM_DATA_RELAZIONEColumnIndex = reader.GetOrdinal("RELSEM_DATA_RELAZIONE");
			int cOMPLIQ_IDOBJColumnIndex = reader.GetOrdinal("COMPLIQ_IDOBJ");
			int cOMPLIQ_IMPORTO_SPESEColumnIndex = reader.GetOrdinal("COMPLIQ_IMPORTO_SPESE");
			int cOMPLIQ_DATA_MANDATOColumnIndex = reader.GetOrdinal("COMPLIQ_DATA_MANDATO");
			int cOMPLIQ_NUMERO_MANDATOColumnIndex = reader.GetOrdinal("COMPLIQ_NUMERO_MANDATO");
			int cOMPLIQ_LIQUIDATOColumnIndex = reader.GetOrdinal("COMPLIQ_LIQUIDATO");
			int cOMPLIQ_DATA_DETERMINAColumnIndex = reader.GetOrdinal("COMPLIQ_DATA_DETERMINA");
			int cOMPLIQ_NUMERO_DETERMINAColumnIndex = reader.GetOrdinal("COMPLIQ_NUMERO_DETERMINA");
			int cOMPLIQ_IMPORTO_CONTRIBUTOColumnIndex = reader.GetOrdinal("COMPLIQ_IMPORTO_CONTRIBUTO");
			int cOMPLIQ_IMPORTO_DETERMINATOColumnIndex = reader.GetOrdinal("COMPLIQ_IMPORTO_DETERMINATO");
			int cOMPLIQ_DATA_DOMANDAColumnIndex = reader.GetOrdinal("COMPLIQ_DATA_DOMANDA");
			int aDESIONE_ASSOCIAZIONEColumnIndex = reader.GetOrdinal("ADESIONE_ASSOCIAZIONE");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCVRICERCALIQUIDAZIONI_COATTE record = new GVCVRICERCALIQUIDAZIONI_COATTE();
					recordList.Add(record);
					if(!reader.IsDBNull(s_DENOMINAZIONEColumnIndex))
						record.S_DENOMINAZIONE = Convert.ToString(reader.GetValue(s_DENOMINAZIONEColumnIndex));
					record.S_IDOBJ = Convert.ToInt32(reader.GetValue(s_IDOBJColumnIndex));
					if(!reader.IsDBNull(r_IDOBJColumnIndex))
						record.R_IDOBJ = Convert.ToInt32(reader.GetValue(r_IDOBJColumnIndex));
					if(!reader.IsDBNull(r_NUMERO_REAColumnIndex))
						record.R_NUMERO_REA = Convert.ToString(reader.GetValue(r_NUMERO_REAColumnIndex));
					if(!reader.IsDBNull(r_IDOBJ_STATOColumnIndex))
						record.R_IDOBJ_STATO = Convert.ToInt32(reader.GetValue(r_IDOBJ_STATOColumnIndex));
					if(!reader.IsDBNull(lIQCOA_IDOBJColumnIndex))
						record.LIQCOA_IDOBJ = Convert.ToInt32(reader.GetValue(lIQCOA_IDOBJColumnIndex));
					if(!reader.IsDBNull(lIQCOA_IDOBJ_TIPO_LIQUIDAZIONEColumnIndex))
						record.LIQCOA_IDOBJ_TIPO_LIQUIDAZIONE = Convert.ToInt32(reader.GetValue(lIQCOA_IDOBJ_TIPO_LIQUIDAZIONEColumnIndex));
					if(!reader.IsDBNull(lIQCOA_PROCEDURA_CONCLUSAColumnIndex))
						record.LIQCOA_PROCEDURA_CONCLUSA = Convert.ToInt32(reader.GetValue(lIQCOA_PROCEDURA_CONCLUSAColumnIndex));
					if(!reader.IsDBNull(lIQCOA_PROCEDURA_REVOCATAColumnIndex))
						record.LIQCOA_PROCEDURA_REVOCATA = Convert.ToInt32(reader.GetValue(lIQCOA_PROCEDURA_REVOCATAColumnIndex));
					if(!reader.IsDBNull(lIQCOA_DEPOSITO_BFLColumnIndex))
						record.LIQCOA_DEPOSITO_BFL = Convert.ToInt32(reader.GetValue(lIQCOA_DEPOSITO_BFLColumnIndex));
					if(!reader.IsDBNull(lIQCOA_DATA_INSOLVENZAColumnIndex))
						record.LIQCOA_DATA_INSOLVENZA = Convert.ToDateTime(reader.GetValue(lIQCOA_DATA_INSOLVENZAColumnIndex));
					if(!reader.IsDBNull(lIQCOA_DATA_PUBBLICAZIONEColumnIndex))
						record.LIQCOA_DATA_PUBBLICAZIONE = Convert.ToDateTime(reader.GetValue(lIQCOA_DATA_PUBBLICAZIONEColumnIndex));
					if(!reader.IsDBNull(lIQCOA_DATA_DEPOSITO_RIColumnIndex))
						record.LIQCOA_DATA_DEPOSITO_RI = Convert.ToDateTime(reader.GetValue(lIQCOA_DATA_DEPOSITO_RIColumnIndex));
					if(!reader.IsDBNull(lIQCOA_DATA_DELIBERA_GIUNTAColumnIndex))
						record.LIQCOA_DATA_DELIBERA_GIUNTA = Convert.ToDateTime(reader.GetValue(lIQCOA_DATA_DELIBERA_GIUNTAColumnIndex));
					if(!reader.IsDBNull(lIQCOA_NUMERO_DELIBERA_GIUNTAColumnIndex))
						record.LIQCOA_NUMERO_DELIBERA_GIUNTA = Convert.ToString(reader.GetValue(lIQCOA_NUMERO_DELIBERA_GIUNTAColumnIndex));
					if(!reader.IsDBNull(lIQCOA_DATA_DELIBERAColumnIndex))
						record.LIQCOA_DATA_DELIBERA = Convert.ToDateTime(reader.GetValue(lIQCOA_DATA_DELIBERAColumnIndex));
					if(!reader.IsDBNull(lIQCOA_NUMERO_DELIBERAColumnIndex))
						record.LIQCOA_NUMERO_DELIBERA = Convert.ToString(reader.GetValue(lIQCOA_NUMERO_DELIBERAColumnIndex));
					if(!reader.IsDBNull(lIQCOA_DATA_DETERMINAColumnIndex))
						record.LIQCOA_DATA_DETERMINA = Convert.ToDateTime(reader.GetValue(lIQCOA_DATA_DETERMINAColumnIndex));
					if(!reader.IsDBNull(lIQCOA_NUMERO_DETERMINAColumnIndex))
						record.LIQCOA_NUMERO_DETERMINA = Convert.ToString(reader.GetValue(lIQCOA_NUMERO_DETERMINAColumnIndex));
					if(!reader.IsDBNull(lIQCOA_CODICE_UFFICIOColumnIndex))
						record.LIQCOA_CODICE_UFFICIO = Convert.ToString(reader.GetValue(lIQCOA_CODICE_UFFICIOColumnIndex));
					if(!reader.IsDBNull(cREFIS_IDOBJColumnIndex))
						record.CREFIS_IDOBJ = Convert.ToDouble(reader.GetValue(cREFIS_IDOBJColumnIndex));
					if(!reader.IsDBNull(cREFIS_IMPORTOColumnIndex))
						record.CREFIS_IMPORTO = Convert.ToInt32(reader.GetValue(cREFIS_IMPORTOColumnIndex));
					if(!reader.IsDBNull(cREFIS_DATA_DELIBERAColumnIndex))
						record.CREFIS_DATA_DELIBERA = Convert.ToDateTime(reader.GetValue(cREFIS_DATA_DELIBERAColumnIndex));
					if(!reader.IsDBNull(cREFIS_NUMERO_DELIBERAColumnIndex))
						record.CREFIS_NUMERO_DELIBERA = Convert.ToString(reader.GetValue(cREFIS_NUMERO_DELIBERAColumnIndex));
					if(!reader.IsDBNull(cOMP_IDOBJColumnIndex))
						record.COMP_IDOBJ = Convert.ToInt32(reader.GetValue(cOMP_IDOBJColumnIndex));
					if(!reader.IsDBNull(cOMP_IDOBJ_SOGGETTOColumnIndex))
						record.COMP_IDOBJ_SOGGETTO = Convert.ToInt32(reader.GetValue(cOMP_IDOBJ_SOGGETTOColumnIndex));
					if(!reader.IsDBNull(cOMP_NOMEColumnIndex))
						record.COMP_NOME = Convert.ToString(reader.GetValue(cOMP_NOMEColumnIndex));
					if(!reader.IsDBNull(cOMP_TOTALEColumnIndex))
						record.COMP_TOTALE = Convert.ToDouble(reader.GetValue(cOMP_TOTALEColumnIndex));
					if(!reader.IsDBNull(cOMP_IVAColumnIndex))
						record.COMP_IVA = Convert.ToDouble(reader.GetValue(cOMP_IVAColumnIndex));
					if(!reader.IsDBNull(cOMP_CASSAColumnIndex))
						record.COMP_CASSA = Convert.ToDouble(reader.GetValue(cOMP_CASSAColumnIndex));
					if(!reader.IsDBNull(cOMP_SPESEColumnIndex))
						record.COMP_SPESE = Convert.ToDouble(reader.GetValue(cOMP_SPESEColumnIndex));
					if(!reader.IsDBNull(cOMP_COMPENSOColumnIndex))
						record.COMP_COMPENSO = Convert.ToDouble(reader.GetValue(cOMP_COMPENSOColumnIndex));
					if(!reader.IsDBNull(cOMP_PERCENTUALE_IVAColumnIndex))
						record.COMP_PERCENTUALE_IVA = Convert.ToDouble(reader.GetValue(cOMP_PERCENTUALE_IVAColumnIndex));
					if(!reader.IsDBNull(cOMP_PERCENTUALE_CNPColumnIndex))
						record.COMP_PERCENTUALE_CNP = Convert.ToDouble(reader.GetValue(cOMP_PERCENTUALE_CNPColumnIndex));
					if(!reader.IsDBNull(aUTO_IDOBJColumnIndex))
						record.AUTO_IDOBJ = Convert.ToInt32(reader.GetValue(aUTO_IDOBJColumnIndex));
					if(!reader.IsDBNull(aUTO_NOTEColumnIndex))
						record.AUTO_NOTE = Convert.ToString(reader.GetValue(aUTO_NOTEColumnIndex));
					if(!reader.IsDBNull(aUTO_DATA_DETERMINAColumnIndex))
						record.AUTO_DATA_DETERMINA = Convert.ToDateTime(reader.GetValue(aUTO_DATA_DETERMINAColumnIndex));
					if(!reader.IsDBNull(aUTO_NUMERO_DETERMINAColumnIndex))
						record.AUTO_NUMERO_DETERMINA = Convert.ToString(reader.GetValue(aUTO_NUMERO_DETERMINAColumnIndex));
					if(!reader.IsDBNull(aUTO_DATA_DELIBERAColumnIndex))
						record.AUTO_DATA_DELIBERA = Convert.ToDateTime(reader.GetValue(aUTO_DATA_DELIBERAColumnIndex));
					if(!reader.IsDBNull(aUTO_NUMERO_DELIBERAColumnIndex))
						record.AUTO_NUMERO_DELIBERA = Convert.ToString(reader.GetValue(aUTO_NUMERO_DELIBERAColumnIndex));
					if(!reader.IsDBNull(aUTO_DATA_ISTANZAColumnIndex))
						record.AUTO_DATA_ISTANZA = Convert.ToDateTime(reader.GetValue(aUTO_DATA_ISTANZAColumnIndex));
					if(!reader.IsDBNull(aUTO_DESCRIZIONEColumnIndex))
						record.AUTO_DESCRIZIONE = Convert.ToString(reader.GetValue(aUTO_DESCRIZIONEColumnIndex));
					if(!reader.IsDBNull(aUTO_IDOBJ_TIPOColumnIndex))
						record.AUTO_IDOBJ_TIPO = Convert.ToInt32(reader.GetValue(aUTO_IDOBJ_TIPOColumnIndex));
					if(!reader.IsDBNull(rELSEM_IDOBJColumnIndex))
						record.RELSEM_IDOBJ = Convert.ToInt32(reader.GetValue(rELSEM_IDOBJColumnIndex));
					if(!reader.IsDBNull(rELSEM_NOTEColumnIndex))
						record.RELSEM_NOTE = Convert.ToString(reader.GetValue(rELSEM_NOTEColumnIndex));
					if(!reader.IsDBNull(rELSEM_DATA_ESAMEColumnIndex))
						record.RELSEM_DATA_ESAME = Convert.ToDateTime(reader.GetValue(rELSEM_DATA_ESAMEColumnIndex));
					if(!reader.IsDBNull(rELSEM_DATA_PAREREColumnIndex))
						record.RELSEM_DATA_PARERE = Convert.ToDateTime(reader.GetValue(rELSEM_DATA_PAREREColumnIndex));
					if(!reader.IsDBNull(rELSEM_DATA_RELAZIONEColumnIndex))
						record.RELSEM_DATA_RELAZIONE = Convert.ToDateTime(reader.GetValue(rELSEM_DATA_RELAZIONEColumnIndex));
					if(!reader.IsDBNull(cOMPLIQ_IDOBJColumnIndex))
						record.COMPLIQ_IDOBJ = Convert.ToInt32(reader.GetValue(cOMPLIQ_IDOBJColumnIndex));
					if(!reader.IsDBNull(cOMPLIQ_IMPORTO_SPESEColumnIndex))
						record.COMPLIQ_IMPORTO_SPESE = Convert.ToDouble(reader.GetValue(cOMPLIQ_IMPORTO_SPESEColumnIndex));
					if(!reader.IsDBNull(cOMPLIQ_DATA_MANDATOColumnIndex))
						record.COMPLIQ_DATA_MANDATO = Convert.ToDateTime(reader.GetValue(cOMPLIQ_DATA_MANDATOColumnIndex));
					if(!reader.IsDBNull(cOMPLIQ_NUMERO_MANDATOColumnIndex))
						record.COMPLIQ_NUMERO_MANDATO = Convert.ToString(reader.GetValue(cOMPLIQ_NUMERO_MANDATOColumnIndex));
					if(!reader.IsDBNull(cOMPLIQ_LIQUIDATOColumnIndex))
						record.COMPLIQ_LIQUIDATO = Convert.ToInt32(reader.GetValue(cOMPLIQ_LIQUIDATOColumnIndex));
					if(!reader.IsDBNull(cOMPLIQ_DATA_DETERMINAColumnIndex))
						record.COMPLIQ_DATA_DETERMINA = Convert.ToDateTime(reader.GetValue(cOMPLIQ_DATA_DETERMINAColumnIndex));
					if(!reader.IsDBNull(cOMPLIQ_NUMERO_DETERMINAColumnIndex))
						record.COMPLIQ_NUMERO_DETERMINA = Convert.ToString(reader.GetValue(cOMPLIQ_NUMERO_DETERMINAColumnIndex));
					if(!reader.IsDBNull(cOMPLIQ_IMPORTO_CONTRIBUTOColumnIndex))
						record.COMPLIQ_IMPORTO_CONTRIBUTO = Convert.ToDouble(reader.GetValue(cOMPLIQ_IMPORTO_CONTRIBUTOColumnIndex));
					if(!reader.IsDBNull(cOMPLIQ_IMPORTO_DETERMINATOColumnIndex))
						record.COMPLIQ_IMPORTO_DETERMINATO = Convert.ToDouble(reader.GetValue(cOMPLIQ_IMPORTO_DETERMINATOColumnIndex));
					if(!reader.IsDBNull(cOMPLIQ_DATA_DOMANDAColumnIndex))
						record.COMPLIQ_DATA_DOMANDA = Convert.ToDateTime(reader.GetValue(cOMPLIQ_DATA_DOMANDAColumnIndex));
					if(!reader.IsDBNull(aDESIONE_ASSOCIAZIONEColumnIndex))
						record.ADESIONE_ASSOCIAZIONE = Convert.ToString(reader.GetValue(aDESIONE_ASSOCIAZIONEColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCVRICERCALIQUIDAZIONI_COATTE[])(recordList.ToArray(typeof(GVCVRICERCALIQUIDAZIONI_COATTE)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCVRICERCALIQUIDAZIONI_COATTE
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCVRICERCALIQUIDAZIONI_COATTE</returns>
		protected virtual GVCVRICERCALIQUIDAZIONI_COATTE MapRow(DataRow row)
		{
			GVCVRICERCALIQUIDAZIONI_COATTE mappedObject = new GVCVRICERCALIQUIDAZIONI_COATTE();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "S_DENOMINAZIONE"
			dataColumn = dataTable.Columns["S_DENOMINAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_DENOMINAZIONE = (System.String)row[dataColumn];
			//Campo "S_IDOBJ"
			dataColumn = dataTable.Columns["S_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "R_IDOBJ"
			dataColumn = dataTable.Columns["R_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "R_NUMERO_REA"
			dataColumn = dataTable.Columns["R_NUMERO_REA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_NUMERO_REA = (System.String)row[dataColumn];
			//Campo "R_IDOBJ_STATO"
			dataColumn = dataTable.Columns["R_IDOBJ_STATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ_STATO = (System.Int32)row[dataColumn];
			//Campo "LIQCOA_IDOBJ"
			dataColumn = dataTable.Columns["LIQCOA_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "LIQCOA_IDOBJ_TIPO_LIQUIDAZIONE"
			dataColumn = dataTable.Columns["LIQCOA_IDOBJ_TIPO_LIQUIDAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_IDOBJ_TIPO_LIQUIDAZIONE = (System.Int32)row[dataColumn];
			//Campo "LIQCOA_PROCEDURA_CONCLUSA"
			dataColumn = dataTable.Columns["LIQCOA_PROCEDURA_CONCLUSA"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_PROCEDURA_CONCLUSA = (System.Int32)row[dataColumn];
			//Campo "LIQCOA_PROCEDURA_REVOCATA"
			dataColumn = dataTable.Columns["LIQCOA_PROCEDURA_REVOCATA"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_PROCEDURA_REVOCATA = (System.Int32)row[dataColumn];
			//Campo "LIQCOA_DEPOSITO_BFL"
			dataColumn = dataTable.Columns["LIQCOA_DEPOSITO_BFL"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_DEPOSITO_BFL = (System.Int32)row[dataColumn];
			//Campo "LIQCOA_DATA_INSOLVENZA"
			dataColumn = dataTable.Columns["LIQCOA_DATA_INSOLVENZA"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_DATA_INSOLVENZA = (System.DateTime)row[dataColumn];
			//Campo "LIQCOA_DATA_PUBBLICAZIONE"
			dataColumn = dataTable.Columns["LIQCOA_DATA_PUBBLICAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_DATA_PUBBLICAZIONE = (System.DateTime)row[dataColumn];
			//Campo "LIQCOA_DATA_DEPOSITO_RI"
			dataColumn = dataTable.Columns["LIQCOA_DATA_DEPOSITO_RI"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_DATA_DEPOSITO_RI = (System.DateTime)row[dataColumn];
			//Campo "LIQCOA_DATA_DELIBERA_GIUNTA"
			dataColumn = dataTable.Columns["LIQCOA_DATA_DELIBERA_GIUNTA"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_DATA_DELIBERA_GIUNTA = (System.DateTime)row[dataColumn];
			//Campo "LIQCOA_NUMERO_DELIBERA_GIUNTA"
			dataColumn = dataTable.Columns["LIQCOA_NUMERO_DELIBERA_GIUNTA"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_NUMERO_DELIBERA_GIUNTA = (System.String)row[dataColumn];
			//Campo "LIQCOA_DATA_DELIBERA"
			dataColumn = dataTable.Columns["LIQCOA_DATA_DELIBERA"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_DATA_DELIBERA = (System.DateTime)row[dataColumn];
			//Campo "LIQCOA_NUMERO_DELIBERA"
			dataColumn = dataTable.Columns["LIQCOA_NUMERO_DELIBERA"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_NUMERO_DELIBERA = (System.String)row[dataColumn];
			//Campo "LIQCOA_DATA_DETERMINA"
			dataColumn = dataTable.Columns["LIQCOA_DATA_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_DATA_DETERMINA = (System.DateTime)row[dataColumn];
			//Campo "LIQCOA_NUMERO_DETERMINA"
			dataColumn = dataTable.Columns["LIQCOA_NUMERO_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_NUMERO_DETERMINA = (System.String)row[dataColumn];
			//Campo "LIQCOA_CODICE_UFFICIO"
			dataColumn = dataTable.Columns["LIQCOA_CODICE_UFFICIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.LIQCOA_CODICE_UFFICIO = (System.String)row[dataColumn];
			//Campo "CREFIS_IDOBJ"
			dataColumn = dataTable.Columns["CREFIS_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.CREFIS_IDOBJ = (System.Double)row[dataColumn];
			//Campo "CREFIS_IMPORTO"
			dataColumn = dataTable.Columns["CREFIS_IMPORTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.CREFIS_IMPORTO = (System.Int32)row[dataColumn];
			//Campo "CREFIS_DATA_DELIBERA"
			dataColumn = dataTable.Columns["CREFIS_DATA_DELIBERA"];
			if(!row.IsNull(dataColumn))
				mappedObject.CREFIS_DATA_DELIBERA = (System.DateTime)row[dataColumn];
			//Campo "CREFIS_NUMERO_DELIBERA"
			dataColumn = dataTable.Columns["CREFIS_NUMERO_DELIBERA"];
			if(!row.IsNull(dataColumn))
				mappedObject.CREFIS_NUMERO_DELIBERA = (System.String)row[dataColumn];
			//Campo "COMP_IDOBJ"
			dataColumn = dataTable.Columns["COMP_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMP_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "COMP_IDOBJ_SOGGETTO"
			dataColumn = dataTable.Columns["COMP_IDOBJ_SOGGETTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMP_IDOBJ_SOGGETTO = (System.Int32)row[dataColumn];
			//Campo "COMP_NOME"
			dataColumn = dataTable.Columns["COMP_NOME"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMP_NOME = (System.String)row[dataColumn];
			//Campo "COMP_TOTALE"
			dataColumn = dataTable.Columns["COMP_TOTALE"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMP_TOTALE = (System.Double)row[dataColumn];
			//Campo "COMP_IVA"
			dataColumn = dataTable.Columns["COMP_IVA"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMP_IVA = (System.Double)row[dataColumn];
			//Campo "COMP_CASSA"
			dataColumn = dataTable.Columns["COMP_CASSA"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMP_CASSA = (System.Double)row[dataColumn];
			//Campo "COMP_SPESE"
			dataColumn = dataTable.Columns["COMP_SPESE"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMP_SPESE = (System.Double)row[dataColumn];
			//Campo "COMP_COMPENSO"
			dataColumn = dataTable.Columns["COMP_COMPENSO"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMP_COMPENSO = (System.Double)row[dataColumn];
			//Campo "COMP_PERCENTUALE_IVA"
			dataColumn = dataTable.Columns["COMP_PERCENTUALE_IVA"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMP_PERCENTUALE_IVA = (System.Double)row[dataColumn];
			//Campo "COMP_PERCENTUALE_CNP"
			dataColumn = dataTable.Columns["COMP_PERCENTUALE_CNP"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMP_PERCENTUALE_CNP = (System.Double)row[dataColumn];
			//Campo "AUTO_IDOBJ"
			dataColumn = dataTable.Columns["AUTO_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.AUTO_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "AUTO_NOTE"
			dataColumn = dataTable.Columns["AUTO_NOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.AUTO_NOTE = (System.String)row[dataColumn];
			//Campo "AUTO_DATA_DETERMINA"
			dataColumn = dataTable.Columns["AUTO_DATA_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.AUTO_DATA_DETERMINA = (System.DateTime)row[dataColumn];
			//Campo "AUTO_NUMERO_DETERMINA"
			dataColumn = dataTable.Columns["AUTO_NUMERO_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.AUTO_NUMERO_DETERMINA = (System.String)row[dataColumn];
			//Campo "AUTO_DATA_DELIBERA"
			dataColumn = dataTable.Columns["AUTO_DATA_DELIBERA"];
			if(!row.IsNull(dataColumn))
				mappedObject.AUTO_DATA_DELIBERA = (System.DateTime)row[dataColumn];
			//Campo "AUTO_NUMERO_DELIBERA"
			dataColumn = dataTable.Columns["AUTO_NUMERO_DELIBERA"];
			if(!row.IsNull(dataColumn))
				mappedObject.AUTO_NUMERO_DELIBERA = (System.String)row[dataColumn];
			//Campo "AUTO_DATA_ISTANZA"
			dataColumn = dataTable.Columns["AUTO_DATA_ISTANZA"];
			if(!row.IsNull(dataColumn))
				mappedObject.AUTO_DATA_ISTANZA = (System.DateTime)row[dataColumn];
			//Campo "AUTO_DESCRIZIONE"
			dataColumn = dataTable.Columns["AUTO_DESCRIZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.AUTO_DESCRIZIONE = (System.String)row[dataColumn];
			//Campo "AUTO_IDOBJ_TIPO"
			dataColumn = dataTable.Columns["AUTO_IDOBJ_TIPO"];
			if(!row.IsNull(dataColumn))
				mappedObject.AUTO_IDOBJ_TIPO = (System.Int32)row[dataColumn];
			//Campo "RELSEM_IDOBJ"
			dataColumn = dataTable.Columns["RELSEM_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.RELSEM_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "RELSEM_NOTE"
			dataColumn = dataTable.Columns["RELSEM_NOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.RELSEM_NOTE = (System.String)row[dataColumn];
			//Campo "RELSEM_DATA_ESAME"
			dataColumn = dataTable.Columns["RELSEM_DATA_ESAME"];
			if(!row.IsNull(dataColumn))
				mappedObject.RELSEM_DATA_ESAME = (System.DateTime)row[dataColumn];
			//Campo "RELSEM_DATA_PARERE"
			dataColumn = dataTable.Columns["RELSEM_DATA_PARERE"];
			if(!row.IsNull(dataColumn))
				mappedObject.RELSEM_DATA_PARERE = (System.DateTime)row[dataColumn];
			//Campo "RELSEM_DATA_RELAZIONE"
			dataColumn = dataTable.Columns["RELSEM_DATA_RELAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.RELSEM_DATA_RELAZIONE = (System.DateTime)row[dataColumn];
			//Campo "COMPLIQ_IDOBJ"
			dataColumn = dataTable.Columns["COMPLIQ_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPLIQ_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "COMPLIQ_IMPORTO_SPESE"
			dataColumn = dataTable.Columns["COMPLIQ_IMPORTO_SPESE"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPLIQ_IMPORTO_SPESE = (System.Double)row[dataColumn];
			//Campo "COMPLIQ_DATA_MANDATO"
			dataColumn = dataTable.Columns["COMPLIQ_DATA_MANDATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPLIQ_DATA_MANDATO = (System.DateTime)row[dataColumn];
			//Campo "COMPLIQ_NUMERO_MANDATO"
			dataColumn = dataTable.Columns["COMPLIQ_NUMERO_MANDATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPLIQ_NUMERO_MANDATO = (System.String)row[dataColumn];
			//Campo "COMPLIQ_LIQUIDATO"
			dataColumn = dataTable.Columns["COMPLIQ_LIQUIDATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPLIQ_LIQUIDATO = (System.Int32)row[dataColumn];
			//Campo "COMPLIQ_DATA_DETERMINA"
			dataColumn = dataTable.Columns["COMPLIQ_DATA_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPLIQ_DATA_DETERMINA = (System.DateTime)row[dataColumn];
			//Campo "COMPLIQ_NUMERO_DETERMINA"
			dataColumn = dataTable.Columns["COMPLIQ_NUMERO_DETERMINA"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPLIQ_NUMERO_DETERMINA = (System.String)row[dataColumn];
			//Campo "COMPLIQ_IMPORTO_CONTRIBUTO"
			dataColumn = dataTable.Columns["COMPLIQ_IMPORTO_CONTRIBUTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPLIQ_IMPORTO_CONTRIBUTO = (System.Double)row[dataColumn];
			//Campo "COMPLIQ_IMPORTO_DETERMINATO"
			dataColumn = dataTable.Columns["COMPLIQ_IMPORTO_DETERMINATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPLIQ_IMPORTO_DETERMINATO = (System.Double)row[dataColumn];
			//Campo "COMPLIQ_DATA_DOMANDA"
			dataColumn = dataTable.Columns["COMPLIQ_DATA_DOMANDA"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPLIQ_DATA_DOMANDA = (System.DateTime)row[dataColumn];
			//Campo "ADESIONE_ASSOCIAZIONE"
			dataColumn = dataTable.Columns["ADESIONE_ASSOCIAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.ADESIONE_ASSOCIAZIONE = (System.String)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCVRICERCALIQUIDAZIONI_COATTE
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCVRICERCALIQUIDAZIONI_COATTE";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("S_DENOMINAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("S_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_NUMERO_REA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ_STATO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_IDOBJ_TIPO_LIQUIDAZIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_PROCEDURA_CONCLUSA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_PROCEDURA_REVOCATA", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_DEPOSITO_BFL", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_DATA_INSOLVENZA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_DATA_PUBBLICAZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_DATA_DEPOSITO_RI", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_DATA_DELIBERA_GIUNTA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_NUMERO_DELIBERA_GIUNTA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_DATA_DELIBERA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_NUMERO_DELIBERA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_DATA_DETERMINA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_NUMERO_DETERMINA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LIQCOA_CODICE_UFFICIO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CREFIS_IDOBJ", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CREFIS_IMPORTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CREFIS_DATA_DELIBERA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CREFIS_NUMERO_DELIBERA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMP_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMP_IDOBJ_SOGGETTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMP_NOME", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMP_TOTALE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMP_IVA", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMP_CASSA", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMP_SPESE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMP_COMPENSO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMP_PERCENTUALE_IVA", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMP_PERCENTUALE_CNP", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("AUTO_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("AUTO_NOTE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("AUTO_DATA_DETERMINA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("AUTO_NUMERO_DETERMINA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("AUTO_DATA_DELIBERA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("AUTO_NUMERO_DELIBERA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("AUTO_DATA_ISTANZA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("AUTO_DESCRIZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("AUTO_IDOBJ_TIPO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("RELSEM_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("RELSEM_NOTE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("RELSEM_DATA_ESAME", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("RELSEM_DATA_PARERE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("RELSEM_DATA_RELAZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPLIQ_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPLIQ_IMPORTO_SPESE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPLIQ_DATA_MANDATO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPLIQ_NUMERO_MANDATO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPLIQ_LIQUIDATO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPLIQ_DATA_DETERMINA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPLIQ_NUMERO_DETERMINA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPLIQ_IMPORTO_CONTRIBUTO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPLIQ_IMPORTO_DETERMINATO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPLIQ_DATA_DOMANDA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ADESIONE_ASSOCIAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "S_DENOMINAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "S_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_NUMERO_REA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_IDOBJ_STATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "LIQCOA_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "LIQCOA_IDOBJ_TIPO_LIQUIDAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "LIQCOA_PROCEDURA_CONCLUSA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "LIQCOA_PROCEDURA_REVOCATA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "LIQCOA_DEPOSITO_BFL":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "LIQCOA_DATA_INSOLVENZA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "LIQCOA_DATA_PUBBLICAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "LIQCOA_DATA_DEPOSITO_RI":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "LIQCOA_DATA_DELIBERA_GIUNTA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "LIQCOA_NUMERO_DELIBERA_GIUNTA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "LIQCOA_DATA_DELIBERA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "LIQCOA_NUMERO_DELIBERA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "LIQCOA_DATA_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "LIQCOA_NUMERO_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "LIQCOA_CODICE_UFFICIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "CREFIS_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "CREFIS_IMPORTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "CREFIS_DATA_DELIBERA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "CREFIS_NUMERO_DELIBERA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "COMP_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "COMP_IDOBJ_SOGGETTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "COMP_NOME":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "COMP_TOTALE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "COMP_IVA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "COMP_CASSA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "COMP_SPESE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "COMP_COMPENSO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "COMP_PERCENTUALE_IVA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "COMP_PERCENTUALE_CNP":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "AUTO_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "AUTO_NOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "AUTO_DATA_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "AUTO_NUMERO_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "AUTO_DATA_DELIBERA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "AUTO_NUMERO_DELIBERA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "AUTO_DATA_ISTANZA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "AUTO_DESCRIZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "AUTO_IDOBJ_TIPO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "RELSEM_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "RELSEM_NOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "RELSEM_DATA_ESAME":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "RELSEM_DATA_PARERE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "RELSEM_DATA_RELAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "COMPLIQ_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "COMPLIQ_IMPORTO_SPESE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "COMPLIQ_DATA_MANDATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "COMPLIQ_NUMERO_MANDATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "COMPLIQ_LIQUIDATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "COMPLIQ_DATA_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "COMPLIQ_NUMERO_DETERMINA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "COMPLIQ_IMPORTO_CONTRIBUTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "COMPLIQ_IMPORTO_DETERMINATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "COMPLIQ_DATA_DOMANDA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "ADESIONE_ASSOCIAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
