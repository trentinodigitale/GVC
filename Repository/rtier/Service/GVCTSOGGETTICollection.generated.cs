//
//Generated by gvc at 26/03/2009 9.03.14
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCTSOGGETTI
	/// </summary>
	public partial class GVCTSOGGETTICollection
	{
		/// <summary>
		/// Returns the Database Name of the field IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJColumnName = "IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field FLAG_ASSOCIAZIONE.
		///The field is mandatory.
		/// </summary>
		public const string FLAG_ASSOCIAZIONEColumnName = "FLAG_ASSOCIAZIONE";
		/// <summary>
		/// Returns the Database Name of the field FLAG_PF.
		///The field is mandatory.
		/// </summary>
		public const string FLAG_PFColumnName = "FLAG_PF";
		/// <summary>
		/// Returns the Database Name of the field DENOMINAZIONE.
		/// </summary>
		public const string DENOMINAZIONEColumnName = "DENOMINAZIONE";
		/// <summary>
		/// Returns the Database Name of the field COGNOME.
		/// </summary>
		public const string COGNOMEColumnName = "COGNOME";
		/// <summary>
		/// Returns the Database Name of the field NOME.
		/// </summary>
		public const string NOMEColumnName = "NOME";
		/// <summary>
		/// Returns the Database Name of the field CODICE_FISCALE.
		/// </summary>
		public const string CODICE_FISCALEColumnName = "CODICE_FISCALE";
		/// <summary>
		/// Returns the Database Name of the field PARTITA_IVA.
		/// </summary>
		public const string PARTITA_IVAColumnName = "PARTITA_IVA";
		/// <summary>
		/// Returns the Database Name of the field SESSO.
		/// </summary>
		public const string SESSOColumnName = "SESSO";
		/// <summary>
		/// Returns the Database Name of the field COGNOME_ACQUISITO.
		/// </summary>
		public const string COGNOME_ACQUISITOColumnName = "COGNOME_ACQUISITO";
		/// <summary>
		/// Returns the Database Name of the field DATA_NASCITA.
		/// </summary>
		public const string DATA_NASCITAColumnName = "DATA_NASCITA";
		/// <summary>
		/// Returns the Database Name of the field LUOGO_NASCITA.
		/// </summary>
		public const string LUOGO_NASCITAColumnName = "LUOGO_NASCITA";
		/// <summary>
		/// Returns the Database Name of the field STATO_NASCITA.
		/// </summary>
		public const string STATO_NASCITAColumnName = "STATO_NASCITA";
		/// <summary>
		/// Returns the Database Name of the field CITTADINANZA.
		/// </summary>
		public const string CITTADINANZAColumnName = "CITTADINANZA";
		/// <summary>
		/// Returns the Database Name of the field TELEFONO_1.
		/// </summary>
		public const string TELEFONO_1ColumnName = "TELEFONO_1";
		/// <summary>
		/// Returns the Database Name of the field TELEFONO_2.
		/// </summary>
		public const string TELEFONO_2ColumnName = "TELEFONO_2";
		/// <summary>
		/// Returns the Database Name of the field CELLULARE.
		/// </summary>
		public const string CELLULAREColumnName = "CELLULARE";
		/// <summary>
		/// Returns the Database Name of the field EMAIL.
		/// </summary>
		public const string EMAILColumnName = "EMAIL";
		/// <summary>
		/// Returns the Database Name of the field NOTE.
		/// </summary>
		public const string NOTEColumnName = "NOTE";
		/// <summary>
		/// Returns the Database Name of the field OPERATOREULTMOD.
		/// </summary>
		public const string OPERATOREULTMODColumnName = "OPERATOREULTMOD";
		/// <summary>
		/// Returns the Database Name of the field DATAORAULTMOD.
		/// </summary>
		public const string DATAORAULTMODColumnName = "DATAORAULTMOD";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_TIPO_SOGGETTO.
		/// </summary>
		public const string IDOBJ_TIPO_SOGGETTOColumnName = "IDOBJ_TIPO_SOGGETTO";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCTSOGGETTICollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCTSOGGETTI
		/// </summary>
		/// <returns>Array of objects GVCTSOGGETTI</returns>
		public virtual GVCTSOGGETTI[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCTSOGGETTI
		/// </summary>
		/// <returns>DataTable of objects GVCTSOGGETTI</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCTSOGGETTI
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCTSOGGETTI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCTSOGGETTI</returns>
		public GVCTSOGGETTI GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCTSOGGETTI[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCTSOGGETTI selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCTSOGGETTI</returns>
		public GVCTSOGGETTI[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCTSOGGETTI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCTSOGGETTI</returns>
		public virtual GVCTSOGGETTI[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTSOGGETTI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCTSOGGETTI</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTSOGGETTI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTSOGGETTI</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCTSOGGETTI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("IDOBJ, ");
			sql.Append("FLAG_ASSOCIAZIONE, ");
			sql.Append("FLAG_PF, ");
			sql.Append("DENOMINAZIONE, ");
			sql.Append("COGNOME, ");
			sql.Append("NOME, ");
			sql.Append("CODICE_FISCALE, ");
			sql.Append("PARTITA_IVA, ");
			sql.Append("SESSO, ");
			sql.Append("COGNOME_ACQUISITO, ");
			sql.Append("DATA_NASCITA, ");
			sql.Append("LUOGO_NASCITA, ");
			sql.Append("STATO_NASCITA, ");
			sql.Append("CITTADINANZA, ");
			sql.Append("TELEFONO_1, ");
			sql.Append("TELEFONO_2, ");
			sql.Append("CELLULARE, ");
			sql.Append("EMAIL, ");
			sql.Append("NOTE, ");
			sql.Append("OPERATOREULTMOD, ");
			sql.Append("DATAORAULTMOD, ");
			sql.Append("IDOBJ_TIPO_SOGGETTO ");
			sql.Append("FROM GVCTSOGGETTI ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Returns an object GVCTSOGGETTI selected by a primary key
		/// </summary>
		/// <param name="IDOBJ">The primary key of the object</param>
		/// <returns>Object of type GVCTSOGGETTI</returns>
		public virtual GVCTSOGGETTI GetByPrimaryKey(System.Int32 IDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateGetCommand(whereSql, null))
			{
				AddParameter(cmd, "IDOBJ", IDOBJ);
				GVCTSOGGETTI[] tempArray = MapRecords(cmd);
				return tempArray.Length == 0 ? null : tempArray[0];
			}
		}


		/// <summary>
		/// Returns an object GVCTSOGGETTI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_SOGGETTO">The foreign key of the object</param>
		/// <returns>Object of type GVCTSOGGETTI</returns>
		public virtual GVCTSOGGETTI[] GetByIDOBJ_TIPO_SOGGETTO(System.Int32 iDOBJ_TIPO_SOGGETTO)
		{
			return MapRecords(CreateGetByIDOBJ_TIPO_SOGGETTOCommand(iDOBJ_TIPO_SOGGETTO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTSOGGETTI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_SOGGETTO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_TIPO_SOGGETTOAsDataTable(System.Int32 iDOBJ_TIPO_SOGGETTO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_TIPO_SOGGETTOCommand(iDOBJ_TIPO_SOGGETTO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_SOGGETTO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_TIPO_SOGGETTOCommand(System.Int32 iDOBJ_TIPO_SOGGETTO)
		{
			string whereSql = "IDOBJ_TIPO_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_TIPO_SOGGETTO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_TIPO_SOGGETTO", iDOBJ_TIPO_SOGGETTO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTSOGGETTI
		/// </summary>
		/// <param name="iDOBJ_TIPO_SOGGETTO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_TIPO_SOGGETTO(System.Int32 iDOBJ_TIPO_SOGGETTO)
		{
			return CreateDeleteByIDOBJ_TIPO_SOGGETTOCommand(iDOBJ_TIPO_SOGGETTO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTSOGGETTI
		/// </summary>
		/// <param name="iDOBJ_TIPO_SOGGETTO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_TIPO_SOGGETTOCommand(System.Int32 iDOBJ_TIPO_SOGGETTO)
		{
			string whereSql = "IDOBJ_TIPO_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_TIPO_SOGGETTO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_TIPO_SOGGETTO", iDOBJ_TIPO_SOGGETTO);
			return cmd;
		}

		/// <summary>
		/// Inserts in the Database an object GVCTSOGGETTI
		/// </summary>
		/// <param name="valore">The object to insert</param>
		public virtual void Insert(GVCTSOGGETTI valore)
		{
			System.Int32 id = -1;
			System.String sqlStr;

			sqlStr = "SELECT GVCTSOGGETTI_SEQ.NEXTVAL FROM DUAL";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				id = Convert.ToInt32(cmd.ExecuteScalar());
			}

			sqlStr = "INSERT INTO GVCTSOGGETTI (" +
			"IDOBJ, " +
			"FLAG_ASSOCIAZIONE, " +
			"FLAG_PF, " +
			"DENOMINAZIONE, " +
			"COGNOME, " +
			"NOME, " +
			"CODICE_FISCALE, " +
			"PARTITA_IVA, " +
			"SESSO, " +
			"COGNOME_ACQUISITO, " +
			"DATA_NASCITA, " +
			"LUOGO_NASCITA, " +
			"STATO_NASCITA, " +
			"CITTADINANZA, " +
			"TELEFONO_1, " +
			"TELEFONO_2, " +
			"CELLULARE, " +
			"EMAIL, " +
			"NOTE, " +
			"OPERATOREULTMOD, " +
			"DATAORAULTMOD, " +
			"IDOBJ_TIPO_SOGGETTO) " +
			"VALUES (" + id.ToString() + ", " +
			_db.CreateSqlParameterName("FLAG_ASSOCIAZIONE") + ", " +
			_db.CreateSqlParameterName("FLAG_PF") + ", " +
			_db.CreateSqlParameterName("DENOMINAZIONE") + ", " +
			_db.CreateSqlParameterName("COGNOME") + ", " +
			_db.CreateSqlParameterName("NOME") + ", " +
			_db.CreateSqlParameterName("CODICE_FISCALE") + ", " +
			_db.CreateSqlParameterName("PARTITA_IVA") + ", " +
			_db.CreateSqlParameterName("SESSO") + ", " +
			_db.CreateSqlParameterName("COGNOME_ACQUISITO") + ", " +
			_db.CreateSqlParameterName("DATA_NASCITA") + ", " +
			_db.CreateSqlParameterName("LUOGO_NASCITA") + ", " +
			_db.CreateSqlParameterName("STATO_NASCITA") + ", " +
			_db.CreateSqlParameterName("CITTADINANZA") + ", " +
			_db.CreateSqlParameterName("TELEFONO_1") + ", " +
			_db.CreateSqlParameterName("TELEFONO_2") + ", " +
			_db.CreateSqlParameterName("CELLULARE") + ", " +
			_db.CreateSqlParameterName("EMAIL") + ", " +
			_db.CreateSqlParameterName("NOTE") + ", " +
			_db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
			_db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
			_db.CreateSqlParameterName("IDOBJ_TIPO_SOGGETTO") + ")";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "FLAG_ASSOCIAZIONE", valore.FLAG_ASSOCIAZIONE);
				AddParameter(cmd, "FLAG_PF", valore.FLAG_PF);
				AddParameter(cmd, "DENOMINAZIONE", valore.IsDENOMINAZIONENull ? DBNull.Value : (object)valore.DENOMINAZIONE);
				AddParameter(cmd, "COGNOME", valore.IsCOGNOMENull ? DBNull.Value : (object)valore.COGNOME);
				AddParameter(cmd, "NOME", valore.IsNOMENull ? DBNull.Value : (object)valore.NOME);
				AddParameter(cmd, "CODICE_FISCALE", valore.IsCODICE_FISCALENull ? DBNull.Value : (object)valore.CODICE_FISCALE);
				AddParameter(cmd, "PARTITA_IVA", valore.IsPARTITA_IVANull ? DBNull.Value : (object)valore.PARTITA_IVA);
				AddParameter(cmd, "SESSO", valore.IsSESSONull ? DBNull.Value : (object)valore.SESSO);
				AddParameter(cmd, "COGNOME_ACQUISITO", valore.IsCOGNOME_ACQUISITONull ? DBNull.Value : (object)valore.COGNOME_ACQUISITO);
				AddParameter(cmd, "DATA_NASCITA", valore.IsDATA_NASCITANull ? DBNull.Value : (object)valore.DATA_NASCITA);
				AddParameter(cmd, "LUOGO_NASCITA", valore.IsLUOGO_NASCITANull ? DBNull.Value : (object)valore.LUOGO_NASCITA);
				AddParameter(cmd, "STATO_NASCITA", valore.IsSTATO_NASCITANull ? DBNull.Value : (object)valore.STATO_NASCITA);
				AddParameter(cmd, "CITTADINANZA", valore.IsCITTADINANZANull ? DBNull.Value : (object)valore.CITTADINANZA);
				AddParameter(cmd, "TELEFONO_1", valore.IsTELEFONO_1Null ? DBNull.Value : (object)valore.TELEFONO_1);
				AddParameter(cmd, "TELEFONO_2", valore.IsTELEFONO_2Null ? DBNull.Value : (object)valore.TELEFONO_2);
				AddParameter(cmd, "CELLULARE", valore.IsCELLULARENull ? DBNull.Value : (object)valore.CELLULARE);
				AddParameter(cmd, "EMAIL", valore.IsEMAILNull ? DBNull.Value : (object)valore.EMAIL);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_TIPO_SOGGETTO", valore.IsIDOBJ_TIPO_SOGGETTONull ? DBNull.Value : (object)valore.IDOBJ_TIPO_SOGGETTO);
				cmd.ExecuteScalar();
				valore.IDOBJ = id;
			}
		}

		/// <summary>
		/// Updates in the Database an object GVCTSOGGETTI
		/// </summary>
		/// <param name="valore">The object to update</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool Update(GVCTSOGGETTI valore)
		{
			System.String sqlStr = "UPDATE GVCTSOGGETTI SET " +
				"FLAG_ASSOCIAZIONE = " + _db.CreateSqlParameterName("FLAG_ASSOCIAZIONE") + ", " +
				"FLAG_PF = " + _db.CreateSqlParameterName("FLAG_PF") + ", " +
				"DENOMINAZIONE = " + _db.CreateSqlParameterName("DENOMINAZIONE") + ", " +
				"COGNOME = " + _db.CreateSqlParameterName("COGNOME") + ", " +
				"NOME = " + _db.CreateSqlParameterName("NOME") + ", " +
				"CODICE_FISCALE = " + _db.CreateSqlParameterName("CODICE_FISCALE") + ", " +
				"PARTITA_IVA = " + _db.CreateSqlParameterName("PARTITA_IVA") + ", " +
				"SESSO = " + _db.CreateSqlParameterName("SESSO") + ", " +
				"COGNOME_ACQUISITO = " + _db.CreateSqlParameterName("COGNOME_ACQUISITO") + ", " +
				"DATA_NASCITA = " + _db.CreateSqlParameterName("DATA_NASCITA") + ", " +
				"LUOGO_NASCITA = " + _db.CreateSqlParameterName("LUOGO_NASCITA") + ", " +
				"STATO_NASCITA = " + _db.CreateSqlParameterName("STATO_NASCITA") + ", " +
				"CITTADINANZA = " + _db.CreateSqlParameterName("CITTADINANZA") + ", " +
				"TELEFONO_1 = " + _db.CreateSqlParameterName("TELEFONO_1") + ", " +
				"TELEFONO_2 = " + _db.CreateSqlParameterName("TELEFONO_2") + ", " +
				"CELLULARE = " + _db.CreateSqlParameterName("CELLULARE") + ", " +
				"EMAIL = " + _db.CreateSqlParameterName("EMAIL") + ", " +
				"NOTE = " + _db.CreateSqlParameterName("NOTE") + ", " +
				"OPERATOREULTMOD = " + _db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
				"DATAORAULTMOD = " + _db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
				"IDOBJ_TIPO_SOGGETTO = " + _db.CreateSqlParameterName("IDOBJ_TIPO_SOGGETTO") +
				" WHERE " +
				"IDOBJ = " + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ", valore.IDOBJ);
				AddParameter(cmd, "FLAG_ASSOCIAZIONE", valore.FLAG_ASSOCIAZIONE);
				AddParameter(cmd, "FLAG_PF", valore.FLAG_PF);
				AddParameter(cmd, "DENOMINAZIONE", valore.IsDENOMINAZIONENull ? DBNull.Value : (object)valore.DENOMINAZIONE);
				AddParameter(cmd, "COGNOME", valore.IsCOGNOMENull ? DBNull.Value : (object)valore.COGNOME);
				AddParameter(cmd, "NOME", valore.IsNOMENull ? DBNull.Value : (object)valore.NOME);
				AddParameter(cmd, "CODICE_FISCALE", valore.IsCODICE_FISCALENull ? DBNull.Value : (object)valore.CODICE_FISCALE);
				AddParameter(cmd, "PARTITA_IVA", valore.IsPARTITA_IVANull ? DBNull.Value : (object)valore.PARTITA_IVA);
				AddParameter(cmd, "SESSO", valore.IsSESSONull ? DBNull.Value : (object)valore.SESSO);
				AddParameter(cmd, "COGNOME_ACQUISITO", valore.IsCOGNOME_ACQUISITONull ? DBNull.Value : (object)valore.COGNOME_ACQUISITO);
				AddParameter(cmd, "DATA_NASCITA", valore.IsDATA_NASCITANull ? DBNull.Value : (object)valore.DATA_NASCITA);
				AddParameter(cmd, "LUOGO_NASCITA", valore.IsLUOGO_NASCITANull ? DBNull.Value : (object)valore.LUOGO_NASCITA);
				AddParameter(cmd, "STATO_NASCITA", valore.IsSTATO_NASCITANull ? DBNull.Value : (object)valore.STATO_NASCITA);
				AddParameter(cmd, "CITTADINANZA", valore.IsCITTADINANZANull ? DBNull.Value : (object)valore.CITTADINANZA);
				AddParameter(cmd, "TELEFONO_1", valore.IsTELEFONO_1Null ? DBNull.Value : (object)valore.TELEFONO_1);
				AddParameter(cmd, "TELEFONO_2", valore.IsTELEFONO_2Null ? DBNull.Value : (object)valore.TELEFONO_2);
				AddParameter(cmd, "CELLULARE", valore.IsCELLULARENull ? DBNull.Value : (object)valore.CELLULARE);
				AddParameter(cmd, "EMAIL", valore.IsEMAILNull ? DBNull.Value : (object)valore.EMAIL);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_TIPO_SOGGETTO", valore.IsIDOBJ_TIPO_SOGGETTONull ? DBNull.Value : (object)valore.IDOBJ_TIPO_SOGGETTO);
				return cmd.ExecuteNonQuery() != 0;
			}
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTSOGGETTI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTSOGGETTI</param>
		public void Update(DataTable table)
		{
			Update(table, true);
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTSOGGETTI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTSOGGETTI</param>
		/// <param name="acceptChanges">true to accept the changes, otherwise false</param>
		public virtual void Update(DataTable table, bool acceptChanges)
		{
			DataRowCollection rows = table.Rows;
			for(int i = rows.Count - 1; i >= 0; i--)
			{
				DataRow row = rows[i];
				switch(row.RowState)
				{
					case DataRowState.Added:
						Insert(MapRow(row));
						if(acceptChanges)
							row.AcceptChanges();
						break;

					case DataRowState.Deleted:
						row.RejectChanges();
						try
						{
							DeleteByPrimaryKey((System.Int32)row["IDOBJ"]);
						}
						finally
						{
							row.Delete();
						}
						if(acceptChanges)
							row.AcceptChanges();
						break;

				case DataRowState.Modified:
					Update(MapRow(row));
					if(acceptChanges)
						row.AcceptChanges();
					break;
				}
			}
		}

		/// <summary>
		/// Deletes from the Database an object GVCTSOGGETTI
		/// </summary>
		/// <param name="valore">The object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public bool Delete(GVCTSOGGETTI valore)
		{
			return DeleteByPrimaryKey(valore.IDOBJ);
		}

		/// <summary>
		/// Deletes from the Database an object GVCTSOGGETTI
		/// </summary>
		/// <param name="iDOBJ">The primary key of the object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool DeleteByPrimaryKey(System.Int32 iDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateDeleteCommand(whereSql))
			{
				AddParameter(cmd, "IDOBJ" , iDOBJ);
				return cmd.ExecuteNonQuery() > 0;
			}
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTSOGGETTI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>The number of the deleted objects</returns>
		public int Delete(System.String whereSql)
		{
			return CreateDeleteCommand(whereSql).ExecuteNonQuery();
		}

		/// <summary>
		/// Returns an IDbCommand to delete the objects GVCTSOGGETTI selected by 
		/// a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteCommand(string whereSql)
		{
			StringBuilder sql = new StringBuilder("DELETE FROM GVCTSOGGETTI");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format(" WHERE {0}", whereSql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Deletes all the objects GVCTSOGGETTI
		/// </summary>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteAll()
		{
			return Delete("");
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTSOGGETTI
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCTSOGGETTI</returns>
		protected GVCTSOGGETTI[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTSOGGETTI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCTSOGGETTI</returns>
		protected GVCTSOGGETTI[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCTSOGGETTI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCTSOGGETTI</returns>
		protected virtual GVCTSOGGETTI[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int iDOBJColumnIndex = reader.GetOrdinal("IDOBJ");
			int fLAG_ASSOCIAZIONEColumnIndex = reader.GetOrdinal("FLAG_ASSOCIAZIONE");
			int fLAG_PFColumnIndex = reader.GetOrdinal("FLAG_PF");
			int dENOMINAZIONEColumnIndex = reader.GetOrdinal("DENOMINAZIONE");
			int cOGNOMEColumnIndex = reader.GetOrdinal("COGNOME");
			int nOMEColumnIndex = reader.GetOrdinal("NOME");
			int cODICE_FISCALEColumnIndex = reader.GetOrdinal("CODICE_FISCALE");
			int pARTITA_IVAColumnIndex = reader.GetOrdinal("PARTITA_IVA");
			int sESSOColumnIndex = reader.GetOrdinal("SESSO");
			int cOGNOME_ACQUISITOColumnIndex = reader.GetOrdinal("COGNOME_ACQUISITO");
			int dATA_NASCITAColumnIndex = reader.GetOrdinal("DATA_NASCITA");
			int lUOGO_NASCITAColumnIndex = reader.GetOrdinal("LUOGO_NASCITA");
			int sTATO_NASCITAColumnIndex = reader.GetOrdinal("STATO_NASCITA");
			int cITTADINANZAColumnIndex = reader.GetOrdinal("CITTADINANZA");
			int tELEFONO_1ColumnIndex = reader.GetOrdinal("TELEFONO_1");
			int tELEFONO_2ColumnIndex = reader.GetOrdinal("TELEFONO_2");
			int cELLULAREColumnIndex = reader.GetOrdinal("CELLULARE");
			int eMAILColumnIndex = reader.GetOrdinal("EMAIL");
			int nOTEColumnIndex = reader.GetOrdinal("NOTE");
			int oPERATOREULTMODColumnIndex = reader.GetOrdinal("OPERATOREULTMOD");
			int dATAORAULTMODColumnIndex = reader.GetOrdinal("DATAORAULTMOD");
			int iDOBJ_TIPO_SOGGETTOColumnIndex = reader.GetOrdinal("IDOBJ_TIPO_SOGGETTO");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCTSOGGETTI record = new GVCTSOGGETTI();
					recordList.Add(record);
					record.IDOBJ = Convert.ToInt32(reader.GetValue(iDOBJColumnIndex));
					record.FLAG_ASSOCIAZIONE = Convert.ToInt32(reader.GetValue(fLAG_ASSOCIAZIONEColumnIndex));
					record.FLAG_PF = Convert.ToInt32(reader.GetValue(fLAG_PFColumnIndex));
					if(!reader.IsDBNull(dENOMINAZIONEColumnIndex))
						record.DENOMINAZIONE = Convert.ToString(reader.GetValue(dENOMINAZIONEColumnIndex));
					if(!reader.IsDBNull(cOGNOMEColumnIndex))
						record.COGNOME = Convert.ToString(reader.GetValue(cOGNOMEColumnIndex));
					if(!reader.IsDBNull(nOMEColumnIndex))
						record.NOME = Convert.ToString(reader.GetValue(nOMEColumnIndex));
					if(!reader.IsDBNull(cODICE_FISCALEColumnIndex))
						record.CODICE_FISCALE = Convert.ToString(reader.GetValue(cODICE_FISCALEColumnIndex));
					if(!reader.IsDBNull(pARTITA_IVAColumnIndex))
						record.PARTITA_IVA = Convert.ToString(reader.GetValue(pARTITA_IVAColumnIndex));
					if(!reader.IsDBNull(sESSOColumnIndex))
						record.SESSO = Convert.ToString(reader.GetValue(sESSOColumnIndex));
					if(!reader.IsDBNull(cOGNOME_ACQUISITOColumnIndex))
						record.COGNOME_ACQUISITO = Convert.ToString(reader.GetValue(cOGNOME_ACQUISITOColumnIndex));
					if(!reader.IsDBNull(dATA_NASCITAColumnIndex))
						record.DATA_NASCITA = Convert.ToDateTime(reader.GetValue(dATA_NASCITAColumnIndex));
					if(!reader.IsDBNull(lUOGO_NASCITAColumnIndex))
						record.LUOGO_NASCITA = Convert.ToString(reader.GetValue(lUOGO_NASCITAColumnIndex));
					if(!reader.IsDBNull(sTATO_NASCITAColumnIndex))
						record.STATO_NASCITA = Convert.ToString(reader.GetValue(sTATO_NASCITAColumnIndex));
					if(!reader.IsDBNull(cITTADINANZAColumnIndex))
						record.CITTADINANZA = Convert.ToString(reader.GetValue(cITTADINANZAColumnIndex));
					if(!reader.IsDBNull(tELEFONO_1ColumnIndex))
						record.TELEFONO_1 = Convert.ToString(reader.GetValue(tELEFONO_1ColumnIndex));
					if(!reader.IsDBNull(tELEFONO_2ColumnIndex))
						record.TELEFONO_2 = Convert.ToString(reader.GetValue(tELEFONO_2ColumnIndex));
					if(!reader.IsDBNull(cELLULAREColumnIndex))
						record.CELLULARE = Convert.ToString(reader.GetValue(cELLULAREColumnIndex));
					if(!reader.IsDBNull(eMAILColumnIndex))
						record.EMAIL = Convert.ToString(reader.GetValue(eMAILColumnIndex));
					if(!reader.IsDBNull(nOTEColumnIndex))
						record.NOTE = Convert.ToString(reader.GetValue(nOTEColumnIndex));
					if(!reader.IsDBNull(oPERATOREULTMODColumnIndex))
						record.OPERATOREULTMOD = Convert.ToString(reader.GetValue(oPERATOREULTMODColumnIndex));
					if(!reader.IsDBNull(dATAORAULTMODColumnIndex))
						record.DATAORAULTMOD = Convert.ToDateTime(reader.GetValue(dATAORAULTMODColumnIndex));
					if(!reader.IsDBNull(iDOBJ_TIPO_SOGGETTOColumnIndex))
						record.IDOBJ_TIPO_SOGGETTO = Convert.ToInt32(reader.GetValue(iDOBJ_TIPO_SOGGETTOColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCTSOGGETTI[])(recordList.ToArray(typeof(GVCTSOGGETTI)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCTSOGGETTI</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCTSOGGETTI</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTSOGGETTI</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCTSOGGETTI
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCTSOGGETTI</returns>
		protected virtual GVCTSOGGETTI MapRow(DataRow row)
		{
			GVCTSOGGETTI mappedObject = new GVCTSOGGETTI();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "IDOBJ"
			dataColumn = dataTable.Columns["IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ = (System.Int32)row[dataColumn];
			//Campo "FLAG_ASSOCIAZIONE"
			dataColumn = dataTable.Columns["FLAG_ASSOCIAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.FLAG_ASSOCIAZIONE = (System.Int32)row[dataColumn];
			//Campo "FLAG_PF"
			dataColumn = dataTable.Columns["FLAG_PF"];
			if(!row.IsNull(dataColumn))
				mappedObject.FLAG_PF = (System.Int32)row[dataColumn];
			//Campo "DENOMINAZIONE"
			dataColumn = dataTable.Columns["DENOMINAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DENOMINAZIONE = (System.String)row[dataColumn];
			//Campo "COGNOME"
			dataColumn = dataTable.Columns["COGNOME"];
			if(!row.IsNull(dataColumn))
				mappedObject.COGNOME = (System.String)row[dataColumn];
			//Campo "NOME"
			dataColumn = dataTable.Columns["NOME"];
			if(!row.IsNull(dataColumn))
				mappedObject.NOME = (System.String)row[dataColumn];
			//Campo "CODICE_FISCALE"
			dataColumn = dataTable.Columns["CODICE_FISCALE"];
			if(!row.IsNull(dataColumn))
				mappedObject.CODICE_FISCALE = (System.String)row[dataColumn];
			//Campo "PARTITA_IVA"
			dataColumn = dataTable.Columns["PARTITA_IVA"];
			if(!row.IsNull(dataColumn))
				mappedObject.PARTITA_IVA = (System.String)row[dataColumn];
			//Campo "SESSO"
			dataColumn = dataTable.Columns["SESSO"];
			if(!row.IsNull(dataColumn))
				mappedObject.SESSO = (System.String)row[dataColumn];
			//Campo "COGNOME_ACQUISITO"
			dataColumn = dataTable.Columns["COGNOME_ACQUISITO"];
			if(!row.IsNull(dataColumn))
				mappedObject.COGNOME_ACQUISITO = (System.String)row[dataColumn];
			//Campo "DATA_NASCITA"
			dataColumn = dataTable.Columns["DATA_NASCITA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_NASCITA = (System.DateTime)row[dataColumn];
			//Campo "LUOGO_NASCITA"
			dataColumn = dataTable.Columns["LUOGO_NASCITA"];
			if(!row.IsNull(dataColumn))
				mappedObject.LUOGO_NASCITA = (System.String)row[dataColumn];
			//Campo "STATO_NASCITA"
			dataColumn = dataTable.Columns["STATO_NASCITA"];
			if(!row.IsNull(dataColumn))
				mappedObject.STATO_NASCITA = (System.String)row[dataColumn];
			//Campo "CITTADINANZA"
			dataColumn = dataTable.Columns["CITTADINANZA"];
			if(!row.IsNull(dataColumn))
				mappedObject.CITTADINANZA = (System.String)row[dataColumn];
			//Campo "TELEFONO_1"
			dataColumn = dataTable.Columns["TELEFONO_1"];
			if(!row.IsNull(dataColumn))
				mappedObject.TELEFONO_1 = (System.String)row[dataColumn];
			//Campo "TELEFONO_2"
			dataColumn = dataTable.Columns["TELEFONO_2"];
			if(!row.IsNull(dataColumn))
				mappedObject.TELEFONO_2 = (System.String)row[dataColumn];
			//Campo "CELLULARE"
			dataColumn = dataTable.Columns["CELLULARE"];
			if(!row.IsNull(dataColumn))
				mappedObject.CELLULARE = (System.String)row[dataColumn];
			//Campo "EMAIL"
			dataColumn = dataTable.Columns["EMAIL"];
			if(!row.IsNull(dataColumn))
				mappedObject.EMAIL = (System.String)row[dataColumn];
			//Campo "NOTE"
			dataColumn = dataTable.Columns["NOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.NOTE = (System.String)row[dataColumn];
			//Campo "OPERATOREULTMOD"
			dataColumn = dataTable.Columns["OPERATOREULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.OPERATOREULTMOD = (System.String)row[dataColumn];
			//Campo "DATAORAULTMOD"
			dataColumn = dataTable.Columns["DATAORAULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORAULTMOD = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_TIPO_SOGGETTO"
			dataColumn = dataTable.Columns["IDOBJ_TIPO_SOGGETTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_TIPO_SOGGETTO = (System.Int32)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCTSOGGETTI
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCTSOGGETTI";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = true;
			dataColumn.Unique = true;
			dataColumn.AutoIncrement = true;
			dataColumn = dataTable.Columns.Add("FLAG_ASSOCIAZIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("FLAG_PF", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DENOMINAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COGNOME", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NOME", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CODICE_FISCALE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("PARTITA_IVA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("SESSO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COGNOME_ACQUISITO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_NASCITA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("LUOGO_NASCITA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("STATO_NASCITA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CITTADINANZA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("TELEFONO_1", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("TELEFONO_2", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("CELLULARE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("EMAIL", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NOTE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("OPERATOREULTMOD", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORAULTMOD", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_TIPO_SOGGETTO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "FLAG_ASSOCIAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "FLAG_PF":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DENOMINAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "COGNOME":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "NOME":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "CODICE_FISCALE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "PARTITA_IVA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "SESSO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "COGNOME_ACQUISITO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_NASCITA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "LUOGO_NASCITA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "STATO_NASCITA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "CITTADINANZA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "TELEFONO_1":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "TELEFONO_2":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "CELLULARE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "EMAIL":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "NOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "OPERATOREULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORAULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_TIPO_SOGGETTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
