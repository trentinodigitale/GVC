//
//Generated by gvc at 26/03/2009 9.03.14
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCVDIZIONARI
	/// </summary>
	public partial class GVCVDIZIONARICollection
	{
		/// <summary>
		/// Returns the Database Name of the field DIC_TIPO.
		/// </summary>
		public const string DIC_TIPOColumnName = "DIC_TIPO";
		/// <summary>
		/// Returns the Database Name of the field DIC_IDOBJ.
		/// </summary>
		public const string DIC_IDOBJColumnName = "DIC_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field DIC_CODICE.
		/// </summary>
		public const string DIC_CODICEColumnName = "DIC_CODICE";
		/// <summary>
		/// Returns the Database Name of the field DIC_DESCRIZIONE.
		/// </summary>
		public const string DIC_DESCRIZIONEColumnName = "DIC_DESCRIZIONE";
		/// <summary>
		/// Returns the Database Name of the field DIC_FLAG_ATTIVO.
		/// </summary>
		public const string DIC_FLAG_ATTIVOColumnName = "DIC_FLAG_ATTIVO";
		/// <summary>
		/// Returns the Database Name of the field DIC_ALTRO_FLAG.
		/// </summary>
		public const string DIC_ALTRO_FLAGColumnName = "DIC_ALTRO_FLAG";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCVDIZIONARICollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCVDIZIONARI
		/// </summary>
		/// <returns>Array of objects GVCVDIZIONARI</returns>
		public virtual GVCVDIZIONARI[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCVDIZIONARI
		/// </summary>
		/// <returns>DataTable of objects GVCVDIZIONARI</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCVDIZIONARI
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCVDIZIONARI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCVDIZIONARI</returns>
		public GVCVDIZIONARI GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCVDIZIONARI[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCVDIZIONARI selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCVDIZIONARI</returns>
		public GVCVDIZIONARI[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCVDIZIONARI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCVDIZIONARI</returns>
		public virtual GVCVDIZIONARI[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVDIZIONARI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCVDIZIONARI</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVDIZIONARI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVDIZIONARI</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCVDIZIONARI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("DIC_TIPO, ");
			sql.Append("DIC_IDOBJ, ");
			sql.Append("DIC_CODICE, ");
			sql.Append("DIC_DESCRIZIONE, ");
			sql.Append("DIC_FLAG_ATTIVO, ");
			sql.Append("DIC_ALTRO_FLAG ");
			sql.Append("FROM GVCVDIZIONARI ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}


		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVDIZIONARI
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCVDIZIONARI</returns>
		protected GVCVDIZIONARI[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVDIZIONARI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCVDIZIONARI</returns>
		protected GVCVDIZIONARI[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCVDIZIONARI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCVDIZIONARI</returns>
		protected virtual GVCVDIZIONARI[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int dIC_TIPOColumnIndex = reader.GetOrdinal("DIC_TIPO");
			int dIC_IDOBJColumnIndex = reader.GetOrdinal("DIC_IDOBJ");
			int dIC_CODICEColumnIndex = reader.GetOrdinal("DIC_CODICE");
			int dIC_DESCRIZIONEColumnIndex = reader.GetOrdinal("DIC_DESCRIZIONE");
			int dIC_FLAG_ATTIVOColumnIndex = reader.GetOrdinal("DIC_FLAG_ATTIVO");
			int dIC_ALTRO_FLAGColumnIndex = reader.GetOrdinal("DIC_ALTRO_FLAG");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCVDIZIONARI record = new GVCVDIZIONARI();
					recordList.Add(record);
					if(!reader.IsDBNull(dIC_TIPOColumnIndex))
						record.DIC_TIPO = Convert.ToString(reader.GetValue(dIC_TIPOColumnIndex));
					if(!reader.IsDBNull(dIC_IDOBJColumnIndex))
						record.DIC_IDOBJ = Convert.ToInt32(reader.GetValue(dIC_IDOBJColumnIndex));
					if(!reader.IsDBNull(dIC_CODICEColumnIndex))
						record.DIC_CODICE = Convert.ToString(reader.GetValue(dIC_CODICEColumnIndex));
					if(!reader.IsDBNull(dIC_DESCRIZIONEColumnIndex))
						record.DIC_DESCRIZIONE = Convert.ToString(reader.GetValue(dIC_DESCRIZIONEColumnIndex));
					if(!reader.IsDBNull(dIC_FLAG_ATTIVOColumnIndex))
						record.DIC_FLAG_ATTIVO = Convert.ToDouble(reader.GetValue(dIC_FLAG_ATTIVOColumnIndex));
					if(!reader.IsDBNull(dIC_ALTRO_FLAGColumnIndex))
						record.DIC_ALTRO_FLAG = Convert.ToDouble(reader.GetValue(dIC_ALTRO_FLAGColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCVDIZIONARI[])(recordList.ToArray(typeof(GVCVDIZIONARI)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCVDIZIONARI</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCVDIZIONARI</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVDIZIONARI</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCVDIZIONARI
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCVDIZIONARI</returns>
		protected virtual GVCVDIZIONARI MapRow(DataRow row)
		{
			GVCVDIZIONARI mappedObject = new GVCVDIZIONARI();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "DIC_TIPO"
			dataColumn = dataTable.Columns["DIC_TIPO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DIC_TIPO = (System.String)row[dataColumn];
			//Campo "DIC_IDOBJ"
			dataColumn = dataTable.Columns["DIC_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.DIC_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "DIC_CODICE"
			dataColumn = dataTable.Columns["DIC_CODICE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DIC_CODICE = (System.String)row[dataColumn];
			//Campo "DIC_DESCRIZIONE"
			dataColumn = dataTable.Columns["DIC_DESCRIZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DIC_DESCRIZIONE = (System.String)row[dataColumn];
			//Campo "DIC_FLAG_ATTIVO"
			dataColumn = dataTable.Columns["DIC_FLAG_ATTIVO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DIC_FLAG_ATTIVO = (System.Double)row[dataColumn];
			//Campo "DIC_ALTRO_FLAG"
			dataColumn = dataTable.Columns["DIC_ALTRO_FLAG"];
			if(!row.IsNull(dataColumn))
				mappedObject.DIC_ALTRO_FLAG = (System.Double)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCVDIZIONARI
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCVDIZIONARI";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("DIC_TIPO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DIC_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DIC_CODICE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DIC_DESCRIZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DIC_FLAG_ATTIVO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DIC_ALTRO_FLAG", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "DIC_TIPO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DIC_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DIC_CODICE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DIC_DESCRIZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DIC_FLAG_ATTIVO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "DIC_ALTRO_FLAG":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
