//
//Generated by gvc at 17/07/2009 11.39.26
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCTSANZIONI
	/// </summary>
	public partial class GVCTSANZIONICollection
	{
		/// <summary>
		/// Returns the Database Name of the field IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJColumnName = "IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field DATA_RILIEVO_INFRAZIONE.
		///The field is mandatory.
		/// </summary>
		public const string DATA_RILIEVO_INFRAZIONEColumnName = "DATA_RILIEVO_INFRAZIONE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_TIPO_TRASGRESSIONE.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_TIPO_TRASGRESSIONEColumnName = "IDOBJ_TIPO_TRASGRESSIONE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_REGISTRO.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_REGISTROColumnName = "IDOBJ_REGISTRO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_LEGGE_TRASGRESSIONE.
		/// </summary>
		public const string IDOBJ_LEGGE_TRASGRESSIONEColumnName = "IDOBJ_LEGGE_TRASGRESSIONE";
		/// <summary>
		/// Returns the Database Name of the field DATA_INFRAZIONE.
		/// </summary>
		public const string DATA_INFRAZIONEColumnName = "DATA_INFRAZIONE";
		/// <summary>
		/// Returns the Database Name of the field DATA_NOTIFICA_INFRAZIONE.
		/// </summary>
		public const string DATA_NOTIFICA_INFRAZIONEColumnName = "DATA_NOTIFICA_INFRAZIONE";
		/// <summary>
		/// Returns the Database Name of the field DATA_RACCOMANDATA.
		/// </summary>
		public const string DATA_RACCOMANDATAColumnName = "DATA_RACCOMANDATA";
		/// <summary>
		/// Returns the Database Name of the field DATA_SCADENZA_PAGAMENTO.
		/// </summary>
		public const string DATA_SCADENZA_PAGAMENTOColumnName = "DATA_SCADENZA_PAGAMENTO";
		/// <summary>
		/// Returns the Database Name of the field IMPORTO_SANZIONE.
		/// </summary>
		public const string IMPORTO_SANZIONEColumnName = "IMPORTO_SANZIONE";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_RECIDIVA.
		/// </summary>
		public const string NUMERO_RECIDIVAColumnName = "NUMERO_RECIDIVA";
		/// <summary>
		/// Returns the Database Name of the field NOTE.
		/// </summary>
		public const string NOTEColumnName = "NOTE";
		/// <summary>
		/// Returns the Database Name of the field DATA_PAG_OBLAZIONE.
		/// </summary>
		public const string DATA_PAG_OBLAZIONEColumnName = "DATA_PAG_OBLAZIONE";
		/// <summary>
		/// Returns the Database Name of the field IMPORTO_OBLAZIONE.
		/// </summary>
		public const string IMPORTO_OBLAZIONEColumnName = "IMPORTO_OBLAZIONE";
		/// <summary>
		/// Returns the Database Name of the field DATA_SCRITTI_DIFENSIVI.
		/// </summary>
		public const string DATA_SCRITTI_DIFENSIVIColumnName = "DATA_SCRITTI_DIFENSIVI";
		/// <summary>
		/// Returns the Database Name of the field DATA_AUDIZIONE.
		/// </summary>
		public const string DATA_AUDIZIONEColumnName = "DATA_AUDIZIONE";
		/// <summary>
		/// Returns the Database Name of the field NOTE_CONTRADDITTORIO.
		/// </summary>
		public const string NOTE_CONTRADDITTORIOColumnName = "NOTE_CONTRADDITTORIO";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_ORDINANZA.
		/// </summary>
		public const string NUMERO_ORDINANZAColumnName = "NUMERO_ORDINANZA";
		/// <summary>
		/// Returns the Database Name of the field DATA_ORDINANZA.
		/// </summary>
		public const string DATA_ORDINANZAColumnName = "DATA_ORDINANZA";
		/// <summary>
		/// Returns the Database Name of the field IMPORTO_ORDINANZA.
		/// </summary>
		public const string IMPORTO_ORDINANZAColumnName = "IMPORTO_ORDINANZA";
		/// <summary>
		/// Returns the Database Name of the field DATA_NOTIFICA_ORDINANZA.
		/// </summary>
		public const string DATA_NOTIFICA_ORDINANZAColumnName = "DATA_NOTIFICA_ORDINANZA";
		/// <summary>
		/// Returns the Database Name of the field DATA_RACCOMANDATA_ORDINANZA.
		/// </summary>
		public const string DATA_RACCOMANDATA_ORDINANZAColumnName = "DATA_RACCOMANDATA_ORDINANZA";
		/// <summary>
		/// Returns the Database Name of the field DATA_SCADENZA_PAG_ORDINANZA.
		/// </summary>
		public const string DATA_SCADENZA_PAG_ORDINANZAColumnName = "DATA_SCADENZA_PAG_ORDINANZA";
		/// <summary>
		/// Returns the Database Name of the field NUMERO_ARCHIVIAZIONE.
		/// </summary>
		public const string NUMERO_ARCHIVIAZIONEColumnName = "NUMERO_ARCHIVIAZIONE";
		/// <summary>
		/// Returns the Database Name of the field DATA_ARCHIVIAZIONE.
		/// </summary>
		public const string DATA_ARCHIVIAZIONEColumnName = "DATA_ARCHIVIAZIONE";
		/// <summary>
		/// Returns the Database Name of the field NOTE_INGIUNZIONE.
		/// </summary>
		public const string NOTE_INGIUNZIONEColumnName = "NOTE_INGIUNZIONE";
		/// <summary>
		/// Returns the Database Name of the field DATA_RICORSO.
		/// </summary>
		public const string DATA_RICORSOColumnName = "DATA_RICORSO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_GIUDICE.
		/// </summary>
		public const string IDOBJ_GIUDICEColumnName = "IDOBJ_GIUDICE";
		/// <summary>
		/// Returns the Database Name of the field DATA_SENTENZA_RICORSO.
		/// </summary>
		public const string DATA_SENTENZA_RICORSOColumnName = "DATA_SENTENZA_RICORSO";
		/// <summary>
		/// Returns the Database Name of the field DATA_DEPOSITO_RICORSO.
		/// </summary>
		public const string DATA_DEPOSITO_RICORSOColumnName = "DATA_DEPOSITO_RICORSO";
		/// <summary>
		/// Returns the Database Name of the field ESITO_RICORSO.
		/// </summary>
		public const string ESITO_RICORSOColumnName = "ESITO_RICORSO";
		/// <summary>
		/// Returns the Database Name of the field DATA_PAGAMENTO.
		/// </summary>
		public const string DATA_PAGAMENTOColumnName = "DATA_PAGAMENTO";
		/// <summary>
		/// Returns the Database Name of the field IMPORTO_PAGAMENTO.
		/// </summary>
		public const string IMPORTO_PAGAMENTOColumnName = "IMPORTO_PAGAMENTO";
		/// <summary>
		/// Returns the Database Name of the field OPERATOREULTMOD.
		/// </summary>
		public const string OPERATOREULTMODColumnName = "OPERATOREULTMOD";
		/// <summary>
		/// Returns the Database Name of the field DATAORAULTMOD.
		/// </summary>
		public const string DATAORAULTMODColumnName = "DATAORAULTMOD";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCTSANZIONICollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCTSANZIONI
		/// </summary>
		/// <returns>Array of objects GVCTSANZIONI</returns>
		public virtual GVCTSANZIONI[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCTSANZIONI
		/// </summary>
		/// <returns>DataTable of objects GVCTSANZIONI</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCTSANZIONI
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCTSANZIONI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCTSANZIONI</returns>
		public GVCTSANZIONI GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCTSANZIONI[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCTSANZIONI selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCTSANZIONI</returns>
		public GVCTSANZIONI[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCTSANZIONI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCTSANZIONI</returns>
		public virtual GVCTSANZIONI[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTSANZIONI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCTSANZIONI</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTSANZIONI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTSANZIONI</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCTSANZIONI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("IDOBJ, ");
			sql.Append("DATA_RILIEVO_INFRAZIONE, ");
			sql.Append("IDOBJ_TIPO_TRASGRESSIONE, ");
			sql.Append("IDOBJ_REGISTRO, ");
			sql.Append("IDOBJ_LEGGE_TRASGRESSIONE, ");
			sql.Append("DATA_INFRAZIONE, ");
			sql.Append("DATA_NOTIFICA_INFRAZIONE, ");
			sql.Append("DATA_RACCOMANDATA, ");
			sql.Append("DATA_SCADENZA_PAGAMENTO, ");
			sql.Append("IMPORTO_SANZIONE, ");
			sql.Append("NUMERO_RECIDIVA, ");
			sql.Append("NOTE, ");
			sql.Append("DATA_PAG_OBLAZIONE, ");
			sql.Append("IMPORTO_OBLAZIONE, ");
			sql.Append("DATA_SCRITTI_DIFENSIVI, ");
			sql.Append("DATA_AUDIZIONE, ");
			sql.Append("NOTE_CONTRADDITTORIO, ");
			sql.Append("NUMERO_ORDINANZA, ");
			sql.Append("DATA_ORDINANZA, ");
			sql.Append("IMPORTO_ORDINANZA, ");
			sql.Append("DATA_NOTIFICA_ORDINANZA, ");
			sql.Append("DATA_RACCOMANDATA_ORDINANZA, ");
			sql.Append("DATA_SCADENZA_PAG_ORDINANZA, ");
			sql.Append("NUMERO_ARCHIVIAZIONE, ");
			sql.Append("DATA_ARCHIVIAZIONE, ");
			sql.Append("NOTE_INGIUNZIONE, ");
			sql.Append("DATA_RICORSO, ");
			sql.Append("IDOBJ_GIUDICE, ");
			sql.Append("DATA_SENTENZA_RICORSO, ");
			sql.Append("DATA_DEPOSITO_RICORSO, ");
			sql.Append("ESITO_RICORSO, ");
			sql.Append("DATA_PAGAMENTO, ");
			sql.Append("IMPORTO_PAGAMENTO, ");
			sql.Append("OPERATOREULTMOD, ");
			sql.Append("DATAORAULTMOD ");
			sql.Append("FROM GVCTSANZIONI ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Returns an object GVCTSANZIONI selected by a primary key
		/// </summary>
		/// <param name="IDOBJ">The primary key of the object</param>
		/// <returns>Object of type GVCTSANZIONI</returns>
		public virtual GVCTSANZIONI GetByPrimaryKey(System.Int32 IDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateGetCommand(whereSql, null))
			{
				AddParameter(cmd, "IDOBJ", IDOBJ);
				GVCTSANZIONI[] tempArray = MapRecords(cmd);
				return tempArray.Length == 0 ? null : tempArray[0];
			}
		}


		/// <summary>
		/// Returns an object GVCTSANZIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_GIUDICE">The foreign key of the object</param>
		/// <returns>Object of type GVCTSANZIONI</returns>
		public virtual GVCTSANZIONI[] GetByIDOBJ_GIUDICE(System.Int32 iDOBJ_GIUDICE)
		{
			return MapRecords(CreateGetByIDOBJ_GIUDICECommand(iDOBJ_GIUDICE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTSANZIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_GIUDICE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_GIUDICEAsDataTable(System.Int32 iDOBJ_GIUDICE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_GIUDICECommand(iDOBJ_GIUDICE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_GIUDICE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_GIUDICECommand(System.Int32 iDOBJ_GIUDICE)
		{
			string whereSql = "IDOBJ_GIUDICE = " + _db.CreateSqlParameterName("IDOBJ_GIUDICE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_GIUDICE", iDOBJ_GIUDICE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTSANZIONI
		/// </summary>
		/// <param name="iDOBJ_GIUDICE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_GIUDICE(System.Int32 iDOBJ_GIUDICE)
		{
			return CreateDeleteByIDOBJ_GIUDICECommand(iDOBJ_GIUDICE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTSANZIONI
		/// </summary>
		/// <param name="iDOBJ_GIUDICE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_GIUDICECommand(System.Int32 iDOBJ_GIUDICE)
		{
			string whereSql = "IDOBJ_GIUDICE = " + _db.CreateSqlParameterName("IDOBJ_GIUDICE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_GIUDICE", iDOBJ_GIUDICE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTSANZIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_LEGGE_TRASGRESSIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTSANZIONI</returns>
		public virtual GVCTSANZIONI[] GetByIDOBJ_LEGGE_TRASGRESSIONE(System.Int32 iDOBJ_LEGGE_TRASGRESSIONE)
		{
			return MapRecords(CreateGetByIDOBJ_LEGGE_TRASGRESSIONECommand(iDOBJ_LEGGE_TRASGRESSIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTSANZIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_LEGGE_TRASGRESSIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_LEGGE_TRASGRESSIONEAsDataTable(System.Int32 iDOBJ_LEGGE_TRASGRESSIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_LEGGE_TRASGRESSIONECommand(iDOBJ_LEGGE_TRASGRESSIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_LEGGE_TRASGRESSIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_LEGGE_TRASGRESSIONECommand(System.Int32 iDOBJ_LEGGE_TRASGRESSIONE)
		{
			string whereSql = "IDOBJ_LEGGE_TRASGRESSIONE = " + _db.CreateSqlParameterName("IDOBJ_LEGGE_TRASGRESSIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_LEGGE_TRASGRESSIONE", iDOBJ_LEGGE_TRASGRESSIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTSANZIONI
		/// </summary>
		/// <param name="iDOBJ_LEGGE_TRASGRESSIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_LEGGE_TRASGRESSIONE(System.Int32 iDOBJ_LEGGE_TRASGRESSIONE)
		{
			return CreateDeleteByIDOBJ_LEGGE_TRASGRESSIONECommand(iDOBJ_LEGGE_TRASGRESSIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTSANZIONI
		/// </summary>
		/// <param name="iDOBJ_LEGGE_TRASGRESSIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_LEGGE_TRASGRESSIONECommand(System.Int32 iDOBJ_LEGGE_TRASGRESSIONE)
		{
			string whereSql = "IDOBJ_LEGGE_TRASGRESSIONE = " + _db.CreateSqlParameterName("IDOBJ_LEGGE_TRASGRESSIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_LEGGE_TRASGRESSIONE", iDOBJ_LEGGE_TRASGRESSIONE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTSANZIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_TRASGRESSIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTSANZIONI</returns>
		public virtual GVCTSANZIONI[] GetByIDOBJ_TIPO_TRASGRESSIONE(System.Int32 iDOBJ_TIPO_TRASGRESSIONE)
		{
			return MapRecords(CreateGetByIDOBJ_TIPO_TRASGRESSIONECommand(iDOBJ_TIPO_TRASGRESSIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTSANZIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_TRASGRESSIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_TIPO_TRASGRESSIONEAsDataTable(System.Int32 iDOBJ_TIPO_TRASGRESSIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_TIPO_TRASGRESSIONECommand(iDOBJ_TIPO_TRASGRESSIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_TRASGRESSIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_TIPO_TRASGRESSIONECommand(System.Int32 iDOBJ_TIPO_TRASGRESSIONE)
		{
			string whereSql = "IDOBJ_TIPO_TRASGRESSIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_TRASGRESSIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_TIPO_TRASGRESSIONE", iDOBJ_TIPO_TRASGRESSIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTSANZIONI
		/// </summary>
		/// <param name="iDOBJ_TIPO_TRASGRESSIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_TIPO_TRASGRESSIONE(System.Int32 iDOBJ_TIPO_TRASGRESSIONE)
		{
			return CreateDeleteByIDOBJ_TIPO_TRASGRESSIONECommand(iDOBJ_TIPO_TRASGRESSIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTSANZIONI
		/// </summary>
		/// <param name="iDOBJ_TIPO_TRASGRESSIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_TIPO_TRASGRESSIONECommand(System.Int32 iDOBJ_TIPO_TRASGRESSIONE)
		{
			string whereSql = "IDOBJ_TIPO_TRASGRESSIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_TRASGRESSIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_TIPO_TRASGRESSIONE", iDOBJ_TIPO_TRASGRESSIONE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTSANZIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key of the object</param>
		/// <returns>Object of type GVCTSANZIONI</returns>
		public virtual GVCTSANZIONI[] GetByIDOBJ_REGISTRO(System.Int32 iDOBJ_REGISTRO)
		{
			return MapRecords(CreateGetByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTSANZIONI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_REGISTROAsDataTable(System.Int32 iDOBJ_REGISTRO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_REGISTROCommand(System.Int32 iDOBJ_REGISTRO)
		{
			string whereSql = "IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_REGISTRO", iDOBJ_REGISTRO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTSANZIONI
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_REGISTRO(System.Int32 iDOBJ_REGISTRO)
		{
			return CreateDeleteByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTSANZIONI
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_REGISTROCommand(System.Int32 iDOBJ_REGISTRO)
		{
			string whereSql = "IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_REGISTRO", iDOBJ_REGISTRO);
			return cmd;
		}

		/// <summary>
		/// Inserts in the Database an object GVCTSANZIONI
		/// </summary>
		/// <param name="valore">The object to insert</param>
		public virtual void Insert(GVCTSANZIONI valore)
		{
			System.Int32 id = -1;
			System.String sqlStr;

			sqlStr = "SELECT GVCTSANZIONI_SEQ.NEXTVAL FROM DUAL";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				id = Convert.ToInt32(cmd.ExecuteScalar());
			}

			sqlStr = "INSERT INTO GVCTSANZIONI (" +
			"IDOBJ, " +
			"DATA_RILIEVO_INFRAZIONE, " +
			"IDOBJ_TIPO_TRASGRESSIONE, " +
			"IDOBJ_REGISTRO, " +
			"IDOBJ_LEGGE_TRASGRESSIONE, " +
			"DATA_INFRAZIONE, " +
			"DATA_NOTIFICA_INFRAZIONE, " +
			"DATA_RACCOMANDATA, " +
			"DATA_SCADENZA_PAGAMENTO, " +
			"IMPORTO_SANZIONE, " +
			"NUMERO_RECIDIVA, " +
			"NOTE, " +
			"DATA_PAG_OBLAZIONE, " +
			"IMPORTO_OBLAZIONE, " +
			"DATA_SCRITTI_DIFENSIVI, " +
			"DATA_AUDIZIONE, " +
			"NOTE_CONTRADDITTORIO, " +
			"NUMERO_ORDINANZA, " +
			"DATA_ORDINANZA, " +
			"IMPORTO_ORDINANZA, " +
			"DATA_NOTIFICA_ORDINANZA, " +
			"DATA_RACCOMANDATA_ORDINANZA, " +
			"DATA_SCADENZA_PAG_ORDINANZA, " +
			"NUMERO_ARCHIVIAZIONE, " +
			"DATA_ARCHIVIAZIONE, " +
			"NOTE_INGIUNZIONE, " +
			"DATA_RICORSO, " +
			"IDOBJ_GIUDICE, " +
			"DATA_SENTENZA_RICORSO, " +
			"DATA_DEPOSITO_RICORSO, " +
			"ESITO_RICORSO, " +
			"DATA_PAGAMENTO, " +
			"IMPORTO_PAGAMENTO, " +
			"OPERATOREULTMOD, " +
			"DATAORAULTMOD) " +
			"VALUES (" + id.ToString() + ", " +
			_db.CreateSqlParameterName("DATA_RILIEVO_INFRAZIONE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_TIPO_TRASGRESSIONE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_REGISTRO") + ", " +
			_db.CreateSqlParameterName("IDOBJ_LEGGE_TRASGRESSIONE") + ", " +
			_db.CreateSqlParameterName("DATA_INFRAZIONE") + ", " +
			_db.CreateSqlParameterName("DATA_NOTIFICA_INFRAZIONE") + ", " +
			_db.CreateSqlParameterName("DATA_RACCOMANDATA") + ", " +
			_db.CreateSqlParameterName("DATA_SCADENZA_PAGAMENTO") + ", " +
			_db.CreateSqlParameterName("IMPORTO_SANZIONE") + ", " +
			_db.CreateSqlParameterName("NUMERO_RECIDIVA") + ", " +
			_db.CreateSqlParameterName("NOTE") + ", " +
			_db.CreateSqlParameterName("DATA_PAG_OBLAZIONE") + ", " +
			_db.CreateSqlParameterName("IMPORTO_OBLAZIONE") + ", " +
			_db.CreateSqlParameterName("DATA_SCRITTI_DIFENSIVI") + ", " +
			_db.CreateSqlParameterName("DATA_AUDIZIONE") + ", " +
			_db.CreateSqlParameterName("NOTE_CONTRADDITTORIO") + ", " +
			_db.CreateSqlParameterName("NUMERO_ORDINANZA") + ", " +
			_db.CreateSqlParameterName("DATA_ORDINANZA") + ", " +
			_db.CreateSqlParameterName("IMPORTO_ORDINANZA") + ", " +
			_db.CreateSqlParameterName("DATA_NOTIFICA_ORDINANZA") + ", " +
			_db.CreateSqlParameterName("DATA_RACCOMANDATA_ORDINANZA") + ", " +
			_db.CreateSqlParameterName("DATA_SCADENZA_PAG_ORDINANZA") + ", " +
			_db.CreateSqlParameterName("NUMERO_ARCHIVIAZIONE") + ", " +
			_db.CreateSqlParameterName("DATA_ARCHIVIAZIONE") + ", " +
			_db.CreateSqlParameterName("NOTE_INGIUNZIONE") + ", " +
			_db.CreateSqlParameterName("DATA_RICORSO") + ", " +
			_db.CreateSqlParameterName("IDOBJ_GIUDICE") + ", " +
			_db.CreateSqlParameterName("DATA_SENTENZA_RICORSO") + ", " +
			_db.CreateSqlParameterName("DATA_DEPOSITO_RICORSO") + ", " +
			_db.CreateSqlParameterName("ESITO_RICORSO") + ", " +
			_db.CreateSqlParameterName("DATA_PAGAMENTO") + ", " +
			_db.CreateSqlParameterName("IMPORTO_PAGAMENTO") + ", " +
			_db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
			_db.CreateSqlParameterName("DATAORAULTMOD") + ")";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "DATA_RILIEVO_INFRAZIONE", valore.DATA_RILIEVO_INFRAZIONE);
				AddParameter(cmd, "IDOBJ_TIPO_TRASGRESSIONE", valore.IDOBJ_TIPO_TRASGRESSIONE);
				AddParameter(cmd, "IDOBJ_REGISTRO", valore.IDOBJ_REGISTRO);
				AddParameter(cmd, "IDOBJ_LEGGE_TRASGRESSIONE", valore.IsIDOBJ_LEGGE_TRASGRESSIONENull ? DBNull.Value : (object)valore.IDOBJ_LEGGE_TRASGRESSIONE);
				AddParameter(cmd, "DATA_INFRAZIONE", valore.IsDATA_INFRAZIONENull ? DBNull.Value : (object)valore.DATA_INFRAZIONE);
				AddParameter(cmd, "DATA_NOTIFICA_INFRAZIONE", valore.IsDATA_NOTIFICA_INFRAZIONENull ? DBNull.Value : (object)valore.DATA_NOTIFICA_INFRAZIONE);
				AddParameter(cmd, "DATA_RACCOMANDATA", valore.IsDATA_RACCOMANDATANull ? DBNull.Value : (object)valore.DATA_RACCOMANDATA);
				AddParameter(cmd, "DATA_SCADENZA_PAGAMENTO", valore.IsDATA_SCADENZA_PAGAMENTONull ? DBNull.Value : (object)valore.DATA_SCADENZA_PAGAMENTO);
				AddParameter(cmd, "IMPORTO_SANZIONE", valore.IsIMPORTO_SANZIONENull ? DBNull.Value : (object)valore.IMPORTO_SANZIONE);
				AddParameter(cmd, "NUMERO_RECIDIVA", valore.IsNUMERO_RECIDIVANull ? DBNull.Value : (object)valore.NUMERO_RECIDIVA);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "DATA_PAG_OBLAZIONE", valore.IsDATA_PAG_OBLAZIONENull ? DBNull.Value : (object)valore.DATA_PAG_OBLAZIONE);
				AddParameter(cmd, "IMPORTO_OBLAZIONE", valore.IsIMPORTO_OBLAZIONENull ? DBNull.Value : (object)valore.IMPORTO_OBLAZIONE);
				AddParameter(cmd, "DATA_SCRITTI_DIFENSIVI", valore.IsDATA_SCRITTI_DIFENSIVINull ? DBNull.Value : (object)valore.DATA_SCRITTI_DIFENSIVI);
				AddParameter(cmd, "DATA_AUDIZIONE", valore.IsDATA_AUDIZIONENull ? DBNull.Value : (object)valore.DATA_AUDIZIONE);
				AddParameter(cmd, "NOTE_CONTRADDITTORIO", valore.IsNOTE_CONTRADDITTORIONull ? DBNull.Value : (object)valore.NOTE_CONTRADDITTORIO);
				AddParameter(cmd, "NUMERO_ORDINANZA", valore.IsNUMERO_ORDINANZANull ? DBNull.Value : (object)valore.NUMERO_ORDINANZA);
				AddParameter(cmd, "DATA_ORDINANZA", valore.IsDATA_ORDINANZANull ? DBNull.Value : (object)valore.DATA_ORDINANZA);
				AddParameter(cmd, "IMPORTO_ORDINANZA", valore.IsIMPORTO_ORDINANZANull ? DBNull.Value : (object)valore.IMPORTO_ORDINANZA);
				AddParameter(cmd, "DATA_NOTIFICA_ORDINANZA", valore.IsDATA_NOTIFICA_ORDINANZANull ? DBNull.Value : (object)valore.DATA_NOTIFICA_ORDINANZA);
				AddParameter(cmd, "DATA_RACCOMANDATA_ORDINANZA", valore.IsDATA_RACCOMANDATA_ORDINANZANull ? DBNull.Value : (object)valore.DATA_RACCOMANDATA_ORDINANZA);
				AddParameter(cmd, "DATA_SCADENZA_PAG_ORDINANZA", valore.IsDATA_SCADENZA_PAG_ORDINANZANull ? DBNull.Value : (object)valore.DATA_SCADENZA_PAG_ORDINANZA);
				AddParameter(cmd, "NUMERO_ARCHIVIAZIONE", valore.IsNUMERO_ARCHIVIAZIONENull ? DBNull.Value : (object)valore.NUMERO_ARCHIVIAZIONE);
				AddParameter(cmd, "DATA_ARCHIVIAZIONE", valore.IsDATA_ARCHIVIAZIONENull ? DBNull.Value : (object)valore.DATA_ARCHIVIAZIONE);
				AddParameter(cmd, "NOTE_INGIUNZIONE", valore.IsNOTE_INGIUNZIONENull ? DBNull.Value : (object)valore.NOTE_INGIUNZIONE);
				AddParameter(cmd, "DATA_RICORSO", valore.IsDATA_RICORSONull ? DBNull.Value : (object)valore.DATA_RICORSO);
				AddParameter(cmd, "IDOBJ_GIUDICE", valore.IsIDOBJ_GIUDICENull ? DBNull.Value : (object)valore.IDOBJ_GIUDICE);
				AddParameter(cmd, "DATA_SENTENZA_RICORSO", valore.IsDATA_SENTENZA_RICORSONull ? DBNull.Value : (object)valore.DATA_SENTENZA_RICORSO);
				AddParameter(cmd, "DATA_DEPOSITO_RICORSO", valore.IsDATA_DEPOSITO_RICORSONull ? DBNull.Value : (object)valore.DATA_DEPOSITO_RICORSO);
				AddParameter(cmd, "ESITO_RICORSO", valore.IsESITO_RICORSONull ? DBNull.Value : (object)valore.ESITO_RICORSO);
				AddParameter(cmd, "DATA_PAGAMENTO", valore.IsDATA_PAGAMENTONull ? DBNull.Value : (object)valore.DATA_PAGAMENTO);
				AddParameter(cmd, "IMPORTO_PAGAMENTO", valore.IsIMPORTO_PAGAMENTONull ? DBNull.Value : (object)valore.IMPORTO_PAGAMENTO);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				cmd.ExecuteScalar();
				valore.IDOBJ = id;
			}
		}

		/// <summary>
		/// Updates in the Database an object GVCTSANZIONI
		/// </summary>
		/// <param name="valore">The object to update</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool Update(GVCTSANZIONI valore)
		{
			System.String sqlStr = "UPDATE GVCTSANZIONI SET " +
				"DATA_RILIEVO_INFRAZIONE = " + _db.CreateSqlParameterName("DATA_RILIEVO_INFRAZIONE") + ", " +
				"IDOBJ_TIPO_TRASGRESSIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_TRASGRESSIONE") + ", " +
				"IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO") + ", " +
				"IDOBJ_LEGGE_TRASGRESSIONE = " + _db.CreateSqlParameterName("IDOBJ_LEGGE_TRASGRESSIONE") + ", " +
				"DATA_INFRAZIONE = " + _db.CreateSqlParameterName("DATA_INFRAZIONE") + ", " +
				"DATA_NOTIFICA_INFRAZIONE = " + _db.CreateSqlParameterName("DATA_NOTIFICA_INFRAZIONE") + ", " +
				"DATA_RACCOMANDATA = " + _db.CreateSqlParameterName("DATA_RACCOMANDATA") + ", " +
				"DATA_SCADENZA_PAGAMENTO = " + _db.CreateSqlParameterName("DATA_SCADENZA_PAGAMENTO") + ", " +
				"IMPORTO_SANZIONE = " + _db.CreateSqlParameterName("IMPORTO_SANZIONE") + ", " +
				"NUMERO_RECIDIVA = " + _db.CreateSqlParameterName("NUMERO_RECIDIVA") + ", " +
				"NOTE = " + _db.CreateSqlParameterName("NOTE") + ", " +
				"DATA_PAG_OBLAZIONE = " + _db.CreateSqlParameterName("DATA_PAG_OBLAZIONE") + ", " +
				"IMPORTO_OBLAZIONE = " + _db.CreateSqlParameterName("IMPORTO_OBLAZIONE") + ", " +
				"DATA_SCRITTI_DIFENSIVI = " + _db.CreateSqlParameterName("DATA_SCRITTI_DIFENSIVI") + ", " +
				"DATA_AUDIZIONE = " + _db.CreateSqlParameterName("DATA_AUDIZIONE") + ", " +
				"NOTE_CONTRADDITTORIO = " + _db.CreateSqlParameterName("NOTE_CONTRADDITTORIO") + ", " +
				"NUMERO_ORDINANZA = " + _db.CreateSqlParameterName("NUMERO_ORDINANZA") + ", " +
				"DATA_ORDINANZA = " + _db.CreateSqlParameterName("DATA_ORDINANZA") + ", " +
				"IMPORTO_ORDINANZA = " + _db.CreateSqlParameterName("IMPORTO_ORDINANZA") + ", " +
				"DATA_NOTIFICA_ORDINANZA = " + _db.CreateSqlParameterName("DATA_NOTIFICA_ORDINANZA") + ", " +
				"DATA_RACCOMANDATA_ORDINANZA = " + _db.CreateSqlParameterName("DATA_RACCOMANDATA_ORDINANZA") + ", " +
				"DATA_SCADENZA_PAG_ORDINANZA = " + _db.CreateSqlParameterName("DATA_SCADENZA_PAG_ORDINANZA") + ", " +
				"NUMERO_ARCHIVIAZIONE = " + _db.CreateSqlParameterName("NUMERO_ARCHIVIAZIONE") + ", " +
				"DATA_ARCHIVIAZIONE = " + _db.CreateSqlParameterName("DATA_ARCHIVIAZIONE") + ", " +
				"NOTE_INGIUNZIONE = " + _db.CreateSqlParameterName("NOTE_INGIUNZIONE") + ", " +
				"DATA_RICORSO = " + _db.CreateSqlParameterName("DATA_RICORSO") + ", " +
				"IDOBJ_GIUDICE = " + _db.CreateSqlParameterName("IDOBJ_GIUDICE") + ", " +
				"DATA_SENTENZA_RICORSO = " + _db.CreateSqlParameterName("DATA_SENTENZA_RICORSO") + ", " +
				"DATA_DEPOSITO_RICORSO = " + _db.CreateSqlParameterName("DATA_DEPOSITO_RICORSO") + ", " +
				"ESITO_RICORSO = " + _db.CreateSqlParameterName("ESITO_RICORSO") + ", " +
				"DATA_PAGAMENTO = " + _db.CreateSqlParameterName("DATA_PAGAMENTO") + ", " +
				"IMPORTO_PAGAMENTO = " + _db.CreateSqlParameterName("IMPORTO_PAGAMENTO") + ", " +
				"OPERATOREULTMOD = " + _db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
				"DATAORAULTMOD = " + _db.CreateSqlParameterName("DATAORAULTMOD") +
				" WHERE " +
				"IDOBJ = " + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ", valore.IDOBJ);
				AddParameter(cmd, "DATA_RILIEVO_INFRAZIONE", valore.DATA_RILIEVO_INFRAZIONE);
				AddParameter(cmd, "IDOBJ_TIPO_TRASGRESSIONE", valore.IDOBJ_TIPO_TRASGRESSIONE);
				AddParameter(cmd, "IDOBJ_REGISTRO", valore.IDOBJ_REGISTRO);
				AddParameter(cmd, "IDOBJ_LEGGE_TRASGRESSIONE", valore.IsIDOBJ_LEGGE_TRASGRESSIONENull ? DBNull.Value : (object)valore.IDOBJ_LEGGE_TRASGRESSIONE);
				AddParameter(cmd, "DATA_INFRAZIONE", valore.IsDATA_INFRAZIONENull ? DBNull.Value : (object)valore.DATA_INFRAZIONE);
				AddParameter(cmd, "DATA_NOTIFICA_INFRAZIONE", valore.IsDATA_NOTIFICA_INFRAZIONENull ? DBNull.Value : (object)valore.DATA_NOTIFICA_INFRAZIONE);
				AddParameter(cmd, "DATA_RACCOMANDATA", valore.IsDATA_RACCOMANDATANull ? DBNull.Value : (object)valore.DATA_RACCOMANDATA);
				AddParameter(cmd, "DATA_SCADENZA_PAGAMENTO", valore.IsDATA_SCADENZA_PAGAMENTONull ? DBNull.Value : (object)valore.DATA_SCADENZA_PAGAMENTO);
				AddParameter(cmd, "IMPORTO_SANZIONE", valore.IsIMPORTO_SANZIONENull ? DBNull.Value : (object)valore.IMPORTO_SANZIONE);
				AddParameter(cmd, "NUMERO_RECIDIVA", valore.IsNUMERO_RECIDIVANull ? DBNull.Value : (object)valore.NUMERO_RECIDIVA);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "DATA_PAG_OBLAZIONE", valore.IsDATA_PAG_OBLAZIONENull ? DBNull.Value : (object)valore.DATA_PAG_OBLAZIONE);
				AddParameter(cmd, "IMPORTO_OBLAZIONE", valore.IsIMPORTO_OBLAZIONENull ? DBNull.Value : (object)valore.IMPORTO_OBLAZIONE);
				AddParameter(cmd, "DATA_SCRITTI_DIFENSIVI", valore.IsDATA_SCRITTI_DIFENSIVINull ? DBNull.Value : (object)valore.DATA_SCRITTI_DIFENSIVI);
				AddParameter(cmd, "DATA_AUDIZIONE", valore.IsDATA_AUDIZIONENull ? DBNull.Value : (object)valore.DATA_AUDIZIONE);
				AddParameter(cmd, "NOTE_CONTRADDITTORIO", valore.IsNOTE_CONTRADDITTORIONull ? DBNull.Value : (object)valore.NOTE_CONTRADDITTORIO);
				AddParameter(cmd, "NUMERO_ORDINANZA", valore.IsNUMERO_ORDINANZANull ? DBNull.Value : (object)valore.NUMERO_ORDINANZA);
				AddParameter(cmd, "DATA_ORDINANZA", valore.IsDATA_ORDINANZANull ? DBNull.Value : (object)valore.DATA_ORDINANZA);
				AddParameter(cmd, "IMPORTO_ORDINANZA", valore.IsIMPORTO_ORDINANZANull ? DBNull.Value : (object)valore.IMPORTO_ORDINANZA);
				AddParameter(cmd, "DATA_NOTIFICA_ORDINANZA", valore.IsDATA_NOTIFICA_ORDINANZANull ? DBNull.Value : (object)valore.DATA_NOTIFICA_ORDINANZA);
				AddParameter(cmd, "DATA_RACCOMANDATA_ORDINANZA", valore.IsDATA_RACCOMANDATA_ORDINANZANull ? DBNull.Value : (object)valore.DATA_RACCOMANDATA_ORDINANZA);
				AddParameter(cmd, "DATA_SCADENZA_PAG_ORDINANZA", valore.IsDATA_SCADENZA_PAG_ORDINANZANull ? DBNull.Value : (object)valore.DATA_SCADENZA_PAG_ORDINANZA);
				AddParameter(cmd, "NUMERO_ARCHIVIAZIONE", valore.IsNUMERO_ARCHIVIAZIONENull ? DBNull.Value : (object)valore.NUMERO_ARCHIVIAZIONE);
				AddParameter(cmd, "DATA_ARCHIVIAZIONE", valore.IsDATA_ARCHIVIAZIONENull ? DBNull.Value : (object)valore.DATA_ARCHIVIAZIONE);
				AddParameter(cmd, "NOTE_INGIUNZIONE", valore.IsNOTE_INGIUNZIONENull ? DBNull.Value : (object)valore.NOTE_INGIUNZIONE);
				AddParameter(cmd, "DATA_RICORSO", valore.IsDATA_RICORSONull ? DBNull.Value : (object)valore.DATA_RICORSO);
				AddParameter(cmd, "IDOBJ_GIUDICE", valore.IsIDOBJ_GIUDICENull ? DBNull.Value : (object)valore.IDOBJ_GIUDICE);
				AddParameter(cmd, "DATA_SENTENZA_RICORSO", valore.IsDATA_SENTENZA_RICORSONull ? DBNull.Value : (object)valore.DATA_SENTENZA_RICORSO);
				AddParameter(cmd, "DATA_DEPOSITO_RICORSO", valore.IsDATA_DEPOSITO_RICORSONull ? DBNull.Value : (object)valore.DATA_DEPOSITO_RICORSO);
				AddParameter(cmd, "ESITO_RICORSO", valore.IsESITO_RICORSONull ? DBNull.Value : (object)valore.ESITO_RICORSO);
				AddParameter(cmd, "DATA_PAGAMENTO", valore.IsDATA_PAGAMENTONull ? DBNull.Value : (object)valore.DATA_PAGAMENTO);
				AddParameter(cmd, "IMPORTO_PAGAMENTO", valore.IsIMPORTO_PAGAMENTONull ? DBNull.Value : (object)valore.IMPORTO_PAGAMENTO);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				return cmd.ExecuteNonQuery() != 0;
			}
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTSANZIONI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTSANZIONI</param>
		public void Update(DataTable table)
		{
			Update(table, true);
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTSANZIONI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTSANZIONI</param>
		/// <param name="acceptChanges">true to accept the changes, otherwise false</param>
		public virtual void Update(DataTable table, bool acceptChanges)
		{
			DataRowCollection rows = table.Rows;
			for(int i = rows.Count - 1; i >= 0; i--)
			{
				DataRow row = rows[i];
				switch(row.RowState)
				{
					case DataRowState.Added:
						Insert(MapRow(row));
						if(acceptChanges)
							row.AcceptChanges();
						break;

					case DataRowState.Deleted:
						row.RejectChanges();
						try
						{
							DeleteByPrimaryKey((System.Int32)row["IDOBJ"]);
						}
						finally
						{
							row.Delete();
						}
						if(acceptChanges)
							row.AcceptChanges();
						break;

				case DataRowState.Modified:
					Update(MapRow(row));
					if(acceptChanges)
						row.AcceptChanges();
					break;
				}
			}
		}

		/// <summary>
		/// Deletes from the Database an object GVCTSANZIONI
		/// </summary>
		/// <param name="valore">The object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public bool Delete(GVCTSANZIONI valore)
		{
			return DeleteByPrimaryKey(valore.IDOBJ);
		}

		/// <summary>
		/// Deletes from the Database an object GVCTSANZIONI
		/// </summary>
		/// <param name="iDOBJ">The primary key of the object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool DeleteByPrimaryKey(System.Int32 iDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateDeleteCommand(whereSql))
			{
				AddParameter(cmd, "IDOBJ" , iDOBJ);
				return cmd.ExecuteNonQuery() > 0;
			}
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTSANZIONI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>The number of the deleted objects</returns>
		public int Delete(System.String whereSql)
		{
			return CreateDeleteCommand(whereSql).ExecuteNonQuery();
		}

		/// <summary>
		/// Returns an IDbCommand to delete the objects GVCTSANZIONI selected by 
		/// a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteCommand(string whereSql)
		{
			StringBuilder sql = new StringBuilder("DELETE FROM GVCTSANZIONI");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format(" WHERE {0}", whereSql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Deletes all the objects GVCTSANZIONI
		/// </summary>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteAll()
		{
			return Delete("");
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTSANZIONI
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCTSANZIONI</returns>
		protected GVCTSANZIONI[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTSANZIONI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCTSANZIONI</returns>
		protected GVCTSANZIONI[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCTSANZIONI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCTSANZIONI</returns>
		protected virtual GVCTSANZIONI[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int iDOBJColumnIndex = reader.GetOrdinal("IDOBJ");
			int dATA_RILIEVO_INFRAZIONEColumnIndex = reader.GetOrdinal("DATA_RILIEVO_INFRAZIONE");
			int iDOBJ_TIPO_TRASGRESSIONEColumnIndex = reader.GetOrdinal("IDOBJ_TIPO_TRASGRESSIONE");
			int iDOBJ_REGISTROColumnIndex = reader.GetOrdinal("IDOBJ_REGISTRO");
			int iDOBJ_LEGGE_TRASGRESSIONEColumnIndex = reader.GetOrdinal("IDOBJ_LEGGE_TRASGRESSIONE");
			int dATA_INFRAZIONEColumnIndex = reader.GetOrdinal("DATA_INFRAZIONE");
			int dATA_NOTIFICA_INFRAZIONEColumnIndex = reader.GetOrdinal("DATA_NOTIFICA_INFRAZIONE");
			int dATA_RACCOMANDATAColumnIndex = reader.GetOrdinal("DATA_RACCOMANDATA");
			int dATA_SCADENZA_PAGAMENTOColumnIndex = reader.GetOrdinal("DATA_SCADENZA_PAGAMENTO");
			int iMPORTO_SANZIONEColumnIndex = reader.GetOrdinal("IMPORTO_SANZIONE");
			int nUMERO_RECIDIVAColumnIndex = reader.GetOrdinal("NUMERO_RECIDIVA");
			int nOTEColumnIndex = reader.GetOrdinal("NOTE");
			int dATA_PAG_OBLAZIONEColumnIndex = reader.GetOrdinal("DATA_PAG_OBLAZIONE");
			int iMPORTO_OBLAZIONEColumnIndex = reader.GetOrdinal("IMPORTO_OBLAZIONE");
			int dATA_SCRITTI_DIFENSIVIColumnIndex = reader.GetOrdinal("DATA_SCRITTI_DIFENSIVI");
			int dATA_AUDIZIONEColumnIndex = reader.GetOrdinal("DATA_AUDIZIONE");
			int nOTE_CONTRADDITTORIOColumnIndex = reader.GetOrdinal("NOTE_CONTRADDITTORIO");
			int nUMERO_ORDINANZAColumnIndex = reader.GetOrdinal("NUMERO_ORDINANZA");
			int dATA_ORDINANZAColumnIndex = reader.GetOrdinal("DATA_ORDINANZA");
			int iMPORTO_ORDINANZAColumnIndex = reader.GetOrdinal("IMPORTO_ORDINANZA");
			int dATA_NOTIFICA_ORDINANZAColumnIndex = reader.GetOrdinal("DATA_NOTIFICA_ORDINANZA");
			int dATA_RACCOMANDATA_ORDINANZAColumnIndex = reader.GetOrdinal("DATA_RACCOMANDATA_ORDINANZA");
			int dATA_SCADENZA_PAG_ORDINANZAColumnIndex = reader.GetOrdinal("DATA_SCADENZA_PAG_ORDINANZA");
			int nUMERO_ARCHIVIAZIONEColumnIndex = reader.GetOrdinal("NUMERO_ARCHIVIAZIONE");
			int dATA_ARCHIVIAZIONEColumnIndex = reader.GetOrdinal("DATA_ARCHIVIAZIONE");
			int nOTE_INGIUNZIONEColumnIndex = reader.GetOrdinal("NOTE_INGIUNZIONE");
			int dATA_RICORSOColumnIndex = reader.GetOrdinal("DATA_RICORSO");
			int iDOBJ_GIUDICEColumnIndex = reader.GetOrdinal("IDOBJ_GIUDICE");
			int dATA_SENTENZA_RICORSOColumnIndex = reader.GetOrdinal("DATA_SENTENZA_RICORSO");
			int dATA_DEPOSITO_RICORSOColumnIndex = reader.GetOrdinal("DATA_DEPOSITO_RICORSO");
			int eSITO_RICORSOColumnIndex = reader.GetOrdinal("ESITO_RICORSO");
			int dATA_PAGAMENTOColumnIndex = reader.GetOrdinal("DATA_PAGAMENTO");
			int iMPORTO_PAGAMENTOColumnIndex = reader.GetOrdinal("IMPORTO_PAGAMENTO");
			int oPERATOREULTMODColumnIndex = reader.GetOrdinal("OPERATOREULTMOD");
			int dATAORAULTMODColumnIndex = reader.GetOrdinal("DATAORAULTMOD");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCTSANZIONI record = new GVCTSANZIONI();
					recordList.Add(record);
					record.IDOBJ = Convert.ToInt32(reader.GetValue(iDOBJColumnIndex));
					record.DATA_RILIEVO_INFRAZIONE = Convert.ToDateTime(reader.GetValue(dATA_RILIEVO_INFRAZIONEColumnIndex));
					record.IDOBJ_TIPO_TRASGRESSIONE = Convert.ToInt32(reader.GetValue(iDOBJ_TIPO_TRASGRESSIONEColumnIndex));
					record.IDOBJ_REGISTRO = Convert.ToInt32(reader.GetValue(iDOBJ_REGISTROColumnIndex));
					if(!reader.IsDBNull(iDOBJ_LEGGE_TRASGRESSIONEColumnIndex))
						record.IDOBJ_LEGGE_TRASGRESSIONE = Convert.ToInt32(reader.GetValue(iDOBJ_LEGGE_TRASGRESSIONEColumnIndex));
					if(!reader.IsDBNull(dATA_INFRAZIONEColumnIndex))
						record.DATA_INFRAZIONE = Convert.ToDateTime(reader.GetValue(dATA_INFRAZIONEColumnIndex));
					if(!reader.IsDBNull(dATA_NOTIFICA_INFRAZIONEColumnIndex))
						record.DATA_NOTIFICA_INFRAZIONE = Convert.ToDateTime(reader.GetValue(dATA_NOTIFICA_INFRAZIONEColumnIndex));
					if(!reader.IsDBNull(dATA_RACCOMANDATAColumnIndex))
						record.DATA_RACCOMANDATA = Convert.ToDateTime(reader.GetValue(dATA_RACCOMANDATAColumnIndex));
					if(!reader.IsDBNull(dATA_SCADENZA_PAGAMENTOColumnIndex))
						record.DATA_SCADENZA_PAGAMENTO = Convert.ToDateTime(reader.GetValue(dATA_SCADENZA_PAGAMENTOColumnIndex));
					if(!reader.IsDBNull(iMPORTO_SANZIONEColumnIndex))
						record.IMPORTO_SANZIONE = Convert.ToDouble(reader.GetValue(iMPORTO_SANZIONEColumnIndex));
					if(!reader.IsDBNull(nUMERO_RECIDIVAColumnIndex))
						record.NUMERO_RECIDIVA = Convert.ToString(reader.GetValue(nUMERO_RECIDIVAColumnIndex));
					if(!reader.IsDBNull(nOTEColumnIndex))
						record.NOTE = Convert.ToString(reader.GetValue(nOTEColumnIndex));
					if(!reader.IsDBNull(dATA_PAG_OBLAZIONEColumnIndex))
						record.DATA_PAG_OBLAZIONE = Convert.ToDateTime(reader.GetValue(dATA_PAG_OBLAZIONEColumnIndex));
					if(!reader.IsDBNull(iMPORTO_OBLAZIONEColumnIndex))
						record.IMPORTO_OBLAZIONE = Convert.ToDouble(reader.GetValue(iMPORTO_OBLAZIONEColumnIndex));
					if(!reader.IsDBNull(dATA_SCRITTI_DIFENSIVIColumnIndex))
						record.DATA_SCRITTI_DIFENSIVI = Convert.ToDateTime(reader.GetValue(dATA_SCRITTI_DIFENSIVIColumnIndex));
					if(!reader.IsDBNull(dATA_AUDIZIONEColumnIndex))
						record.DATA_AUDIZIONE = Convert.ToDateTime(reader.GetValue(dATA_AUDIZIONEColumnIndex));
					if(!reader.IsDBNull(nOTE_CONTRADDITTORIOColumnIndex))
						record.NOTE_CONTRADDITTORIO = Convert.ToString(reader.GetValue(nOTE_CONTRADDITTORIOColumnIndex));
					if(!reader.IsDBNull(nUMERO_ORDINANZAColumnIndex))
						record.NUMERO_ORDINANZA = Convert.ToString(reader.GetValue(nUMERO_ORDINANZAColumnIndex));
					if(!reader.IsDBNull(dATA_ORDINANZAColumnIndex))
						record.DATA_ORDINANZA = Convert.ToDateTime(reader.GetValue(dATA_ORDINANZAColumnIndex));
					if(!reader.IsDBNull(iMPORTO_ORDINANZAColumnIndex))
						record.IMPORTO_ORDINANZA = Convert.ToDouble(reader.GetValue(iMPORTO_ORDINANZAColumnIndex));
					if(!reader.IsDBNull(dATA_NOTIFICA_ORDINANZAColumnIndex))
						record.DATA_NOTIFICA_ORDINANZA = Convert.ToDateTime(reader.GetValue(dATA_NOTIFICA_ORDINANZAColumnIndex));
					if(!reader.IsDBNull(dATA_RACCOMANDATA_ORDINANZAColumnIndex))
						record.DATA_RACCOMANDATA_ORDINANZA = Convert.ToDateTime(reader.GetValue(dATA_RACCOMANDATA_ORDINANZAColumnIndex));
					if(!reader.IsDBNull(dATA_SCADENZA_PAG_ORDINANZAColumnIndex))
						record.DATA_SCADENZA_PAG_ORDINANZA = Convert.ToDateTime(reader.GetValue(dATA_SCADENZA_PAG_ORDINANZAColumnIndex));
					if(!reader.IsDBNull(nUMERO_ARCHIVIAZIONEColumnIndex))
						record.NUMERO_ARCHIVIAZIONE = Convert.ToString(reader.GetValue(nUMERO_ARCHIVIAZIONEColumnIndex));
					if(!reader.IsDBNull(dATA_ARCHIVIAZIONEColumnIndex))
						record.DATA_ARCHIVIAZIONE = Convert.ToDateTime(reader.GetValue(dATA_ARCHIVIAZIONEColumnIndex));
					if(!reader.IsDBNull(nOTE_INGIUNZIONEColumnIndex))
						record.NOTE_INGIUNZIONE = Convert.ToString(reader.GetValue(nOTE_INGIUNZIONEColumnIndex));
					if(!reader.IsDBNull(dATA_RICORSOColumnIndex))
						record.DATA_RICORSO = Convert.ToDateTime(reader.GetValue(dATA_RICORSOColumnIndex));
					if(!reader.IsDBNull(iDOBJ_GIUDICEColumnIndex))
						record.IDOBJ_GIUDICE = Convert.ToInt32(reader.GetValue(iDOBJ_GIUDICEColumnIndex));
					if(!reader.IsDBNull(dATA_SENTENZA_RICORSOColumnIndex))
						record.DATA_SENTENZA_RICORSO = Convert.ToDateTime(reader.GetValue(dATA_SENTENZA_RICORSOColumnIndex));
					if(!reader.IsDBNull(dATA_DEPOSITO_RICORSOColumnIndex))
						record.DATA_DEPOSITO_RICORSO = Convert.ToDateTime(reader.GetValue(dATA_DEPOSITO_RICORSOColumnIndex));
					if(!reader.IsDBNull(eSITO_RICORSOColumnIndex))
						record.ESITO_RICORSO = Convert.ToString(reader.GetValue(eSITO_RICORSOColumnIndex));
					if(!reader.IsDBNull(dATA_PAGAMENTOColumnIndex))
						record.DATA_PAGAMENTO = Convert.ToDateTime(reader.GetValue(dATA_PAGAMENTOColumnIndex));
					if(!reader.IsDBNull(iMPORTO_PAGAMENTOColumnIndex))
						record.IMPORTO_PAGAMENTO = Convert.ToDouble(reader.GetValue(iMPORTO_PAGAMENTOColumnIndex));
					if(!reader.IsDBNull(oPERATOREULTMODColumnIndex))
						record.OPERATOREULTMOD = Convert.ToString(reader.GetValue(oPERATOREULTMODColumnIndex));
					if(!reader.IsDBNull(dATAORAULTMODColumnIndex))
						record.DATAORAULTMOD = Convert.ToDateTime(reader.GetValue(dATAORAULTMODColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCTSANZIONI[])(recordList.ToArray(typeof(GVCTSANZIONI)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCTSANZIONI</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCTSANZIONI</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTSANZIONI</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCTSANZIONI
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCTSANZIONI</returns>
		protected virtual GVCTSANZIONI MapRow(DataRow row)
		{
			GVCTSANZIONI mappedObject = new GVCTSANZIONI();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "IDOBJ"
			dataColumn = dataTable.Columns["IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ = (System.Int32)row[dataColumn];
			//Campo "DATA_RILIEVO_INFRAZIONE"
			dataColumn = dataTable.Columns["DATA_RILIEVO_INFRAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_RILIEVO_INFRAZIONE = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_TIPO_TRASGRESSIONE"
			dataColumn = dataTable.Columns["IDOBJ_TIPO_TRASGRESSIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_TIPO_TRASGRESSIONE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_REGISTRO"
			dataColumn = dataTable.Columns["IDOBJ_REGISTRO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_REGISTRO = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_LEGGE_TRASGRESSIONE"
			dataColumn = dataTable.Columns["IDOBJ_LEGGE_TRASGRESSIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_LEGGE_TRASGRESSIONE = (System.Int32)row[dataColumn];
			//Campo "DATA_INFRAZIONE"
			dataColumn = dataTable.Columns["DATA_INFRAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_INFRAZIONE = (System.DateTime)row[dataColumn];
			//Campo "DATA_NOTIFICA_INFRAZIONE"
			dataColumn = dataTable.Columns["DATA_NOTIFICA_INFRAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_NOTIFICA_INFRAZIONE = (System.DateTime)row[dataColumn];
			//Campo "DATA_RACCOMANDATA"
			dataColumn = dataTable.Columns["DATA_RACCOMANDATA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_RACCOMANDATA = (System.DateTime)row[dataColumn];
			//Campo "DATA_SCADENZA_PAGAMENTO"
			dataColumn = dataTable.Columns["DATA_SCADENZA_PAGAMENTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_SCADENZA_PAGAMENTO = (System.DateTime)row[dataColumn];
			//Campo "IMPORTO_SANZIONE"
			dataColumn = dataTable.Columns["IMPORTO_SANZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IMPORTO_SANZIONE = (System.Double)row[dataColumn];
			//Campo "NUMERO_RECIDIVA"
			dataColumn = dataTable.Columns["NUMERO_RECIDIVA"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_RECIDIVA = (System.String)row[dataColumn];
			//Campo "NOTE"
			dataColumn = dataTable.Columns["NOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.NOTE = (System.String)row[dataColumn];
			//Campo "DATA_PAG_OBLAZIONE"
			dataColumn = dataTable.Columns["DATA_PAG_OBLAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_PAG_OBLAZIONE = (System.DateTime)row[dataColumn];
			//Campo "IMPORTO_OBLAZIONE"
			dataColumn = dataTable.Columns["IMPORTO_OBLAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IMPORTO_OBLAZIONE = (System.Double)row[dataColumn];
			//Campo "DATA_SCRITTI_DIFENSIVI"
			dataColumn = dataTable.Columns["DATA_SCRITTI_DIFENSIVI"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_SCRITTI_DIFENSIVI = (System.DateTime)row[dataColumn];
			//Campo "DATA_AUDIZIONE"
			dataColumn = dataTable.Columns["DATA_AUDIZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_AUDIZIONE = (System.DateTime)row[dataColumn];
			//Campo "NOTE_CONTRADDITTORIO"
			dataColumn = dataTable.Columns["NOTE_CONTRADDITTORIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.NOTE_CONTRADDITTORIO = (System.String)row[dataColumn];
			//Campo "NUMERO_ORDINANZA"
			dataColumn = dataTable.Columns["NUMERO_ORDINANZA"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_ORDINANZA = (System.String)row[dataColumn];
			//Campo "DATA_ORDINANZA"
			dataColumn = dataTable.Columns["DATA_ORDINANZA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_ORDINANZA = (System.DateTime)row[dataColumn];
			//Campo "IMPORTO_ORDINANZA"
			dataColumn = dataTable.Columns["IMPORTO_ORDINANZA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IMPORTO_ORDINANZA = (System.Double)row[dataColumn];
			//Campo "DATA_NOTIFICA_ORDINANZA"
			dataColumn = dataTable.Columns["DATA_NOTIFICA_ORDINANZA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_NOTIFICA_ORDINANZA = (System.DateTime)row[dataColumn];
			//Campo "DATA_RACCOMANDATA_ORDINANZA"
			dataColumn = dataTable.Columns["DATA_RACCOMANDATA_ORDINANZA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_RACCOMANDATA_ORDINANZA = (System.DateTime)row[dataColumn];
			//Campo "DATA_SCADENZA_PAG_ORDINANZA"
			dataColumn = dataTable.Columns["DATA_SCADENZA_PAG_ORDINANZA"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_SCADENZA_PAG_ORDINANZA = (System.DateTime)row[dataColumn];
			//Campo "NUMERO_ARCHIVIAZIONE"
			dataColumn = dataTable.Columns["NUMERO_ARCHIVIAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.NUMERO_ARCHIVIAZIONE = (System.String)row[dataColumn];
			//Campo "DATA_ARCHIVIAZIONE"
			dataColumn = dataTable.Columns["DATA_ARCHIVIAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_ARCHIVIAZIONE = (System.DateTime)row[dataColumn];
			//Campo "NOTE_INGIUNZIONE"
			dataColumn = dataTable.Columns["NOTE_INGIUNZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.NOTE_INGIUNZIONE = (System.String)row[dataColumn];
			//Campo "DATA_RICORSO"
			dataColumn = dataTable.Columns["DATA_RICORSO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_RICORSO = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_GIUDICE"
			dataColumn = dataTable.Columns["IDOBJ_GIUDICE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_GIUDICE = (System.Int32)row[dataColumn];
			//Campo "DATA_SENTENZA_RICORSO"
			dataColumn = dataTable.Columns["DATA_SENTENZA_RICORSO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_SENTENZA_RICORSO = (System.DateTime)row[dataColumn];
			//Campo "DATA_DEPOSITO_RICORSO"
			dataColumn = dataTable.Columns["DATA_DEPOSITO_RICORSO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_DEPOSITO_RICORSO = (System.DateTime)row[dataColumn];
			//Campo "ESITO_RICORSO"
			dataColumn = dataTable.Columns["ESITO_RICORSO"];
			if(!row.IsNull(dataColumn))
				mappedObject.ESITO_RICORSO = (System.String)row[dataColumn];
			//Campo "DATA_PAGAMENTO"
			dataColumn = dataTable.Columns["DATA_PAGAMENTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_PAGAMENTO = (System.DateTime)row[dataColumn];
			//Campo "IMPORTO_PAGAMENTO"
			dataColumn = dataTable.Columns["IMPORTO_PAGAMENTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IMPORTO_PAGAMENTO = (System.Double)row[dataColumn];
			//Campo "OPERATOREULTMOD"
			dataColumn = dataTable.Columns["OPERATOREULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.OPERATOREULTMOD = (System.String)row[dataColumn];
			//Campo "DATAORAULTMOD"
			dataColumn = dataTable.Columns["DATAORAULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORAULTMOD = (System.DateTime)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCTSANZIONI
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCTSANZIONI";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = true;
			dataColumn.Unique = true;
			dataColumn.AutoIncrement = true;
			dataColumn = dataTable.Columns.Add("DATA_RILIEVO_INFRAZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_TIPO_TRASGRESSIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_REGISTRO", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_LEGGE_TRASGRESSIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_INFRAZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_NOTIFICA_INFRAZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_RACCOMANDATA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_SCADENZA_PAGAMENTO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IMPORTO_SANZIONE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_RECIDIVA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NOTE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_PAG_OBLAZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IMPORTO_OBLAZIONE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_SCRITTI_DIFENSIVI", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_AUDIZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NOTE_CONTRADDITTORIO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_ORDINANZA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_ORDINANZA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IMPORTO_ORDINANZA", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_NOTIFICA_ORDINANZA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_RACCOMANDATA_ORDINANZA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_SCADENZA_PAG_ORDINANZA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NUMERO_ARCHIVIAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_ARCHIVIAZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NOTE_INGIUNZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_RICORSO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_GIUDICE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_SENTENZA_RICORSO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_DEPOSITO_RICORSO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ESITO_RICORSO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_PAGAMENTO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IMPORTO_PAGAMENTO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("OPERATOREULTMOD", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORAULTMOD", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_RILIEVO_INFRAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_TIPO_TRASGRESSIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_REGISTRO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_LEGGE_TRASGRESSIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_INFRAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_NOTIFICA_INFRAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_RACCOMANDATA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_SCADENZA_PAGAMENTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IMPORTO_SANZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "NUMERO_RECIDIVA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "NOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_PAG_OBLAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IMPORTO_OBLAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "DATA_SCRITTI_DIFENSIVI":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_AUDIZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NOTE_CONTRADDITTORIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "NUMERO_ORDINANZA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_ORDINANZA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IMPORTO_ORDINANZA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "DATA_NOTIFICA_ORDINANZA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_RACCOMANDATA_ORDINANZA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_SCADENZA_PAG_ORDINANZA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NUMERO_ARCHIVIAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_ARCHIVIAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NOTE_INGIUNZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_RICORSO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_GIUDICE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_SENTENZA_RICORSO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_DEPOSITO_RICORSO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "ESITO_RICORSO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATA_PAGAMENTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IMPORTO_PAGAMENTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "OPERATOREULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORAULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
