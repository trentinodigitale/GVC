//
//Generated by gvc at 27/04/2009 11.14.32
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCTPROCEDIMENTI
	/// </summary>
	public partial class GVCTPROCEDIMENTICollection
	{
		/// <summary>
		/// Returns the Database Name of the field IDOBJ.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJColumnName = "IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_REGISTRO.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_REGISTROColumnName = "IDOBJ_REGISTRO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_TIPO_PROCEDIMENTO.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_TIPO_PROCEDIMENTOColumnName = "IDOBJ_TIPO_PROCEDIMENTO";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_TIPO_INIZIATIVA.
		///The field is mandatory.
		/// </summary>
		public const string IDOBJ_TIPO_INIZIATIVAColumnName = "IDOBJ_TIPO_INIZIATIVA";
		/// <summary>
		/// Returns the Database Name of the field DATA_INIZIO.
		/// </summary>
		public const string DATA_INIZIOColumnName = "DATA_INIZIO";
		/// <summary>
		/// Returns the Database Name of the field DATA_AVVISO.
		/// </summary>
		public const string DATA_AVVISOColumnName = "DATA_AVVISO";
		/// <summary>
		/// Returns the Database Name of the field TEMPI.
		/// </summary>
		public const string TEMPIColumnName = "TEMPI";
		/// <summary>
		/// Returns the Database Name of the field DATA_TEORICA_FINE.
		/// </summary>
		public const string DATA_TEORICA_FINEColumnName = "DATA_TEORICA_FINE";
		/// <summary>
		/// Returns the Database Name of the field MOTIVO_SOSPENSIONE.
		/// </summary>
		public const string MOTIVO_SOSPENSIONEColumnName = "MOTIVO_SOSPENSIONE";
		/// <summary>
		/// Returns the Database Name of the field GIORNI_SOSPENSIONE.
		/// </summary>
		public const string GIORNI_SOSPENSIONEColumnName = "GIORNI_SOSPENSIONE";
		/// <summary>
		/// Returns the Database Name of the field DATA_RIATTIVAZIONE.
		/// </summary>
		public const string DATA_RIATTIVAZIONEColumnName = "DATA_RIATTIVAZIONE";
		/// <summary>
		/// Returns the Database Name of the field DATA_TERMINE_FINE.
		/// </summary>
		public const string DATA_TERMINE_FINEColumnName = "DATA_TERMINE_FINE";
		/// <summary>
		/// Returns the Database Name of the field DATA_FINE.
		/// </summary>
		public const string DATA_FINEColumnName = "DATA_FINE";
		/// <summary>
		/// Returns the Database Name of the field NOTE.
		/// </summary>
		public const string NOTEColumnName = "NOTE";
		/// <summary>
		/// Returns the Database Name of the field OPERATOREULTMOD.
		/// </summary>
		public const string OPERATOREULTMODColumnName = "OPERATOREULTMOD";
		/// <summary>
		/// Returns the Database Name of the field DATAORAULTMOD.
		/// </summary>
		public const string DATAORAULTMODColumnName = "DATAORAULTMOD";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_TIPO_SOSPENSIONE.
		/// </summary>
		public const string IDOBJ_TIPO_SOSPENSIONEColumnName = "IDOBJ_TIPO_SOSPENSIONE";
		/// <summary>
		/// Returns the Database Name of the field IDOBJ_TIPO_CONCLUSIONE.
		/// </summary>
		public const string IDOBJ_TIPO_CONCLUSIONEColumnName = "IDOBJ_TIPO_CONCLUSIONE";
		/// <summary>
		/// Returns the Database Name of the field RESPONSABILE.
		/// </summary>
		public const string RESPONSABILEColumnName = "RESPONSABILE";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCTPROCEDIMENTICollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <returns>Array of objects GVCTPROCEDIMENTI</returns>
		public virtual GVCTPROCEDIMENTI[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <returns>DataTable of objects GVCTPROCEDIMENTI</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCTPROCEDIMENTI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCTPROCEDIMENTI</returns>
		public GVCTPROCEDIMENTI GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCTPROCEDIMENTI[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCTPROCEDIMENTI selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCTPROCEDIMENTI</returns>
		public GVCTPROCEDIMENTI[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCTPROCEDIMENTI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCTPROCEDIMENTI</returns>
		public virtual GVCTPROCEDIMENTI[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTPROCEDIMENTI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCTPROCEDIMENTI</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCTPROCEDIMENTI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTPROCEDIMENTI</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCTPROCEDIMENTI selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("IDOBJ, ");
			sql.Append("IDOBJ_REGISTRO, ");
			sql.Append("IDOBJ_TIPO_PROCEDIMENTO, ");
			sql.Append("IDOBJ_TIPO_INIZIATIVA, ");
			sql.Append("DATA_INIZIO, ");
			sql.Append("DATA_AVVISO, ");
			sql.Append("TEMPI, ");
			sql.Append("DATA_TEORICA_FINE, ");
			sql.Append("MOTIVO_SOSPENSIONE, ");
			sql.Append("GIORNI_SOSPENSIONE, ");
			sql.Append("DATA_RIATTIVAZIONE, ");
			sql.Append("DATA_TERMINE_FINE, ");
			sql.Append("DATA_FINE, ");
			sql.Append("NOTE, ");
			sql.Append("OPERATOREULTMOD, ");
			sql.Append("DATAORAULTMOD, ");
			sql.Append("IDOBJ_TIPO_SOSPENSIONE, ");
			sql.Append("IDOBJ_TIPO_CONCLUSIONE, ");
			sql.Append("RESPONSABILE ");
			sql.Append("FROM GVCTPROCEDIMENTI ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Returns an object GVCTPROCEDIMENTI selected by a primary key
		/// </summary>
		/// <param name="IDOBJ">The primary key of the object</param>
		/// <returns>Object of type GVCTPROCEDIMENTI</returns>
		public virtual GVCTPROCEDIMENTI GetByPrimaryKey(System.Int32 IDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateGetCommand(whereSql, null))
			{
				AddParameter(cmd, "IDOBJ", IDOBJ);
				GVCTPROCEDIMENTI[] tempArray = MapRecords(cmd);
				return tempArray.Length == 0 ? null : tempArray[0];
			}
		}


		/// <summary>
		/// Returns an object GVCTPROCEDIMENTI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_CONCLUSIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTPROCEDIMENTI</returns>
		public virtual GVCTPROCEDIMENTI[] GetByIDOBJ_TIPO_CONCLUSIONE(System.Int32 iDOBJ_TIPO_CONCLUSIONE)
		{
			return MapRecords(CreateGetByIDOBJ_TIPO_CONCLUSIONECommand(iDOBJ_TIPO_CONCLUSIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTPROCEDIMENTI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_CONCLUSIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_TIPO_CONCLUSIONEAsDataTable(System.Int32 iDOBJ_TIPO_CONCLUSIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_TIPO_CONCLUSIONECommand(iDOBJ_TIPO_CONCLUSIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_CONCLUSIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_TIPO_CONCLUSIONECommand(System.Int32 iDOBJ_TIPO_CONCLUSIONE)
		{
			string whereSql = "IDOBJ_TIPO_CONCLUSIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_CONCLUSIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_TIPO_CONCLUSIONE", iDOBJ_TIPO_CONCLUSIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="iDOBJ_TIPO_CONCLUSIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_TIPO_CONCLUSIONE(System.Int32 iDOBJ_TIPO_CONCLUSIONE)
		{
			return CreateDeleteByIDOBJ_TIPO_CONCLUSIONECommand(iDOBJ_TIPO_CONCLUSIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="iDOBJ_TIPO_CONCLUSIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_TIPO_CONCLUSIONECommand(System.Int32 iDOBJ_TIPO_CONCLUSIONE)
		{
			string whereSql = "IDOBJ_TIPO_CONCLUSIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_CONCLUSIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_TIPO_CONCLUSIONE", iDOBJ_TIPO_CONCLUSIONE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTPROCEDIMENTI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_INIZIATIVA">The foreign key of the object</param>
		/// <returns>Object of type GVCTPROCEDIMENTI</returns>
		public virtual GVCTPROCEDIMENTI[] GetByIDOBJ_TIPO_INIZIATIVA(System.Int32 iDOBJ_TIPO_INIZIATIVA)
		{
			return MapRecords(CreateGetByIDOBJ_TIPO_INIZIATIVACommand(iDOBJ_TIPO_INIZIATIVA));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTPROCEDIMENTI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_INIZIATIVA">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_TIPO_INIZIATIVAAsDataTable(System.Int32 iDOBJ_TIPO_INIZIATIVA)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_TIPO_INIZIATIVACommand(iDOBJ_TIPO_INIZIATIVA));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_INIZIATIVA">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_TIPO_INIZIATIVACommand(System.Int32 iDOBJ_TIPO_INIZIATIVA)
		{
			string whereSql = "IDOBJ_TIPO_INIZIATIVA = " + _db.CreateSqlParameterName("IDOBJ_TIPO_INIZIATIVA");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_TIPO_INIZIATIVA", iDOBJ_TIPO_INIZIATIVA);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="iDOBJ_TIPO_INIZIATIVA">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_TIPO_INIZIATIVA(System.Int32 iDOBJ_TIPO_INIZIATIVA)
		{
			return CreateDeleteByIDOBJ_TIPO_INIZIATIVACommand(iDOBJ_TIPO_INIZIATIVA).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="iDOBJ_TIPO_INIZIATIVA">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_TIPO_INIZIATIVACommand(System.Int32 iDOBJ_TIPO_INIZIATIVA)
		{
			string whereSql = "IDOBJ_TIPO_INIZIATIVA = " + _db.CreateSqlParameterName("IDOBJ_TIPO_INIZIATIVA");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_TIPO_INIZIATIVA", iDOBJ_TIPO_INIZIATIVA);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTPROCEDIMENTI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_PROCEDIMENTO">The foreign key of the object</param>
		/// <returns>Object of type GVCTPROCEDIMENTI</returns>
		public virtual GVCTPROCEDIMENTI[] GetByIDOBJ_TIPO_PROCEDIMENTO(System.Int32 iDOBJ_TIPO_PROCEDIMENTO)
		{
			return MapRecords(CreateGetByIDOBJ_TIPO_PROCEDIMENTOCommand(iDOBJ_TIPO_PROCEDIMENTO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTPROCEDIMENTI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_PROCEDIMENTO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_TIPO_PROCEDIMENTOAsDataTable(System.Int32 iDOBJ_TIPO_PROCEDIMENTO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_TIPO_PROCEDIMENTOCommand(iDOBJ_TIPO_PROCEDIMENTO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_PROCEDIMENTO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_TIPO_PROCEDIMENTOCommand(System.Int32 iDOBJ_TIPO_PROCEDIMENTO)
		{
			string whereSql = "IDOBJ_TIPO_PROCEDIMENTO = " + _db.CreateSqlParameterName("IDOBJ_TIPO_PROCEDIMENTO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_TIPO_PROCEDIMENTO", iDOBJ_TIPO_PROCEDIMENTO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="iDOBJ_TIPO_PROCEDIMENTO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_TIPO_PROCEDIMENTO(System.Int32 iDOBJ_TIPO_PROCEDIMENTO)
		{
			return CreateDeleteByIDOBJ_TIPO_PROCEDIMENTOCommand(iDOBJ_TIPO_PROCEDIMENTO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="iDOBJ_TIPO_PROCEDIMENTO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_TIPO_PROCEDIMENTOCommand(System.Int32 iDOBJ_TIPO_PROCEDIMENTO)
		{
			string whereSql = "IDOBJ_TIPO_PROCEDIMENTO = " + _db.CreateSqlParameterName("IDOBJ_TIPO_PROCEDIMENTO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_TIPO_PROCEDIMENTO", iDOBJ_TIPO_PROCEDIMENTO);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTPROCEDIMENTI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_SOSPENSIONE">The foreign key of the object</param>
		/// <returns>Object of type GVCTPROCEDIMENTI</returns>
		public virtual GVCTPROCEDIMENTI[] GetByIDOBJ_TIPO_SOSPENSIONE(System.Int32 iDOBJ_TIPO_SOSPENSIONE)
		{
			return MapRecords(CreateGetByIDOBJ_TIPO_SOSPENSIONECommand(iDOBJ_TIPO_SOSPENSIONE));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTPROCEDIMENTI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_SOSPENSIONE">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_TIPO_SOSPENSIONEAsDataTable(System.Int32 iDOBJ_TIPO_SOSPENSIONE)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_TIPO_SOSPENSIONECommand(iDOBJ_TIPO_SOSPENSIONE));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_TIPO_SOSPENSIONE">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_TIPO_SOSPENSIONECommand(System.Int32 iDOBJ_TIPO_SOSPENSIONE)
		{
			string whereSql = "IDOBJ_TIPO_SOSPENSIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_SOSPENSIONE");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_TIPO_SOSPENSIONE", iDOBJ_TIPO_SOSPENSIONE);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="iDOBJ_TIPO_SOSPENSIONE">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_TIPO_SOSPENSIONE(System.Int32 iDOBJ_TIPO_SOSPENSIONE)
		{
			return CreateDeleteByIDOBJ_TIPO_SOSPENSIONECommand(iDOBJ_TIPO_SOSPENSIONE).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="iDOBJ_TIPO_SOSPENSIONE">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_TIPO_SOSPENSIONECommand(System.Int32 iDOBJ_TIPO_SOSPENSIONE)
		{
			string whereSql = "IDOBJ_TIPO_SOSPENSIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_SOSPENSIONE");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_TIPO_SOSPENSIONE", iDOBJ_TIPO_SOSPENSIONE);
			return cmd;
		}

		/// <summary>
		/// Returns an object GVCTPROCEDIMENTI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key of the object</param>
		/// <returns>Object of type GVCTPROCEDIMENTI</returns>
		public virtual GVCTPROCEDIMENTI[] GetByIDOBJ_REGISTRO(System.Int32 iDOBJ_REGISTRO)
		{
			return MapRecords(CreateGetByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO));
		}

		/// <summary>
		/// Returns a DataTable of objects GVCTPROCEDIMENTI selected by a foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key of the object</param>
		/// <returns>A DataTable</returns>
		public virtual DataTable GetByIDOBJ_REGISTROAsDataTable(System.Int32 iDOBJ_REGISTRO)
		{
			return MapRecordsToDataTable(CreateGetByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO));
		}

		/// <summary>
		/// Returns an IdbCommand with the selected foreign key
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>An IDbCommand</returns>
		protected virtual IDbCommand CreateGetByIDOBJ_REGISTROCommand(System.Int32 iDOBJ_REGISTRO)
		{
			string whereSql = "IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO");
			IDbCommand cmd = CreateGetCommand(whereSql, null);
			AddParameter(cmd, "IDOBJ_REGISTRO", iDOBJ_REGISTRO);
			return cmd;
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteByIDOBJ_REGISTRO(System.Int32 iDOBJ_REGISTRO)
		{
			return CreateDeleteByIDOBJ_REGISTROCommand(iDOBJ_REGISTRO).ExecuteNonQuery();
		}

		/// <summary>
		/// Creates the IDbCommand for the deletion from the Database of the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="iDOBJ_REGISTRO">The foreign key</param>
		/// <returns>The IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteByIDOBJ_REGISTROCommand(System.Int32 iDOBJ_REGISTRO)
		{
			string whereSql = "IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO");
			IDbCommand cmd = CreateDeleteCommand(whereSql);
			AddParameter(cmd, "IDOBJ_REGISTRO", iDOBJ_REGISTRO);
			return cmd;
		}

		/// <summary>
		/// Inserts in the Database an object GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="valore">The object to insert</param>
		public virtual void Insert(GVCTPROCEDIMENTI valore)
		{
			System.Int32 id = -1;
			System.String sqlStr;

			sqlStr = "SELECT GVCTPROCEDIMENTI_SEQ.NEXTVAL FROM DUAL";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				id = Convert.ToInt32(cmd.ExecuteScalar());
			}

			sqlStr = "INSERT INTO GVCTPROCEDIMENTI (" +
			"IDOBJ, " +
			"IDOBJ_REGISTRO, " +
			"IDOBJ_TIPO_PROCEDIMENTO, " +
			"IDOBJ_TIPO_INIZIATIVA, " +
			"DATA_INIZIO, " +
			"DATA_AVVISO, " +
			"TEMPI, " +
			"DATA_TEORICA_FINE, " +
			"MOTIVO_SOSPENSIONE, " +
			"GIORNI_SOSPENSIONE, " +
			"DATA_RIATTIVAZIONE, " +
			"DATA_TERMINE_FINE, " +
			"DATA_FINE, " +
			"NOTE, " +
			"OPERATOREULTMOD, " +
			"DATAORAULTMOD, " +
			"IDOBJ_TIPO_SOSPENSIONE, " +
			"IDOBJ_TIPO_CONCLUSIONE, " +
			"RESPONSABILE) " +
			"VALUES (" + id.ToString() + ", " +
			_db.CreateSqlParameterName("IDOBJ_REGISTRO") + ", " +
			_db.CreateSqlParameterName("IDOBJ_TIPO_PROCEDIMENTO") + ", " +
			_db.CreateSqlParameterName("IDOBJ_TIPO_INIZIATIVA") + ", " +
			_db.CreateSqlParameterName("DATA_INIZIO") + ", " +
			_db.CreateSqlParameterName("DATA_AVVISO") + ", " +
			_db.CreateSqlParameterName("TEMPI") + ", " +
			_db.CreateSqlParameterName("DATA_TEORICA_FINE") + ", " +
			_db.CreateSqlParameterName("MOTIVO_SOSPENSIONE") + ", " +
			_db.CreateSqlParameterName("GIORNI_SOSPENSIONE") + ", " +
			_db.CreateSqlParameterName("DATA_RIATTIVAZIONE") + ", " +
			_db.CreateSqlParameterName("DATA_TERMINE_FINE") + ", " +
			_db.CreateSqlParameterName("DATA_FINE") + ", " +
			_db.CreateSqlParameterName("NOTE") + ", " +
			_db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
			_db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
			_db.CreateSqlParameterName("IDOBJ_TIPO_SOSPENSIONE") + ", " +
			_db.CreateSqlParameterName("IDOBJ_TIPO_CONCLUSIONE") + ", " +
			_db.CreateSqlParameterName("RESPONSABILE") + ")";
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ_REGISTRO", valore.IDOBJ_REGISTRO);
				AddParameter(cmd, "IDOBJ_TIPO_PROCEDIMENTO", valore.IDOBJ_TIPO_PROCEDIMENTO);
				AddParameter(cmd, "IDOBJ_TIPO_INIZIATIVA", valore.IDOBJ_TIPO_INIZIATIVA);
				AddParameter(cmd, "DATA_INIZIO", valore.IsDATA_INIZIONull ? DBNull.Value : (object)valore.DATA_INIZIO);
				AddParameter(cmd, "DATA_AVVISO", valore.IsDATA_AVVISONull ? DBNull.Value : (object)valore.DATA_AVVISO);
				AddParameter(cmd, "TEMPI", valore.IsTEMPINull ? DBNull.Value : (object)valore.TEMPI);
				AddParameter(cmd, "DATA_TEORICA_FINE", valore.IsDATA_TEORICA_FINENull ? DBNull.Value : (object)valore.DATA_TEORICA_FINE);
				AddParameter(cmd, "MOTIVO_SOSPENSIONE", valore.IsMOTIVO_SOSPENSIONENull ? DBNull.Value : (object)valore.MOTIVO_SOSPENSIONE);
				AddParameter(cmd, "GIORNI_SOSPENSIONE", valore.IsGIORNI_SOSPENSIONENull ? DBNull.Value : (object)valore.GIORNI_SOSPENSIONE);
				AddParameter(cmd, "DATA_RIATTIVAZIONE", valore.IsDATA_RIATTIVAZIONENull ? DBNull.Value : (object)valore.DATA_RIATTIVAZIONE);
				AddParameter(cmd, "DATA_TERMINE_FINE", valore.IsDATA_TERMINE_FINENull ? DBNull.Value : (object)valore.DATA_TERMINE_FINE);
				AddParameter(cmd, "DATA_FINE", valore.IsDATA_FINENull ? DBNull.Value : (object)valore.DATA_FINE);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_TIPO_SOSPENSIONE", valore.IsIDOBJ_TIPO_SOSPENSIONENull ? DBNull.Value : (object)valore.IDOBJ_TIPO_SOSPENSIONE);
				AddParameter(cmd, "IDOBJ_TIPO_CONCLUSIONE", valore.IsIDOBJ_TIPO_CONCLUSIONENull ? DBNull.Value : (object)valore.IDOBJ_TIPO_CONCLUSIONE);
				AddParameter(cmd, "RESPONSABILE", valore.IsRESPONSABILENull ? DBNull.Value : (object)valore.RESPONSABILE);
				cmd.ExecuteScalar();
				valore.IDOBJ = id;
			}
		}

		/// <summary>
		/// Updates in the Database an object GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="valore">The object to update</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool Update(GVCTPROCEDIMENTI valore)
		{
			System.String sqlStr = "UPDATE GVCTPROCEDIMENTI SET " +
				"IDOBJ_REGISTRO = " + _db.CreateSqlParameterName("IDOBJ_REGISTRO") + ", " +
				"IDOBJ_TIPO_PROCEDIMENTO = " + _db.CreateSqlParameterName("IDOBJ_TIPO_PROCEDIMENTO") + ", " +
				"IDOBJ_TIPO_INIZIATIVA = " + _db.CreateSqlParameterName("IDOBJ_TIPO_INIZIATIVA") + ", " +
				"DATA_INIZIO = " + _db.CreateSqlParameterName("DATA_INIZIO") + ", " +
				"DATA_AVVISO = " + _db.CreateSqlParameterName("DATA_AVVISO") + ", " +
				"TEMPI = " + _db.CreateSqlParameterName("TEMPI") + ", " +
				"DATA_TEORICA_FINE = " + _db.CreateSqlParameterName("DATA_TEORICA_FINE") + ", " +
				"MOTIVO_SOSPENSIONE = " + _db.CreateSqlParameterName("MOTIVO_SOSPENSIONE") + ", " +
				"GIORNI_SOSPENSIONE = " + _db.CreateSqlParameterName("GIORNI_SOSPENSIONE") + ", " +
				"DATA_RIATTIVAZIONE = " + _db.CreateSqlParameterName("DATA_RIATTIVAZIONE") + ", " +
				"DATA_TERMINE_FINE = " + _db.CreateSqlParameterName("DATA_TERMINE_FINE") + ", " +
				"DATA_FINE = " + _db.CreateSqlParameterName("DATA_FINE") + ", " +
				"NOTE = " + _db.CreateSqlParameterName("NOTE") + ", " +
				"OPERATOREULTMOD = " + _db.CreateSqlParameterName("OPERATOREULTMOD") + ", " +
				"DATAORAULTMOD = " + _db.CreateSqlParameterName("DATAORAULTMOD") + ", " +
				"IDOBJ_TIPO_SOSPENSIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_SOSPENSIONE") + ", " +
				"IDOBJ_TIPO_CONCLUSIONE = " + _db.CreateSqlParameterName("IDOBJ_TIPO_CONCLUSIONE") + ", " +
				"RESPONSABILE = " + _db.CreateSqlParameterName("RESPONSABILE") +
				" WHERE " +
				"IDOBJ = " + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = _db.CreateCommand(sqlStr))
			{
				AddParameter(cmd, "IDOBJ", valore.IDOBJ);
				AddParameter(cmd, "IDOBJ_REGISTRO", valore.IDOBJ_REGISTRO);
				AddParameter(cmd, "IDOBJ_TIPO_PROCEDIMENTO", valore.IDOBJ_TIPO_PROCEDIMENTO);
				AddParameter(cmd, "IDOBJ_TIPO_INIZIATIVA", valore.IDOBJ_TIPO_INIZIATIVA);
				AddParameter(cmd, "DATA_INIZIO", valore.IsDATA_INIZIONull ? DBNull.Value : (object)valore.DATA_INIZIO);
				AddParameter(cmd, "DATA_AVVISO", valore.IsDATA_AVVISONull ? DBNull.Value : (object)valore.DATA_AVVISO);
				AddParameter(cmd, "TEMPI", valore.IsTEMPINull ? DBNull.Value : (object)valore.TEMPI);
				AddParameter(cmd, "DATA_TEORICA_FINE", valore.IsDATA_TEORICA_FINENull ? DBNull.Value : (object)valore.DATA_TEORICA_FINE);
				AddParameter(cmd, "MOTIVO_SOSPENSIONE", valore.IsMOTIVO_SOSPENSIONENull ? DBNull.Value : (object)valore.MOTIVO_SOSPENSIONE);
				AddParameter(cmd, "GIORNI_SOSPENSIONE", valore.IsGIORNI_SOSPENSIONENull ? DBNull.Value : (object)valore.GIORNI_SOSPENSIONE);
				AddParameter(cmd, "DATA_RIATTIVAZIONE", valore.IsDATA_RIATTIVAZIONENull ? DBNull.Value : (object)valore.DATA_RIATTIVAZIONE);
				AddParameter(cmd, "DATA_TERMINE_FINE", valore.IsDATA_TERMINE_FINENull ? DBNull.Value : (object)valore.DATA_TERMINE_FINE);
				AddParameter(cmd, "DATA_FINE", valore.IsDATA_FINENull ? DBNull.Value : (object)valore.DATA_FINE);
				AddParameter(cmd, "NOTE", valore.IsNOTENull ? DBNull.Value : (object)valore.NOTE);
				AddParameter(cmd, "OPERATOREULTMOD", valore.IsOPERATOREULTMODNull ? DBNull.Value : (object)valore.OPERATOREULTMOD);
				AddParameter(cmd, "DATAORAULTMOD", valore.IsDATAORAULTMODNull ? DBNull.Value : (object)valore.DATAORAULTMOD);
				AddParameter(cmd, "IDOBJ_TIPO_SOSPENSIONE", valore.IsIDOBJ_TIPO_SOSPENSIONENull ? DBNull.Value : (object)valore.IDOBJ_TIPO_SOSPENSIONE);
				AddParameter(cmd, "IDOBJ_TIPO_CONCLUSIONE", valore.IsIDOBJ_TIPO_CONCLUSIONENull ? DBNull.Value : (object)valore.IDOBJ_TIPO_CONCLUSIONE);
				AddParameter(cmd, "RESPONSABILE", valore.IsRESPONSABILENull ? DBNull.Value : (object)valore.RESPONSABILE);
				return cmd.ExecuteNonQuery() != 0;
			}
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTPROCEDIMENTI</param>
		public void Update(DataTable table)
		{
			Update(table, true);
		}

		/// <summary>
		/// Updates in the Database a DataTable of objects GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="table">The DataTable of objects GVCTPROCEDIMENTI</param>
		/// <param name="acceptChanges">true to accept the changes, otherwise false</param>
		public virtual void Update(DataTable table, bool acceptChanges)
		{
			DataRowCollection rows = table.Rows;
			for(int i = rows.Count - 1; i >= 0; i--)
			{
				DataRow row = rows[i];
				switch(row.RowState)
				{
					case DataRowState.Added:
						Insert(MapRow(row));
						if(acceptChanges)
							row.AcceptChanges();
						break;

					case DataRowState.Deleted:
						row.RejectChanges();
						try
						{
							DeleteByPrimaryKey((System.Int32)row["IDOBJ"]);
						}
						finally
						{
							row.Delete();
						}
						if(acceptChanges)
							row.AcceptChanges();
						break;

				case DataRowState.Modified:
					Update(MapRow(row));
					if(acceptChanges)
						row.AcceptChanges();
					break;
				}
			}
		}

		/// <summary>
		/// Deletes from the Database an object GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="valore">The object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public bool Delete(GVCTPROCEDIMENTI valore)
		{
			return DeleteByPrimaryKey(valore.IDOBJ);
		}

		/// <summary>
		/// Deletes from the Database an object GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="iDOBJ">The primary key of the object to delete</param>
		/// <returns>true if success, otherwise false</returns>
		public virtual bool DeleteByPrimaryKey(System.Int32 iDOBJ)
		{
			string whereSql = "IDOBJ=" + _db.CreateSqlParameterName("IDOBJ");
			using(IDbCommand cmd = CreateDeleteCommand(whereSql))
			{
				AddParameter(cmd, "IDOBJ" , iDOBJ);
				return cmd.ExecuteNonQuery() > 0;
			}
		}

		/// <summary>
		/// Deletes from the Database the objects GVCTPROCEDIMENTI selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>The number of the deleted objects</returns>
		public int Delete(System.String whereSql)
		{
			return CreateDeleteCommand(whereSql).ExecuteNonQuery();
		}

		/// <summary>
		/// Returns an IDbCommand to delete the objects GVCTPROCEDIMENTI selected by 
		/// a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateDeleteCommand(string whereSql)
		{
			StringBuilder sql = new StringBuilder("DELETE FROM GVCTPROCEDIMENTI");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format(" WHERE {0}", whereSql));
			return _db.CreateCommand(sql.ToString());
		}

		/// <summary>
		/// Deletes all the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <returns>The number of the deleted objects</returns>
		public int DeleteAll()
		{
			return Delete("");
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCTPROCEDIMENTI</returns>
		protected GVCTPROCEDIMENTI[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCTPROCEDIMENTI</returns>
		protected GVCTPROCEDIMENTI[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCTPROCEDIMENTI</returns>
		protected virtual GVCTPROCEDIMENTI[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int iDOBJColumnIndex = reader.GetOrdinal("IDOBJ");
			int iDOBJ_REGISTROColumnIndex = reader.GetOrdinal("IDOBJ_REGISTRO");
			int iDOBJ_TIPO_PROCEDIMENTOColumnIndex = reader.GetOrdinal("IDOBJ_TIPO_PROCEDIMENTO");
			int iDOBJ_TIPO_INIZIATIVAColumnIndex = reader.GetOrdinal("IDOBJ_TIPO_INIZIATIVA");
			int dATA_INIZIOColumnIndex = reader.GetOrdinal("DATA_INIZIO");
			int dATA_AVVISOColumnIndex = reader.GetOrdinal("DATA_AVVISO");
			int tEMPIColumnIndex = reader.GetOrdinal("TEMPI");
			int dATA_TEORICA_FINEColumnIndex = reader.GetOrdinal("DATA_TEORICA_FINE");
			int mOTIVO_SOSPENSIONEColumnIndex = reader.GetOrdinal("MOTIVO_SOSPENSIONE");
			int gIORNI_SOSPENSIONEColumnIndex = reader.GetOrdinal("GIORNI_SOSPENSIONE");
			int dATA_RIATTIVAZIONEColumnIndex = reader.GetOrdinal("DATA_RIATTIVAZIONE");
			int dATA_TERMINE_FINEColumnIndex = reader.GetOrdinal("DATA_TERMINE_FINE");
			int dATA_FINEColumnIndex = reader.GetOrdinal("DATA_FINE");
			int nOTEColumnIndex = reader.GetOrdinal("NOTE");
			int oPERATOREULTMODColumnIndex = reader.GetOrdinal("OPERATOREULTMOD");
			int dATAORAULTMODColumnIndex = reader.GetOrdinal("DATAORAULTMOD");
			int iDOBJ_TIPO_SOSPENSIONEColumnIndex = reader.GetOrdinal("IDOBJ_TIPO_SOSPENSIONE");
			int iDOBJ_TIPO_CONCLUSIONEColumnIndex = reader.GetOrdinal("IDOBJ_TIPO_CONCLUSIONE");
			int rESPONSABILEColumnIndex = reader.GetOrdinal("RESPONSABILE");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCTPROCEDIMENTI record = new GVCTPROCEDIMENTI();
					recordList.Add(record);
					record.IDOBJ = Convert.ToInt32(reader.GetValue(iDOBJColumnIndex));
					record.IDOBJ_REGISTRO = Convert.ToInt32(reader.GetValue(iDOBJ_REGISTROColumnIndex));
					record.IDOBJ_TIPO_PROCEDIMENTO = Convert.ToInt32(reader.GetValue(iDOBJ_TIPO_PROCEDIMENTOColumnIndex));
					record.IDOBJ_TIPO_INIZIATIVA = Convert.ToInt32(reader.GetValue(iDOBJ_TIPO_INIZIATIVAColumnIndex));
					if(!reader.IsDBNull(dATA_INIZIOColumnIndex))
						record.DATA_INIZIO = Convert.ToDateTime(reader.GetValue(dATA_INIZIOColumnIndex));
					if(!reader.IsDBNull(dATA_AVVISOColumnIndex))
						record.DATA_AVVISO = Convert.ToDateTime(reader.GetValue(dATA_AVVISOColumnIndex));
					if(!reader.IsDBNull(tEMPIColumnIndex))
						record.TEMPI = Convert.ToInt32(reader.GetValue(tEMPIColumnIndex));
					if(!reader.IsDBNull(dATA_TEORICA_FINEColumnIndex))
						record.DATA_TEORICA_FINE = Convert.ToDateTime(reader.GetValue(dATA_TEORICA_FINEColumnIndex));
					if(!reader.IsDBNull(mOTIVO_SOSPENSIONEColumnIndex))
						record.MOTIVO_SOSPENSIONE = Convert.ToString(reader.GetValue(mOTIVO_SOSPENSIONEColumnIndex));
					if(!reader.IsDBNull(gIORNI_SOSPENSIONEColumnIndex))
						record.GIORNI_SOSPENSIONE = Convert.ToInt32(reader.GetValue(gIORNI_SOSPENSIONEColumnIndex));
					if(!reader.IsDBNull(dATA_RIATTIVAZIONEColumnIndex))
						record.DATA_RIATTIVAZIONE = Convert.ToDateTime(reader.GetValue(dATA_RIATTIVAZIONEColumnIndex));
					if(!reader.IsDBNull(dATA_TERMINE_FINEColumnIndex))
						record.DATA_TERMINE_FINE = Convert.ToDateTime(reader.GetValue(dATA_TERMINE_FINEColumnIndex));
					if(!reader.IsDBNull(dATA_FINEColumnIndex))
						record.DATA_FINE = Convert.ToDateTime(reader.GetValue(dATA_FINEColumnIndex));
					if(!reader.IsDBNull(nOTEColumnIndex))
						record.NOTE = Convert.ToString(reader.GetValue(nOTEColumnIndex));
					if(!reader.IsDBNull(oPERATOREULTMODColumnIndex))
						record.OPERATOREULTMOD = Convert.ToString(reader.GetValue(oPERATOREULTMODColumnIndex));
					if(!reader.IsDBNull(dATAORAULTMODColumnIndex))
						record.DATAORAULTMOD = Convert.ToDateTime(reader.GetValue(dATAORAULTMODColumnIndex));
					if(!reader.IsDBNull(iDOBJ_TIPO_SOSPENSIONEColumnIndex))
						record.IDOBJ_TIPO_SOSPENSIONE = Convert.ToInt32(reader.GetValue(iDOBJ_TIPO_SOSPENSIONEColumnIndex));
					if(!reader.IsDBNull(iDOBJ_TIPO_CONCLUSIONEColumnIndex))
						record.IDOBJ_TIPO_CONCLUSIONE = Convert.ToInt32(reader.GetValue(iDOBJ_TIPO_CONCLUSIONEColumnIndex));
					if(!reader.IsDBNull(rESPONSABILEColumnIndex))
						record.RESPONSABILE = Convert.ToString(reader.GetValue(rESPONSABILEColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCTPROCEDIMENTI[])(recordList.ToArray(typeof(GVCTPROCEDIMENTI)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCTPROCEDIMENTI</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCTPROCEDIMENTI</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCTPROCEDIMENTI</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCTPROCEDIMENTI
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCTPROCEDIMENTI</returns>
		protected virtual GVCTPROCEDIMENTI MapRow(DataRow row)
		{
			GVCTPROCEDIMENTI mappedObject = new GVCTPROCEDIMENTI();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "IDOBJ"
			dataColumn = dataTable.Columns["IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_REGISTRO"
			dataColumn = dataTable.Columns["IDOBJ_REGISTRO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_REGISTRO = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_TIPO_PROCEDIMENTO"
			dataColumn = dataTable.Columns["IDOBJ_TIPO_PROCEDIMENTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_TIPO_PROCEDIMENTO = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_TIPO_INIZIATIVA"
			dataColumn = dataTable.Columns["IDOBJ_TIPO_INIZIATIVA"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_TIPO_INIZIATIVA = (System.Int32)row[dataColumn];
			//Campo "DATA_INIZIO"
			dataColumn = dataTable.Columns["DATA_INIZIO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_INIZIO = (System.DateTime)row[dataColumn];
			//Campo "DATA_AVVISO"
			dataColumn = dataTable.Columns["DATA_AVVISO"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_AVVISO = (System.DateTime)row[dataColumn];
			//Campo "TEMPI"
			dataColumn = dataTable.Columns["TEMPI"];
			if(!row.IsNull(dataColumn))
				mappedObject.TEMPI = (System.Int32)row[dataColumn];
			//Campo "DATA_TEORICA_FINE"
			dataColumn = dataTable.Columns["DATA_TEORICA_FINE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_TEORICA_FINE = (System.DateTime)row[dataColumn];
			//Campo "MOTIVO_SOSPENSIONE"
			dataColumn = dataTable.Columns["MOTIVO_SOSPENSIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.MOTIVO_SOSPENSIONE = (System.String)row[dataColumn];
			//Campo "GIORNI_SOSPENSIONE"
			dataColumn = dataTable.Columns["GIORNI_SOSPENSIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.GIORNI_SOSPENSIONE = (System.Int32)row[dataColumn];
			//Campo "DATA_RIATTIVAZIONE"
			dataColumn = dataTable.Columns["DATA_RIATTIVAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_RIATTIVAZIONE = (System.DateTime)row[dataColumn];
			//Campo "DATA_TERMINE_FINE"
			dataColumn = dataTable.Columns["DATA_TERMINE_FINE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_TERMINE_FINE = (System.DateTime)row[dataColumn];
			//Campo "DATA_FINE"
			dataColumn = dataTable.Columns["DATA_FINE"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATA_FINE = (System.DateTime)row[dataColumn];
			//Campo "NOTE"
			dataColumn = dataTable.Columns["NOTE"];
			if(!row.IsNull(dataColumn))
				mappedObject.NOTE = (System.String)row[dataColumn];
			//Campo "OPERATOREULTMOD"
			dataColumn = dataTable.Columns["OPERATOREULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.OPERATOREULTMOD = (System.String)row[dataColumn];
			//Campo "DATAORAULTMOD"
			dataColumn = dataTable.Columns["DATAORAULTMOD"];
			if(!row.IsNull(dataColumn))
				mappedObject.DATAORAULTMOD = (System.DateTime)row[dataColumn];
			//Campo "IDOBJ_TIPO_SOSPENSIONE"
			dataColumn = dataTable.Columns["IDOBJ_TIPO_SOSPENSIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_TIPO_SOSPENSIONE = (System.Int32)row[dataColumn];
			//Campo "IDOBJ_TIPO_CONCLUSIONE"
			dataColumn = dataTable.Columns["IDOBJ_TIPO_CONCLUSIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.IDOBJ_TIPO_CONCLUSIONE = (System.Int32)row[dataColumn];
			//Campo "RESPONSABILE"
			dataColumn = dataTable.Columns["RESPONSABILE"];
			if(!row.IsNull(dataColumn))
				mappedObject.RESPONSABILE = (System.String)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCTPROCEDIMENTI
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCTPROCEDIMENTI";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = true;
			dataColumn.Unique = true;
			dataColumn.AutoIncrement = true;
			dataColumn = dataTable.Columns.Add("IDOBJ_REGISTRO", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_TIPO_PROCEDIMENTO", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_TIPO_INIZIATIVA", typeof(System.Int32));
			dataColumn.AllowDBNull = false;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_INIZIO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_AVVISO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("TEMPI", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_TEORICA_FINE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("MOTIVO_SOSPENSIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("GIORNI_SOSPENSIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_RIATTIVAZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_TERMINE_FINE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATA_FINE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("NOTE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("OPERATOREULTMOD", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("DATAORAULTMOD", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_TIPO_SOSPENSIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("IDOBJ_TIPO_CONCLUSIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("RESPONSABILE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_REGISTRO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_TIPO_PROCEDIMENTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_TIPO_INIZIATIVA":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_INIZIO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_AVVISO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "TEMPI":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_TEORICA_FINE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "MOTIVO_SOSPENSIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "GIORNI_SOSPENSIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "DATA_RIATTIVAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_TERMINE_FINE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "DATA_FINE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "NOTE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "OPERATOREULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "DATAORAULTMOD":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "IDOBJ_TIPO_SOSPENSIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "IDOBJ_TIPO_CONCLUSIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "RESPONSABILE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
