//
//Generated by gvc at 28/07/2009 9.36.31
//

using System;
using System.Data;
using System.Text;

namespace it.dedagroup.GVC.Repository.rtier.Service
{
	/// <summary>
	/// Data Access Layer for the object GVCVRICERCAREV_DAEFF
	/// </summary>
	public partial class GVCVRICERCAREV_DAEFFCollection
	{
		/// <summary>
		/// Returns the Database Name of the field S_DENOMINAZIONE.
		/// </summary>
		public const string S_DENOMINAZIONEColumnName = "S_DENOMINAZIONE";
		/// <summary>
		/// Returns the Database Name of the field S_IDOBJ.
		/// </summary>
		public const string S_IDOBJColumnName = "S_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ.
		/// </summary>
		public const string R_IDOBJColumnName = "R_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field R_NUMERO_REA.
		/// </summary>
		public const string R_NUMERO_REAColumnName = "R_NUMERO_REA";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ_STATO.
		/// </summary>
		public const string R_IDOBJ_STATOColumnName = "R_IDOBJ_STATO";
		/// <summary>
		/// Returns the Database Name of the field STATO_FLAG_REVISIONE.
		/// </summary>
		public const string STATO_FLAG_REVISIONEColumnName = "STATO_FLAG_REVISIONE";
		/// <summary>
		/// Returns the Database Name of the field R_IDOBJ_CADENZA_REVISIONE.
		/// </summary>
		public const string R_IDOBJ_CADENZA_REVISIONEColumnName = "R_IDOBJ_CADENZA_REVISIONE";
		/// <summary>
		/// Returns the Database Name of the field R_DATA_COSTITUZIONE.
		/// </summary>
		public const string R_DATA_COSTITUZIONEColumnName = "R_DATA_COSTITUZIONE";
		/// <summary>
		/// Returns the Database Name of the field REV_ANNO_REVISIONE.
		/// </summary>
		public const string REV_ANNO_REVISIONEColumnName = "REV_ANNO_REVISIONE";
		/// <summary>
		/// Returns the Database Name of the field REV_IDOBJ.
		/// </summary>
		public const string REV_IDOBJColumnName = "REV_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field REV_IDOBJ_TIPO_REVISIONE.
		/// </summary>
		public const string REV_IDOBJ_TIPO_REVISIONEColumnName = "REV_IDOBJ_TIPO_REVISIONE";
		/// <summary>
		/// Returns the Database Name of the field REV_IDOBJ_ORGANO_REVISORE.
		/// </summary>
		public const string REV_IDOBJ_ORGANO_REVISOREColumnName = "REV_IDOBJ_ORGANO_REVISORE";
		/// <summary>
		/// Returns the Database Name of the field REV_DESC_ORGANO_REVISORE.
		/// </summary>
		public const string REV_DESC_ORGANO_REVISOREColumnName = "REV_DESC_ORGANO_REVISORE";
		/// <summary>
		/// Returns the Database Name of the field REV_IDOBJ_ESITO_REVISIONE.
		/// </summary>
		public const string REV_IDOBJ_ESITO_REVISIONEColumnName = "REV_IDOBJ_ESITO_REVISIONE";
		/// <summary>
		/// Returns the Database Name of the field REV_DATA_CONCLUSIONE.
		/// </summary>
		public const string REV_DATA_CONCLUSIONEColumnName = "REV_DATA_CONCLUSIONE";
		/// <summary>
		/// Returns the Database Name of the field REV_DATA_DEPOSITO_RELAZIONE.
		/// </summary>
		public const string REV_DATA_DEPOSITO_RELAZIONEColumnName = "REV_DATA_DEPOSITO_RELAZIONE";
		/// <summary>
		/// Returns the Database Name of the field REV_NUMERO_DETERMINA_REVOCA.
		/// </summary>
		public const string REV_NUMERO_DETERMINA_REVOCAColumnName = "REV_NUMERO_DETERMINA_REVOCA";
		/// <summary>
		/// Returns the Database Name of the field REV_DATA_DETERMINA_REVOCA.
		/// </summary>
		public const string REV_DATA_DETERMINA_REVOCAColumnName = "REV_DATA_DETERMINA_REVOCA";
		/// <summary>
		/// Returns the Database Name of the field INC_IDOBJ.
		/// </summary>
		public const string INC_IDOBJColumnName = "INC_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field INC_DATA_SCADENZA_TEORICA.
		/// </summary>
		public const string INC_DATA_SCADENZA_TEORICAColumnName = "INC_DATA_SCADENZA_TEORICA";
		/// <summary>
		/// Returns the Database Name of the field INC_DATA_DELIBERA_INCARICO.
		/// </summary>
		public const string INC_DATA_DELIBERA_INCARICOColumnName = "INC_DATA_DELIBERA_INCARICO";
		/// <summary>
		/// Returns the Database Name of the field INC_NUMERO_DETERMINA_INCARICO.
		/// </summary>
		public const string INC_NUMERO_DETERMINA_INCARICOColumnName = "INC_NUMERO_DETERMINA_INCARICO";
		/// <summary>
		/// Returns the Database Name of the field INC_DATA_DETERMINA_INCARICO.
		/// </summary>
		public const string INC_DATA_DETERMINA_INCARICOColumnName = "INC_DATA_DETERMINA_INCARICO";
		/// <summary>
		/// Returns the Database Name of the field INC_IMPEGNO.
		/// </summary>
		public const string INC_IMPEGNOColumnName = "INC_IMPEGNO";
		/// <summary>
		/// Returns the Database Name of the field COMPENSI_IDOBJ.
		/// </summary>
		public const string COMPENSI_IDOBJColumnName = "COMPENSI_IDOBJ";
		/// <summary>
		/// Returns the Database Name of the field COMPENSI_IDOBJ_SOGGETTO.
		/// </summary>
		public const string COMPENSI_IDOBJ_SOGGETTOColumnName = "COMPENSI_IDOBJ_SOGGETTO";
		/// <summary>
		/// Returns the Database Name of the field COMPENSI_SOGG_DESC.
		/// </summary>
		public const string COMPENSI_SOGG_DESCColumnName = "COMPENSI_SOGG_DESC";
		/// <summary>
		/// Returns the Database Name of the field COMPENSI_TOTALE.
		/// </summary>
		public const string COMPENSI_TOTALEColumnName = "COMPENSI_TOTALE";
		/// <summary>
		/// Returns the Database Name of the field ADESIONE_ASSOCIAZIONE.
		/// </summary>
		public const string ADESIONE_ASSOCIAZIONEColumnName = "ADESIONE_ASSOCIAZIONE";

		/// <summary>
		/// Gateway to the Database
		/// </summary>
		protected GVC _db;

		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="db">Istance of the Database</param>
		public GVCVRICERCAREV_DAEFFCollection(GVC db)
		{
			_db = db;
		}

		/// <summary>
		/// Property for the Database
		/// </summary>
		protected GVC Database
		{
			get
			{
				return _db;
			}
		}

		/// <summary>
		/// Returns an array containing all the objects GVCVRICERCAREV_DAEFF
		/// </summary>
		/// <returns>Array of objects GVCVRICERCAREV_DAEFF</returns>
		public virtual GVCVRICERCAREV_DAEFF[] GetAll()
		{
			return MapRecords(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns a DataTable containing all the objects GVCVRICERCAREV_DAEFF
		/// </summary>
		/// <returns>DataTable of objects GVCVRICERCAREV_DAEFF</returns>
		public virtual DataTable GetAllAsDataTable()
		{
			return MapRecordsToDataTable(CreateGetAllCommand());
		}

		/// <summary>
		/// Returns an IDbCommand to get all the objects GVCVRICERCAREV_DAEFF
		/// </summary>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetAllCommand()
		{
			return CreateGetCommand(null, null);
		}

		/// <summary>
		/// Returns an object GVCVRICERCAREV_DAEFF selected by a WHERE statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <returns>Object of type GVCVRICERCAREV_DAEFF</returns>
		public GVCVRICERCAREV_DAEFF GetRow(string whereSql)
		{
			int totalRecordCount = -1;
			GVCVRICERCAREV_DAEFF[] rows = GetAsArray(whereSql, null, 0, 1, ref totalRecordCount);
			return rows.Length == 0 ? null : rows[0];
		}

		/// <summary>
		/// Returns an array containing the objects GVCVRICERCAREV_DAEFF selected by a WHERE statement
		/// and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Array of objects GVCVRICERCAREV_DAEFF</returns>
		public GVCVRICERCAREV_DAEFF[] GetAsArray(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsArray(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns an array containing a subset of the objects GVCVRICERCAREV_DAEFF selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="Length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of objects GVCVRICERCAREV_DAEFF</returns>
		public virtual GVCVRICERCAREV_DAEFF[] GetAsArray(string whereSql, string orderBySql, int startIndex, int Length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecords(reader, startIndex, Length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCAREV_DAEFF selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>DataTable of objects GVCVRICERCAREV_DAEFF</returns>
		public DataTable GetAsDataTable(string whereSql, string orderBySql)
		{
			int totalRecordCount = -1;
			return GetAsDataTable(whereSql, orderBySql, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Returns a DataTable containing a subset of the objects GVCVRICERCAREV_DAEFF selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCAREV_DAEFF</returns>
		public virtual DataTable GetAsDataTable(string whereSql, string orderBySql,	int startIndex, int length, ref int totalRecordCount)
		{
			using(IDataReader reader = _db.ExecuteReader(CreateGetCommand(whereSql, orderBySql)))
			{
				return MapRecordsToDataTable(reader, startIndex, length, ref totalRecordCount);
			}
		}

		/// <summary>
		/// Returns an IDbCommand to get the objects GVCVRICERCAREV_DAEFF selected by 
		/// a WHERE statement and ordered by ORDER BY statement
		/// </summary>
		/// <param name="whereSql">The WHERE statement</param>
		/// <param name="orderBySql">The ORDER BY statement</param>
		/// <returns>Istance of IDbCommand</returns>
		protected virtual IDbCommand CreateGetCommand(string whereSql, string orderBySql)
		{
			StringBuilder sql = new StringBuilder("SELECT ");
			sql.Append("S_DENOMINAZIONE, ");
			sql.Append("S_IDOBJ, ");
			sql.Append("R_IDOBJ, ");
			sql.Append("R_NUMERO_REA, ");
			sql.Append("R_IDOBJ_STATO, ");
			sql.Append("STATO_FLAG_REVISIONE, ");
			sql.Append("R_IDOBJ_CADENZA_REVISIONE, ");
			sql.Append("R_DATA_COSTITUZIONE, ");
			sql.Append("REV_ANNO_REVISIONE, ");
			sql.Append("REV_IDOBJ, ");
			sql.Append("REV_IDOBJ_TIPO_REVISIONE, ");
			sql.Append("REV_IDOBJ_ORGANO_REVISORE, ");
			sql.Append("REV_DESC_ORGANO_REVISORE, ");
			sql.Append("REV_IDOBJ_ESITO_REVISIONE, ");
			sql.Append("REV_DATA_CONCLUSIONE, ");
			sql.Append("REV_DATA_DEPOSITO_RELAZIONE, ");
			sql.Append("REV_NUMERO_DETERMINA_REVOCA, ");
			sql.Append("REV_DATA_DETERMINA_REVOCA, ");
			sql.Append("INC_IDOBJ, ");
			sql.Append("INC_DATA_SCADENZA_TEORICA, ");
			sql.Append("INC_DATA_DELIBERA_INCARICO, ");
			sql.Append("INC_NUMERO_DETERMINA_INCARICO, ");
			sql.Append("INC_DATA_DETERMINA_INCARICO, ");
			sql.Append("INC_IMPEGNO, ");
			sql.Append("COMPENSI_IDOBJ, ");
			sql.Append("COMPENSI_IDOBJ_SOGGETTO, ");
			sql.Append("COMPENSI_SOGG_DESC, ");
			sql.Append("COMPENSI_TOTALE, ");
			sql.Append("ADESIONE_ASSOCIAZIONE ");
			sql.Append("FROM GVCVRICERCAREV_DAEFF ");
			if(whereSql != null && whereSql.Length > 0)
				sql.Append(String.Format("WHERE {0} ", whereSql));
			if(orderBySql != null && orderBySql.Length > 0)
				sql.Append(String.Format("ORDER BY {0} ", orderBySql));
			return _db.CreateCommand(sql.ToString());
		}


		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCAREV_DAEFF
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>Array of type GVCVRICERCAREV_DAEFF</returns>
		protected GVCVRICERCAREV_DAEFF[] MapRecords(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecords(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to an array of type GVCVRICERCAREV_DAEFF
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>Array of type GVCVRICERCAREV_DAEFF</returns>
		protected GVCVRICERCAREV_DAEFF[] MapRecords(IDataReader reader)
		{
			int totalRecordCount = -1;
				return MapRecords(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to an array of type GVCVRICERCAREV_DAEFF
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>Array of type GVCVRICERCAREV_DAEFF</returns>
		protected virtual GVCVRICERCAREV_DAEFF[] MapRecords(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int s_DENOMINAZIONEColumnIndex = reader.GetOrdinal("S_DENOMINAZIONE");
			int s_IDOBJColumnIndex = reader.GetOrdinal("S_IDOBJ");
			int r_IDOBJColumnIndex = reader.GetOrdinal("R_IDOBJ");
			int r_NUMERO_REAColumnIndex = reader.GetOrdinal("R_NUMERO_REA");
			int r_IDOBJ_STATOColumnIndex = reader.GetOrdinal("R_IDOBJ_STATO");
			int sTATO_FLAG_REVISIONEColumnIndex = reader.GetOrdinal("STATO_FLAG_REVISIONE");
			int r_IDOBJ_CADENZA_REVISIONEColumnIndex = reader.GetOrdinal("R_IDOBJ_CADENZA_REVISIONE");
			int r_DATA_COSTITUZIONEColumnIndex = reader.GetOrdinal("R_DATA_COSTITUZIONE");
			int rEV_ANNO_REVISIONEColumnIndex = reader.GetOrdinal("REV_ANNO_REVISIONE");
			int rEV_IDOBJColumnIndex = reader.GetOrdinal("REV_IDOBJ");
			int rEV_IDOBJ_TIPO_REVISIONEColumnIndex = reader.GetOrdinal("REV_IDOBJ_TIPO_REVISIONE");
			int rEV_IDOBJ_ORGANO_REVISOREColumnIndex = reader.GetOrdinal("REV_IDOBJ_ORGANO_REVISORE");
			int rEV_DESC_ORGANO_REVISOREColumnIndex = reader.GetOrdinal("REV_DESC_ORGANO_REVISORE");
			int rEV_IDOBJ_ESITO_REVISIONEColumnIndex = reader.GetOrdinal("REV_IDOBJ_ESITO_REVISIONE");
			int rEV_DATA_CONCLUSIONEColumnIndex = reader.GetOrdinal("REV_DATA_CONCLUSIONE");
			int rEV_DATA_DEPOSITO_RELAZIONEColumnIndex = reader.GetOrdinal("REV_DATA_DEPOSITO_RELAZIONE");
			int rEV_NUMERO_DETERMINA_REVOCAColumnIndex = reader.GetOrdinal("REV_NUMERO_DETERMINA_REVOCA");
			int rEV_DATA_DETERMINA_REVOCAColumnIndex = reader.GetOrdinal("REV_DATA_DETERMINA_REVOCA");
			int iNC_IDOBJColumnIndex = reader.GetOrdinal("INC_IDOBJ");
			int iNC_DATA_SCADENZA_TEORICAColumnIndex = reader.GetOrdinal("INC_DATA_SCADENZA_TEORICA");
			int iNC_DATA_DELIBERA_INCARICOColumnIndex = reader.GetOrdinal("INC_DATA_DELIBERA_INCARICO");
			int iNC_NUMERO_DETERMINA_INCARICOColumnIndex = reader.GetOrdinal("INC_NUMERO_DETERMINA_INCARICO");
			int iNC_DATA_DETERMINA_INCARICOColumnIndex = reader.GetOrdinal("INC_DATA_DETERMINA_INCARICO");
			int iNC_IMPEGNOColumnIndex = reader.GetOrdinal("INC_IMPEGNO");
			int cOMPENSI_IDOBJColumnIndex = reader.GetOrdinal("COMPENSI_IDOBJ");
			int cOMPENSI_IDOBJ_SOGGETTOColumnIndex = reader.GetOrdinal("COMPENSI_IDOBJ_SOGGETTO");
			int cOMPENSI_SOGG_DESCColumnIndex = reader.GetOrdinal("COMPENSI_SOGG_DESC");
			int cOMPENSI_TOTALEColumnIndex = reader.GetOrdinal("COMPENSI_TOTALE");
			int aDESIONE_ASSOCIAZIONEColumnIndex = reader.GetOrdinal("ADESIONE_ASSOCIAZIONE");

			System.Collections.ArrayList recordList = new System.Collections.ArrayList();
			int ri = -startIndex;

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					GVCVRICERCAREV_DAEFF record = new GVCVRICERCAREV_DAEFF();
					recordList.Add(record);
					if(!reader.IsDBNull(s_DENOMINAZIONEColumnIndex))
						record.S_DENOMINAZIONE = Convert.ToString(reader.GetValue(s_DENOMINAZIONEColumnIndex));
					if(!reader.IsDBNull(s_IDOBJColumnIndex))
						record.S_IDOBJ = Convert.ToInt32(reader.GetValue(s_IDOBJColumnIndex));
					if(!reader.IsDBNull(r_IDOBJColumnIndex))
						record.R_IDOBJ = Convert.ToInt32(reader.GetValue(r_IDOBJColumnIndex));
					if(!reader.IsDBNull(r_NUMERO_REAColumnIndex))
						record.R_NUMERO_REA = Convert.ToString(reader.GetValue(r_NUMERO_REAColumnIndex));
					if(!reader.IsDBNull(r_IDOBJ_STATOColumnIndex))
						record.R_IDOBJ_STATO = Convert.ToInt32(reader.GetValue(r_IDOBJ_STATOColumnIndex));
					if(!reader.IsDBNull(sTATO_FLAG_REVISIONEColumnIndex))
						record.STATO_FLAG_REVISIONE = Convert.ToInt32(reader.GetValue(sTATO_FLAG_REVISIONEColumnIndex));
					if(!reader.IsDBNull(r_IDOBJ_CADENZA_REVISIONEColumnIndex))
						record.R_IDOBJ_CADENZA_REVISIONE = Convert.ToInt32(reader.GetValue(r_IDOBJ_CADENZA_REVISIONEColumnIndex));
					if(!reader.IsDBNull(r_DATA_COSTITUZIONEColumnIndex))
						record.R_DATA_COSTITUZIONE = Convert.ToDateTime(reader.GetValue(r_DATA_COSTITUZIONEColumnIndex));
                    if (!reader.IsDBNull(rEV_ANNO_REVISIONEColumnIndex))
                        record.REV_ANNO_REVISIONE = Convert.ToInt32(reader.GetValue(rEV_ANNO_REVISIONEColumnIndex));
                    if (!reader.IsDBNull(rEV_IDOBJColumnIndex))
                        record.REV_IDOBJ = Convert.ToInt32(reader.GetValue(rEV_IDOBJColumnIndex));
                    if (!reader.IsDBNull(rEV_IDOBJ_TIPO_REVISIONEColumnIndex))
                        record.REV_IDOBJ_TIPO_REVISIONE = Convert.ToInt32(reader.GetValue(rEV_IDOBJ_TIPO_REVISIONEColumnIndex));
                    if (!reader.IsDBNull(rEV_IDOBJ_ORGANO_REVISOREColumnIndex))
                        record.REV_IDOBJ_ORGANO_REVISORE = Convert.ToInt32(reader.GetValue(rEV_IDOBJ_ORGANO_REVISOREColumnIndex));
                    if (!reader.IsDBNull(rEV_DESC_ORGANO_REVISOREColumnIndex))
                        record.REV_DESC_ORGANO_REVISORE = Convert.ToString(reader.GetValue(rEV_DESC_ORGANO_REVISOREColumnIndex));
                    if (!reader.IsDBNull(rEV_IDOBJ_ESITO_REVISIONEColumnIndex))
                        record.REV_IDOBJ_ESITO_REVISIONE = Convert.ToInt32(reader.GetValue(rEV_IDOBJ_ESITO_REVISIONEColumnIndex));
					if(!reader.IsDBNull(rEV_DATA_CONCLUSIONEColumnIndex))
						record.REV_DATA_CONCLUSIONE = Convert.ToDateTime(reader.GetValue(rEV_DATA_CONCLUSIONEColumnIndex));
					if(!reader.IsDBNull(rEV_DATA_DEPOSITO_RELAZIONEColumnIndex))
						record.REV_DATA_DEPOSITO_RELAZIONE = Convert.ToDateTime(reader.GetValue(rEV_DATA_DEPOSITO_RELAZIONEColumnIndex));
					if(!reader.IsDBNull(rEV_NUMERO_DETERMINA_REVOCAColumnIndex))
						record.REV_NUMERO_DETERMINA_REVOCA = Convert.ToString(reader.GetValue(rEV_NUMERO_DETERMINA_REVOCAColumnIndex));
					if(!reader.IsDBNull(rEV_DATA_DETERMINA_REVOCAColumnIndex))
						record.REV_DATA_DETERMINA_REVOCA = Convert.ToDateTime(reader.GetValue(rEV_DATA_DETERMINA_REVOCAColumnIndex));
					if(!reader.IsDBNull(iNC_IDOBJColumnIndex))
						record.INC_IDOBJ = Convert.ToDouble(reader.GetValue(iNC_IDOBJColumnIndex));
					if(!reader.IsDBNull(iNC_DATA_SCADENZA_TEORICAColumnIndex))
						record.INC_DATA_SCADENZA_TEORICA = Convert.ToDateTime(reader.GetValue(iNC_DATA_SCADENZA_TEORICAColumnIndex));
					if(!reader.IsDBNull(iNC_DATA_DELIBERA_INCARICOColumnIndex))
						record.INC_DATA_DELIBERA_INCARICO = Convert.ToDateTime(reader.GetValue(iNC_DATA_DELIBERA_INCARICOColumnIndex));
					if(!reader.IsDBNull(iNC_NUMERO_DETERMINA_INCARICOColumnIndex))
						record.INC_NUMERO_DETERMINA_INCARICO = Convert.ToString(reader.GetValue(iNC_NUMERO_DETERMINA_INCARICOColumnIndex));
					if(!reader.IsDBNull(iNC_DATA_DETERMINA_INCARICOColumnIndex))
						record.INC_DATA_DETERMINA_INCARICO = Convert.ToDateTime(reader.GetValue(iNC_DATA_DETERMINA_INCARICOColumnIndex));
					if(!reader.IsDBNull(iNC_IMPEGNOColumnIndex))
						record.INC_IMPEGNO = Convert.ToDouble(reader.GetValue(iNC_IMPEGNOColumnIndex));
					if(!reader.IsDBNull(cOMPENSI_IDOBJColumnIndex))
						record.COMPENSI_IDOBJ = Convert.ToDouble(reader.GetValue(cOMPENSI_IDOBJColumnIndex));
					if(!reader.IsDBNull(cOMPENSI_IDOBJ_SOGGETTOColumnIndex))
						record.COMPENSI_IDOBJ_SOGGETTO = Convert.ToDouble(reader.GetValue(cOMPENSI_IDOBJ_SOGGETTOColumnIndex));
					if(!reader.IsDBNull(cOMPENSI_SOGG_DESCColumnIndex))
						record.COMPENSI_SOGG_DESC = Convert.ToString(reader.GetValue(cOMPENSI_SOGG_DESCColumnIndex));
					if(!reader.IsDBNull(cOMPENSI_TOTALEColumnIndex))
						record.COMPENSI_TOTALE = Convert.ToDouble(reader.GetValue(cOMPENSI_TOTALEColumnIndex));
					if(!reader.IsDBNull(aDESIONE_ASSOCIAZIONEColumnIndex))
						record.ADESIONE_ASSOCIAZIONE = Convert.ToString(reader.GetValue(aDESIONE_ASSOCIAZIONEColumnIndex));
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return (GVCVRICERCAREV_DAEFF[])(recordList.ToArray(typeof(GVCVRICERCAREV_DAEFF)));
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="command">The IDbCommand to execute</param>
		/// <returns>DataTable of objects GVCVRICERCAREV_DAEFF</returns>
		protected DataTable MapRecordsToDataTable(IDbCommand command)
		{
			using(IDataReader reader = _db.ExecuteReader(command))
			{
				return MapRecordsToDataTable(reader);
			}
		}

		/// <summary>
		/// Converts the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <returns>DataTable of objects GVCVRICERCAREV_DAEFF</returns>
		protected DataTable MapRecordsToDataTable(IDataReader reader)
		{
			int totalRecordCount = 0;
			return MapRecordsToDataTable(reader, 0, int.MaxValue, ref totalRecordCount);
		}

		/// <summary>
		/// Converts a subset of the IDataReader object to a DataTable
		/// </summary>
		/// <param name="reader">The IDataReader to convert</param>
		/// <param name="startIndex">The index of the subset</param>
		/// <param name="length">Length of the subset</param>
		/// <param name="totalRecordCount">Number of records</param>
		/// <returns>DataTable of objects GVCVRICERCAREV_DAEFF</returns>
		protected virtual DataTable MapRecordsToDataTable(IDataReader reader, int startIndex, int length, ref int totalRecordCount)
		{
			if(startIndex < 0)
				throw new ArgumentOutOfRangeException("startIndex", startIndex, "StartIndex non può essere minore di zero.");
			if(length < 0)
				throw new ArgumentOutOfRangeException("length", length, "La lunghezza non può essere minore di zero.");

			int columnCount = reader.FieldCount;
			int ri = -startIndex;

			DataTable dataTable = CreateDataTable();
			dataTable.BeginLoadData();
			object[] values = new object[columnCount];

			while(reader.Read())
			{
				ri++;
				if(ri > 0 && ri <= length)
				{
					reader.GetValues(values);
					dataTable.LoadDataRow(values, true);
					if(ri == length && totalRecordCount != 0)
						break;
				}
			}
			dataTable.EndLoadData();
			totalRecordCount = 0 == totalRecordCount ? ri + startIndex : -1;
			return dataTable;
		}

		/// <summary>
		/// Converts a DataRow to an object GVCVRICERCAREV_DAEFF
		/// </summary>
		/// <param name="row">The DataRow to convert</param>
		/// <returns>An object GVCVRICERCAREV_DAEFF</returns>
		protected virtual GVCVRICERCAREV_DAEFF MapRow(DataRow row)
		{
			GVCVRICERCAREV_DAEFF mappedObject = new GVCVRICERCAREV_DAEFF();
			DataTable dataTable = row.Table;
			DataColumn dataColumn;
			//Campo "S_DENOMINAZIONE"
			dataColumn = dataTable.Columns["S_DENOMINAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_DENOMINAZIONE = (System.String)row[dataColumn];
			//Campo "S_IDOBJ"
			dataColumn = dataTable.Columns["S_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.S_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "R_IDOBJ"
			dataColumn = dataTable.Columns["R_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ = (System.Int32)row[dataColumn];
			//Campo "R_NUMERO_REA"
			dataColumn = dataTable.Columns["R_NUMERO_REA"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_NUMERO_REA = (System.String)row[dataColumn];
			//Campo "R_IDOBJ_STATO"
			dataColumn = dataTable.Columns["R_IDOBJ_STATO"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ_STATO = (System.Int32)row[dataColumn];
			//Campo "STATO_FLAG_REVISIONE"
			dataColumn = dataTable.Columns["STATO_FLAG_REVISIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.STATO_FLAG_REVISIONE = (System.Int32)row[dataColumn];
			//Campo "R_IDOBJ_CADENZA_REVISIONE"
			dataColumn = dataTable.Columns["R_IDOBJ_CADENZA_REVISIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_IDOBJ_CADENZA_REVISIONE = (System.Int32)row[dataColumn];
			//Campo "R_DATA_COSTITUZIONE"
			dataColumn = dataTable.Columns["R_DATA_COSTITUZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.R_DATA_COSTITUZIONE = (System.DateTime)row[dataColumn];
            //Campo "REV_ANNO_REVISIONE"
            dataColumn = dataTable.Columns["REV_ANNO_REVISIONE"];
            if (!row.IsNull(dataColumn))
                mappedObject.REV_ANNO_REVISIONE = (System.Int32)row[dataColumn];
            //Campo "REV_IDOBJ"
            dataColumn = dataTable.Columns["REV_IDOBJ"];
            if (!row.IsNull(dataColumn))
                mappedObject.REV_IDOBJ = (System.Int32)row[dataColumn];
            //Campo "REV_IDOBJ_TIPO_REVISIONE"
            dataColumn = dataTable.Columns["REV_IDOBJ_TIPO_REVISIONE"];
            if (!row.IsNull(dataColumn))
                mappedObject.REV_IDOBJ_TIPO_REVISIONE = (System.Int32)row[dataColumn];
            //Campo "REV_IDOBJ_ORGANO_REVISORE"
            dataColumn = dataTable.Columns["REV_IDOBJ_ORGANO_REVISORE"];
            if (!row.IsNull(dataColumn))
                mappedObject.REV_IDOBJ_ORGANO_REVISORE = (System.Int32)row[dataColumn];
            //Campo "REV_DESC_ORGANO_REVISORE"
            dataColumn = dataTable.Columns["REV_DESC_ORGANO_REVISORE"];
            if (!row.IsNull(dataColumn))
                mappedObject.REV_DESC_ORGANO_REVISORE = (System.String)row[dataColumn];
            //Campo "REV_IDOBJ_ESITO_REVISIONE"
            dataColumn = dataTable.Columns["REV_IDOBJ_ESITO_REVISIONE"];
            if (!row.IsNull(dataColumn))
                mappedObject.REV_IDOBJ_ESITO_REVISIONE = (System.Int32)row[dataColumn];
			//Campo "REV_DATA_CONCLUSIONE"
			dataColumn = dataTable.Columns["REV_DATA_CONCLUSIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.REV_DATA_CONCLUSIONE = (System.DateTime)row[dataColumn];
			//Campo "REV_DATA_DEPOSITO_RELAZIONE"
			dataColumn = dataTable.Columns["REV_DATA_DEPOSITO_RELAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.REV_DATA_DEPOSITO_RELAZIONE = (System.DateTime)row[dataColumn];
			//Campo "REV_NUMERO_DETERMINA_REVOCA"
			dataColumn = dataTable.Columns["REV_NUMERO_DETERMINA_REVOCA"];
			if(!row.IsNull(dataColumn))
				mappedObject.REV_NUMERO_DETERMINA_REVOCA = (System.String)row[dataColumn];
			//Campo "REV_DATA_DETERMINA_REVOCA"
			dataColumn = dataTable.Columns["REV_DATA_DETERMINA_REVOCA"];
			if(!row.IsNull(dataColumn))
				mappedObject.REV_DATA_DETERMINA_REVOCA = (System.DateTime)row[dataColumn];
			//Campo "INC_IDOBJ"
			dataColumn = dataTable.Columns["INC_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.INC_IDOBJ = (System.Double)row[dataColumn];
			//Campo "INC_DATA_SCADENZA_TEORICA"
			dataColumn = dataTable.Columns["INC_DATA_SCADENZA_TEORICA"];
			if(!row.IsNull(dataColumn))
				mappedObject.INC_DATA_SCADENZA_TEORICA = (System.DateTime)row[dataColumn];
			//Campo "INC_DATA_DELIBERA_INCARICO"
			dataColumn = dataTable.Columns["INC_DATA_DELIBERA_INCARICO"];
			if(!row.IsNull(dataColumn))
				mappedObject.INC_DATA_DELIBERA_INCARICO = (System.DateTime)row[dataColumn];
			//Campo "INC_NUMERO_DETERMINA_INCARICO"
			dataColumn = dataTable.Columns["INC_NUMERO_DETERMINA_INCARICO"];
			if(!row.IsNull(dataColumn))
				mappedObject.INC_NUMERO_DETERMINA_INCARICO = (System.String)row[dataColumn];
			//Campo "INC_DATA_DETERMINA_INCARICO"
			dataColumn = dataTable.Columns["INC_DATA_DETERMINA_INCARICO"];
			if(!row.IsNull(dataColumn))
				mappedObject.INC_DATA_DETERMINA_INCARICO = (System.DateTime)row[dataColumn];
			//Campo "INC_IMPEGNO"
			dataColumn = dataTable.Columns["INC_IMPEGNO"];
			if(!row.IsNull(dataColumn))
				mappedObject.INC_IMPEGNO = (System.Double)row[dataColumn];
			//Campo "COMPENSI_IDOBJ"
			dataColumn = dataTable.Columns["COMPENSI_IDOBJ"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPENSI_IDOBJ = (System.Double)row[dataColumn];
			//Campo "COMPENSI_IDOBJ_SOGGETTO"
			dataColumn = dataTable.Columns["COMPENSI_IDOBJ_SOGGETTO"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPENSI_IDOBJ_SOGGETTO = (System.Double)row[dataColumn];
			//Campo "COMPENSI_SOGG_DESC"
			dataColumn = dataTable.Columns["COMPENSI_SOGG_DESC"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPENSI_SOGG_DESC = (System.String)row[dataColumn];
			//Campo "COMPENSI_TOTALE"
			dataColumn = dataTable.Columns["COMPENSI_TOTALE"];
			if(!row.IsNull(dataColumn))
				mappedObject.COMPENSI_TOTALE = (System.Double)row[dataColumn];
			//Campo "ADESIONE_ASSOCIAZIONE"
			dataColumn = dataTable.Columns["ADESIONE_ASSOCIAZIONE"];
			if(!row.IsNull(dataColumn))
				mappedObject.ADESIONE_ASSOCIAZIONE = (System.String)row[dataColumn];
			return mappedObject;
		}

		/// <summary>
		/// Creates a DataTable to store the objects GVCVRICERCAREV_DAEFF
		/// </summary>
		/// <returns>A DataTable</returns>
		protected virtual DataTable CreateDataTable()
		{
			DataTable dataTable = new DataTable();
			dataTable.TableName = "GVCVRICERCAREV_DAEFF";
			DataColumn dataColumn;
			dataColumn = dataTable.Columns.Add("S_DENOMINAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("S_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_NUMERO_REA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ_STATO", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("STATO_FLAG_REVISIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_IDOBJ_CADENZA_REVISIONE", typeof(System.Int32));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("R_DATA_COSTITUZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("REV_ANNO_REVISIONE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("REV_IDOBJ", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("REV_IDOBJ_TIPO_REVISIONE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("REV_IDOBJ_ORGANO_REVISORE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("REV_DESC_ORGANO_REVISORE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("REV_IDOBJ_ESITO_REVISIONE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("REV_DATA_CONCLUSIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("REV_DATA_DEPOSITO_RELAZIONE", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("REV_NUMERO_DETERMINA_REVOCA", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("REV_DATA_DETERMINA_REVOCA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("INC_IDOBJ", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("INC_DATA_SCADENZA_TEORICA", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("INC_DATA_DELIBERA_INCARICO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("INC_NUMERO_DETERMINA_INCARICO", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("INC_DATA_DETERMINA_INCARICO", typeof(System.DateTime));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("INC_IMPEGNO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPENSI_IDOBJ", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPENSI_IDOBJ_SOGGETTO", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPENSI_SOGG_DESC", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("COMPENSI_TOTALE", typeof(System.Double));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			dataColumn = dataTable.Columns.Add("ADESIONE_ASSOCIAZIONE", typeof(System.String));
			dataColumn.AllowDBNull = true;
			dataColumn.ReadOnly = false;
			dataColumn.Unique = false;
			dataColumn.AutoIncrement = false;
			return dataTable;
		}

		/// <summary>
		/// Adds to an IDbCommand a IDbDataParameter
		/// </summary>
		/// <param name="cmd">The IDbCommand</param>
		/// <param name="paramName">The parameter name to add</param>
		/// <param name="valore">The value of the parameter</param>
		/// <returns>A IDbDataParameter</returns>
		protected virtual IDbDataParameter AddParameter(IDbCommand cmd, string paramName, object valore)
		{
			IDbDataParameter parameter;
			switch(paramName)
			{
				case "S_DENOMINAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "S_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_NUMERO_REA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "R_IDOBJ_STATO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "STATO_FLAG_REVISIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_IDOBJ_CADENZA_REVISIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Int32, valore);
					break;

				case "R_DATA_COSTITUZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "REV_ANNO_REVISIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "REV_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "REV_IDOBJ_TIPO_REVISIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "REV_IDOBJ_ORGANO_REVISORE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "REV_DESC_ORGANO_REVISORE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "REV_IDOBJ_ESITO_REVISIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "REV_DATA_CONCLUSIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "REV_DATA_DEPOSITO_RELAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "REV_NUMERO_DETERMINA_REVOCA":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "REV_DATA_DETERMINA_REVOCA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "INC_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "INC_DATA_SCADENZA_TEORICA":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "INC_DATA_DELIBERA_INCARICO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "INC_NUMERO_DETERMINA_INCARICO":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "INC_DATA_DETERMINA_INCARICO":
					parameter = _db.AddParameter(cmd, paramName, DbType.DateTime, valore);
					break;

				case "INC_IMPEGNO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "COMPENSI_IDOBJ":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "COMPENSI_IDOBJ_SOGGETTO":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "COMPENSI_SOGG_DESC":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				case "COMPENSI_TOTALE":
					parameter = _db.AddParameter(cmd, paramName, DbType.Double, valore);
					break;

				case "ADESIONE_ASSOCIAZIONE":
					parameter = _db.AddParameter(cmd, paramName, DbType.String, valore);
					break;

				default:
					throw new ArgumentException("Nome parametro sconosciuto (" + paramName + ").");
			}
			return parameter;
		}
	}
}
